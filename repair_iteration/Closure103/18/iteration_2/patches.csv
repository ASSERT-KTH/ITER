bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  parent,  n);	  NodeTraversal.traverse(compiler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  parent,  this);	  NodeTraversal.traverse(compiler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  root);	  NodeTraversal.traverse(compiler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  n.getMessage());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  n.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  n.getMessage());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
6	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.getMessage());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  Token.getMessage());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.toString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.toString());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.toString());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
8	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.getMessage(),  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.getMessage(),  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.getMessage(),  n);	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
9	[BUG]  [BUGGY]  handleAnalyze(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAnalyze(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAnalyze(n);	  handleAnalysis(n);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  entry);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
13	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContextForNoInOperator(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContextForNoInOperator(t,  n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContextForNoInOperator(t,  n,  parent);	  Context    cfg    =    Context.getCurrentContextForNoInOperator(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
14	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContextForNoInOperator(t,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContextForNoInOperator(t,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContextForNoInOperator(t,  parent);	  Context    cfg    =    Context.getCurrentContextForNoInOperator(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
15	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContextForReturn(t,  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContextForReturn(t,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContextForReturn(t,  n);	  Context    cfg    =    Context.getCurrentContextForNoInOperator(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
21	[BUG]  [BUGGY]  handleColumn(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleColumn(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleColumn(n);	  handleRow(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  handleCollection(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleCollection(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleCollection(n);	  handleRow(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  handleReturn(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleReturn(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleReturn(n);	  handleRow(n);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  t.getCurrentContext();	  Context    cfg    =    parent.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
25	[BUG]  [BUGGY]  Context  cfg  =  n.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  n.getCurrentContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  n.getCurrentContext();	  Context    cfg    =    parent.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
26	[BUG]  [BUGGY]  Context  cfg  =  node.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  node.getCurrentContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  node.getCurrentContext();	  Context    cfg    =    parent.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
27	[BUG]  [BUGGY]  Context  cfg  =  t.getContext();  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  t.getContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  t.getContext();	  Context    cfg    =    parent.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
28	[BUG]  [BUGGY]  handleOwner(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleOwner(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleOwner(n);	  handleOwn(n);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
29	[BUG]  [BUGGY]  handleOwn(n,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleOwn(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleOwn(n,  parent);	  handleOwn(n);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
30	[BUG]  [BUGGY]  parent!=  null  &&  shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent!=  null  &&  shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent!=  null  &&  shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
31	[BUG]  [BUGGY]  parent  ==  null  ||  shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent  ==  null  ||  shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent  ==  null  ||  shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
32	[BUG]  [BUGGY]  parent  ==  null  &&  isFunctionDeclaration(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent  ==  null  &&  isFunctionDeclaration(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent  ==  null  &&  isFunctionDeclaration(n))  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
33	[BUG]  [BUGGY]  parent!=  null  &&  isFunctionDeclaration(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent!=  null  &&  isFunctionDeclaration(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent!=  null  &&  isFunctionDeclaration(n))  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
39	[BUG]  [BUGGY]  While(shouldTraverseFunctions  &&  parent!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  While(shouldTraverseFunctions  &&  parent!=  null)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	While(shouldTraverseFunctions  &&  parent!=  null)  {  return;  }	  While(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
40	[BUG]  [BUGGY]  while(shouldTraverseFunctions  &&  parent!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  while(shouldTraverseFunctions  &&  parent!=  null)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	while(shouldTraverseFunctions  &&  parent!=  null)  {  return;  }	  While(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
41	[BUG]  [BUGGY]  n.addChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.addChildToFront(parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.addChildToFront(parent);	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
42	[BUG]  [BUGGY]  n.replaceChild(n,  handleFunction(n));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleFunction(n));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleFunction(n));	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
43	[BUG]  [BUGGY]  n.replaceChild(n,  handleRow(n));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleRow(n));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleRow(n));	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
44	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent  ==  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent  ==  null);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent  ==  null);	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
45	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n  ==  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n  ==  parent.getFirstChild());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  n  ==  parent.getFirstChild());	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
46	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n  ==  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n  ==  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  n  ==  parent);	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  parent);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
53	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(Token.EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(Token.EXPR_RESULT));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(Token.EXPR_RESULT));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
54	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
55	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(Token.THROW));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(Token.THROW));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(Token.THROW));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
56	[BUG]  [BUGGY]  parent!=  null  &&!shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent!=  null  &&!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent!=  null  &&!shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
57	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Node  parent  =  n.getParent();	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ControlFlowAnalysisGraph());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ControlFlowAnalysisGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ControlFlowAnalysisGraph());	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowAnalysisGraph());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  parent);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowAnalysisGraph());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ControlFlowAnalysisGraph());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ControlFlowAnalysisGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ControlFlowAnalysisGraph());	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowAnalysisGraph());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
64	[BUG]  [BUGGY]  handleStatement(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  parent,  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  parent,  cfg);	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
65	[BUG]  [BUGGY]  handleStatement(n,  parent.cloneTree());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  parent.cloneTree());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  parent.cloneTree());	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
66	[BUG]  [BUGGY]  handleStatement(n,  parent,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  parent,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  parent,  t);	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
70	[BUG]  [BUGGY]  Context  cfg  =  getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  getCurrentContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  getCurrentContext();	  Context    cfg    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  t);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  cfg);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
77	[BUG]  [BUGGY]  handleSerialize(n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleSerialize(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleSerialize(n,  parent);	  handleSerialize(n);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
78	[BUG]  [BUGGY]  handleSerializer(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleSerializer(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleSerializer(n);	  handleSerialize(n);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
82	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  t,  parent);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
83	[BUG]  [BUGGY]  TraverseFunctions.traverse(compiler,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  TraverseFunctions.traverse(compiler,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	TraverseFunctions.traverse(compiler,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
84	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Traversal.traverse(compiler,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Traversal.traverse(compiler,  n);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  root,  n,  astPositionCounter);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  root,  n,  parent);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
90	[BUG]  [BUGGY]  safelyMap.put(n,  handleAllFunctions);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleAllFunctions);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleAllFunctions);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
91	[BUG]  [BUGGY]  safelyMap.put(n,  handleFunction(n));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleFunction(n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleFunction(n));	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
92	[BUG]  [BUGGY]  safeMap.put(n,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safeMap.put(n,  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safeMap.put(n,  parent);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
93	[BUG]  [BUGGY]  safelyMap.put(n,  handleReturn);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleReturn);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleReturn);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
94	[BUG]  [BUGGY]  safelyMap.put(n,  handleFunctions);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleFunctions);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleFunctions);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
95	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  astPositionCounter);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  astPositionCounter);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
96	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  parent);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
97	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  this);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
98	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  root);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  root);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  root);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
99	[BUG]  [BUGGY]  n  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n  =  node.getLastChild();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n  =  node.getLastChild();	  n    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
100	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(t,  parent);	  Context    cfg    =    Context.getCurrentContext(t);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
102	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
103	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  exceptionHandler,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
106	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(n,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(n,  parent);	  Context    cfg    =    Context.getCurrentContext(n);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
107	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(n  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(n  +  1);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(n  +  1);	  Context    cfg    =    Context.getCurrentContext(n);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
108	[BUG]  [BUGGY]  handleExpr(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleExpr(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleExpr(n);	  handleExpression(n);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
109	[BUG]  [BUGGY]  handleEscaped(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEscaped(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEscaped(n);	  handleExpression(n);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
110	[BUG]  [BUGGY]  n.replaceChild(n,  entry);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  entry);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  entry);	  n.removeChild(entry);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
111	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getMessage());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getMessage());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
112	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  t.getMessage());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  t.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  t.getMessage());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
113	[BUG]  [BUGGY]  Throwables.weirdString( "Failed  to  parse: "  +  t.getMessage());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.weirdString( "Failed  to  parse: "  +  t.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.weirdString( "Failed  to  parse: "  +  t.getMessage());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
114	[BUG]  [BUGGY]  new  IllegalStateException( "Failed  to  parse: "  +  t.getMessage());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  new  IllegalStateException( "Failed  to  parse: "  +  t.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	new  IllegalStateException( "Failed  to  parse: "  +  t.getMessage());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
115	[BUG]  [BUGGY]  handleShouldTraverseFunction(n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(n,  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(n,  parent);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
116	[BUG]  [BUGGY]  handleShouldTraverseFunction(t,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(t,  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(t,  n);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
117	[BUG]  [BUGGY]  handleShouldTraverseFunction(n.cloneTree());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(n.cloneTree());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(n.cloneTree());	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
118	[BUG]  [BUGGY]  handleShouldTraverseFunction(n,  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(n,  cfg);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(n,  cfg);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleFunction(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleFunction(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleFunction(n);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  parent);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
123	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.traverse(compiler,  n,  null);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
124	[BUG]  [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	||  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
125	[BUG]  [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	||  t.getModule()  ==  Token.FUNCTION)  {  return;	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
126	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
127	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
128	[BUG]  [BUGGY]  n.removeChild(getNameNode());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.removeChild(getNameNode());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.removeChild(getNameNode());	  n.removeChild(name);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
129	[BUG]  [BUGGY]  n.removeChild(getName());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.removeChild(getName());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.removeChild(getName());	  n.removeChild(name);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  shouldTraverseFunctions);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    this,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
133	[BUG]  [BUGGY]  handleAstControlFlowGraph(n,  cfg,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAstControlFlowGraph(n,  cfg,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAstControlFlowGraph(n,  cfg,  parent);	  handleAstControlFlowGraph(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
134	[BUG]  [BUGGY]  handleFunction(n,  cfg);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleFunction(n,  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleFunction(n,  cfg);	  handleAstControlFlowGraph(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
135	[BUG]  [BUGGY]  safeMap.put(n,  parent)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safeMap.put(n,  parent)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safeMap.put(n,  parent)  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
136	[BUG]  [BUGGY]  safelyMap.put(n,  handleAllFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleAllFunctions)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleAllFunctions)  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
137	[BUG]  [BUGGY]  safelyMap.put(n,  handleFunction(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleFunction(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleFunction(n))  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
138	[BUG]  [BUGGY]  safelyMap.put(n,  handleFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleFunctions)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleFunctions)  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
139	[BUG]  [BUGGY]  safelyMap.put(n,  handleReturnValue(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleReturnValue(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleReturnValue(n))  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
140	[BUG]  [BUGGY]  handleEmbedded(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmbedded(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmbedded(n);	  handleEmbeddedBy(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
141	[BUG]  [BUGGY]  handleEmbeddedBy(n,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmbeddedBy(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmbeddedBy(n,  parent);	  handleEmbeddedBy(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
142	[BUG]  [BUGGY]  handleEmbeddedWith(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmbeddedWith(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmbeddedWith(n);	  handleEmbeddedBy(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    this);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    this);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    this);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  null);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  null);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    this);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
147	[BUG]  [BUGGY]  Context  cfg  =  Context.createContext(n,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.createContext(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.createContext(n,  parent);	  Context    cfg    =    Context.currentContext();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
148	[BUG]  [BUGGY]  Context  cfg  =  Context.createContext(n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.createContext(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.createContext(n);	  Context    cfg    =    Context.currentContext();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
149	[BUG]  [BUGGY]  Context  cfg  =  Context.createContext(t,  n);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.createContext(t,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.createContext(t,  n);	  Context    cfg    =    Context.currentContext();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
150	[BUG]  [BUGGY]  n.replaceChild(n,  key);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  key);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  key);	  n.removeChild(key);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
151	[BUG]  [BUGGY]  handleShouldTraverseFunction(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
152	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
153	[BUG]  [BUGGY]  ||  handleShouldTraverseFunction(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  ||  handleShouldTraverseFunction(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	||  handleShouldTraverseFunction(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
154	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n));	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
155	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  astPositionCounter);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
156	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  nodePriorities);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
157	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  root);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  root);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  root);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
158	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  this);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
164	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  shouldTraverseFunctions);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  hashCode);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  hashCode);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  hashCode);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  type);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  type);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  type);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
167	[BUG]  [BUGGY]  handleDeepest(n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleDeepest(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleDeepest(n,  parent);	  handleDeepest(n);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
168	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Token  is  null. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "The  Token  is  null. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( "The  Token  is  null. ");	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
169	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. "));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. "));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. "));	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
170	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. ");	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
171	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. "),  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. "),  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw(new  IllegalArgumentException( "The  Token  is  null. "),  n);	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
172	[BUG]  [BUGGY]  Node  entry  =  n.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Node  entry  =  n.getFirstChild();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Node  entry  =  n.getFirstChild();	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
173	[BUG]  [BUGGY]  Node  entry  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Node  entry  =  n.getLastChild();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Node  entry  =  n.getLastChild();	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
174	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
175	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Node  n  =  parent.getFirstChild();	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
176	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent)  {  return;  }	  NeighborTraversal.traverse(compiler,    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
177	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  root)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  root)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  root)  {  return;  }	  NeighborTraversal.traverse(compiler,    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
178	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  parent)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  parent)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  parent)  {  return;  }	  NeighborTraversal.traverse(compiler,    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
179	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  this)  {  return;  }	  NeighborTraversal.traverse(compiler,    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
180	[BUG]  [BUGGY]  Context.traverse(compiler,  n)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.traverse(compiler,  n)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.traverse(compiler,  n)  {  return;  }	  NeighborTraversal.traverse(compiler,    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
181	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  frumoase);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  frumoase);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  frumoase);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
182	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n!=  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  n!=  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  n!=  parent);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
183	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(Token.EXPR_RESULT));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(Token.EXPR_RESULT));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(Token.EXPR_RESULT));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
184	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( " "));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( " "));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
185	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( " ".equals(n.getString()));	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
186	[BUG]  [BUGGY]  n.replaceChild(n,  value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  value);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  value);	  n.removeChild(value);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
187	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  t.getCompiler()!=  n)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  &&  t.getCompiler()!=  n)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  &&  t.getCompiler()!=  n)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getCompiler()!=    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
188	[BUG]  [BUGGY]  ||  t.getCompiler()!=  n)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  ||  t.getCompiler()!=  n)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	||  t.getCompiler()!=  n)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getCompiler()!=    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
189	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getCompiler()!=  parent)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  t.getCompiler()!=  parent)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  t.getCompiler()!=  parent)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getCompiler()!=    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
190	[BUG]  [BUGGY]  n  =  t.getCompiler();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n  =  t.getCompiler();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n  =  t.getCompiler();	  if(shouldTraverseFunctions    ||    t.getCompiler()!=    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleExceptionHandler,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleExceptionHandler,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  handleExceptionHandler,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
194	[BUG]  [BUGGY]  if(!shouldTraverseFunctions  &&  parent!=  n.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(!shouldTraverseFunctions  &&  parent!=  n.getFirstChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(!shouldTraverseFunctions  &&  parent!=  n.getFirstChild())  {  return;  }	  if(!shouldTraverseFunctions    &&    n!=    parent.getFirstChild())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
195	[BUG]  [BUGGY]  &&  n!=  parent.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  &&  n!=  parent.getFirstChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	&&  n!=  parent.getFirstChild())  {  return;  }	  if(!shouldTraverseFunctions    &&    n!=    parent.getFirstChild())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
196	[BUG]  [BUGGY]  if(!shouldTraverseFunctions  &&  n  ==  parent.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(!shouldTraverseFunctions  &&  n  ==  parent.getFirstChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(!shouldTraverseFunctions  &&  n  ==  parent.getFirstChild())  {  return;  }	  if(!shouldTraverseFunctions    &&    n!=    parent.getFirstChild())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
200	[BUG]  [BUGGY]  handleAstControlFlowGraph(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAstControlFlowGraph(n,  parent,  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAstControlFlowGraph(n,  parent,  cfg);	  handleAstControlFlowGraph(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
201	[BUG]  [BUGGY]  handleAstControlFlowGraph(n,  parent.cloneTree());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAstControlFlowGraph(n,  parent.cloneTree());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAstControlFlowGraph(n,  parent.cloneTree());	  handleAstControlFlowGraph(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunction(n),  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunction(n),  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  handleFunction(n),  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
206	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
207	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  n);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
208	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.eXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.eXPR_RESULT);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.eXPR_RESULT);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
209	[BUG]  [BUGGY]  Throwables.weirdString( "EXPR_RESULT "  +  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.weirdString( "EXPR_RESULT "  +  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.weirdString( "EXPR_RESULT "  +  n);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
210	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n,  parent);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
211	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n,  astPositionCounter);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
212	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n,  this);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
213	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  1);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n,  1);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  n,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  ControlFlowGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  ControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysis());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysis());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysis());	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  parent);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  ControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  ControlFlowGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  ControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
223	[BUG]  [BUGGY]  n.replaceChild(n,  handleTry(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleTry(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleTry(n);	  n.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
224	[BUG]  [BUGGY]  n.replaceChild(n,  handleNull(n));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleNull(n));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleNull(n));	  n.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
225	[BUG]  [BUGGY]  n.replaceChild(n,  handleNumber(n));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleNumber(n));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleNumber(n));	  n.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
226	[BUG]  [BUGGY]  n.replaceChild(n,  handleTry(n));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleTry(n));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleTry(n));	  n.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
227	[BUG]  [BUGGY]  handleFunction(n,  parent,  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleFunction(n,  parent,  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleFunction(n,  parent,  cfg);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
228	[BUG]  [BUGGY]  handleFunction(n,  parent.cloneTree());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleFunction(n,  parent.cloneTree());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleFunction(n,  parent.cloneTree());	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
229	[BUG]  [BUGGY]  handleFunction(n,  parent,  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleFunction(n,  parent,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleFunction(n,  parent,  t);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
230	[BUG]  [BUGGY]  handleControlFlowAnalysis(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleControlFlowAnalysis(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleControlFlowAnalysis(n);	  handleControlFlowGraph(n);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
231	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
232	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  parent);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
233	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n,  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n,  parent);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
234	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getString()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getString()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getString()));	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
235	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getFirstChild().getType()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getFirstChild().getType()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getFirstChild().getType()));	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
236	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType()),  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType()),  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getType()),  n);	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
237	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Token.name(n.getType()));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( "Token.name(n.getType()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( "Token.name(n.getType()));	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
238	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ")  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( " ")	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
239	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException(n);	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
240	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeUtil.mayHaveSideEffects(n))  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
241	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  value);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  value);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  this);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
243	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent  ==  null)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent  ==  null)  {  return;  }	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
244	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||!n.hasChildren())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||!n.hasChildren())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||!n.hasChildren())  {  return;  }	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
245	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  ControlFlowGraph());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  ControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
247	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType()),  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType()),  t);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getType()),  t);	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
248	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getFirstChild()));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getFirstChild()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getFirstChild()));	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
249	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType(),  n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType(),  n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getType(),  n));	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
252	[BUG]  [BUGGY]  n.replaceChild(n,  root);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  root);	  n.removeChild(root);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowAnalysisGraph());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
254	[BUG]  [BUGGY]  n.replaceChild(n,  handleRight(n));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(n,  handleRight(n));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(n,  handleRight(n));	  n.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  return;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  return;  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  return;	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
256	[BUG]  [BUGGY]  handleFunction(n,  root);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleFunction(n,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleFunction(n,  root);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  root,  null);	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  cfg);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
261	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  value);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  root,  n,  value);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
262	[BUG]  [BUGGY]  Context  cfg  =  context.getCurrentContext(n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  context.getCurrentContext(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  context.getCurrentContext(n);	  Context    cfg    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
263	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.toString(n.getMessage());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.toString(n.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.toString(n.getMessage());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
264	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.toString(n.getMessage()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.toString(n.getMessage()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.toString(n.getMessage()));	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
265	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.tokenToName(n.getMessage());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.tokenToName(n.getMessage());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.tokenToName(n.getMessage());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
266	[BUG]  [BUGGY]  safeMap.put(n,  handleHandler)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safeMap.put(n,  handleHandler)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safeMap.put(n,  handleHandler)  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
267	[BUG]  [BUGGY]  safeMap.put(n,  handleStatement)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safeMap.put(n,  handleStatement)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safeMap.put(n,  handleStatement)  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
268	[BUG]  [BUGGY]  safeMap.put(n,  handleHandle)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safeMap.put(n,  handleHandle)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safeMap.put(n,  handleHandle)  {  return;  }	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
269	[BUG]  [BUGGY]  safelyMap.put(n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  parent);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  parent);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
270	[BUG]  [BUGGY]  safelyMap.put(n,  handleReturnValue(n));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleReturnValue(n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleReturnValue(n));	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
271	[BUG]  [BUGGY]  safelyMap.put(n,  handleRange(n));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleRange(n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleRange(n));	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
272	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getCompiler()  ==  n)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  t.getCompiler()  ==  n)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  t.getCompiler()  ==  n)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getCompiler()!=    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
273	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.THROW);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.THROW);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  Token.THROW);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
274	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException(n);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
275	[BUG]  [BUGGY]  handleShouldHaveSideEffects(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldHaveSideEffects(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldHaveSideEffects(n);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
276	[BUG]  [BUGGY]  handleShouldTraverse(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverse(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverse(n);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
277	[BUG]  [BUGGY]  handleShouldReturn(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldReturn(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldReturn(n);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
278	[BUG]  [BUGGY]  Context  cfg  =  Context.currentTree();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.currentTree();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.currentTree();	  Context    cfg    =    Context.currentContext();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
279	[BUG]  [BUGGY]  Context  cfg  =  Context.currentToken();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.currentToken();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.currentToken();	  Context    cfg    =    Context.currentContext();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  root,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  t,  root);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  cfg,  t);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
284	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.removeChild(type);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.removeChild(type);	  n.removeChild(name);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  value);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  value);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
287	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( "Failed  to  parse: "  +  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw(new  IllegalStateException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw(new  IllegalStateException( "Failed  to  parse: "  +  n);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
288	[BUG]  [BUGGY]  handleControlFlow(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleControlFlow(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleControlFlow(n);	  handleControlFlowGraph(n);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
289	[BUG]  [BUGGY]  handleControlFlowGraph(n,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleControlFlowGraph(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleControlFlowGraph(n,  parent);	  handleAstControlFlowGraph(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  first,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  first,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  first,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
291	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContextForNonExpression(t,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContextForNonExpression(t,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContextForNonExpression(t,  n);	  Context    cfg    =    Context.getCurrentContextForNoInOperator(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
292	[BUG]  [BUGGY]  handleThrough(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleThrough(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleThrough(n);	  handleFallThrough(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph(),  this);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph(),  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph(),  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    this);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
294	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  handleCfg(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  handleCfg(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	AstControlFlowGraph  <  Node>  cfg  =  handleCfg(n);	  While(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
296	[BUG]  [BUGGY]  parent  ==  null  &&  isAstControlFlowGraph)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent  ==  null  &&  isAstControlFlowGraph)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent  ==  null  &&  isAstControlFlowGraph)  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n)  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
298	[BUG]  [BUGGY]  parent!=  null  &&  isAstControlFlowGraph)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent!=  null  &&  isAstControlFlowGraph)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent!=  null  &&  isAstControlFlowGraph)  {  return;  }	  parent    ==    null    &&    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
299	[BUG]  [BUGGY]  n.replaceChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.replaceChild(parent,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.replaceChild(parent,  n);	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
300	[BUG]  [BUGGY]  n.addChildToBack(parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.addChildToBack(parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.addChildToBack(parent);	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
301	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
303	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  root);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n,  root);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
304	[BUG]  [BUGGY]  handleOp(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleOp(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleOp(n);	  handleGet(n);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
305	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent!=  null);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent!=  null);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent!=  null);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
306	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent));	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
307	[BUG]  [BUGGY]  handleDeeps(n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleDeeps(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleDeeps(n);	  handleDeep(n);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
308	[BUG]  [BUGGY]  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	||  t.getModule()!=  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
309	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
310	[BUG]  [BUGGY]  handleEmpty(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmpty(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmpty(n);	  handleExpression(n);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
311	[BUG]  [BUGGY]  handleOther(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleOther(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleOther(n);	  handleOwn(n);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
312	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(parent,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(parent,  n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContext(parent,  n);	  Context    cfg    =    Context.getCurrentContext(parent);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Preconditions.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Preconditions.checkState(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Preconditions.checkState(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Preconditions.checkState(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Preconditions.checkState(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Preconditions.checkState(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent));	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
316	[BUG]  [BUGGY]  handleStatement(n,  root);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  root);	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
317	[BUG]  [BUGGY]  handleEmbeddedByName(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmbeddedByName(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmbeddedByName(n);	  handleEmbeddedBy(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
318	[BUG]  [BUGGY]  handleShouldTraverseFunction(n))  {  return;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(n))  {  return;  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(n))  {  return;	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
319	[BUG]  [BUGGY]  handlesShouldTraverseFunction(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handlesShouldTraverseFunction(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handlesShouldTraverseFunction(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
320	[BUG]  [BUGGY]  if(!shouldTraverseFunctions  &&  n!=  parent.getLastChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(!shouldTraverseFunctions  &&  n!=  parent.getLastChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(!shouldTraverseFunctions  &&  n!=  parent.getLastChild())  {  return;  }	  if(!shouldTraverseFunctions    &&    n!=    parent.getFirstChild())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
321	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  handleExpression(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  handleExpression(n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  handleExpression(n);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
322	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  handleExpression(n));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  handleExpression(n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.EXPR_RESULT,  handleExpression(n));	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
323	[BUG]  [BUGGY]  throw  new  IllegalStateException( "The  Token  is  null. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalStateException( "The  Token  is  null. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalStateException( "The  Token  is  null. ");	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
324	[BUG]  [BUGGY]  handleAnalysis(n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAnalysis(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAnalysis(n,  parent);	  handleAnalysis(n);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
328	[BUG]  [BUGGY]  n.removeChild(getAstRoot(parent));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.removeChild(getAstRoot(parent));  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.removeChild(getAstRoot(parent));	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
329	[BUG]  [BUGGY]  Context  cfg  =  n,  parent.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  n,  parent.getCurrentContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  n,  parent.getCurrentContext();	  Context    cfg    =    parent.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
330	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType(),  t.getModule()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.name(n.getType(),  t.getModule()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.name(n.getType(),  t.getModule()));	  throw    new    IllegalArgumentException(   "   "    +    Token.name(n.getType()));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
331	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  handleShouldTraverseFunction(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  &&  handleShouldTraverseFunction(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  &&  handleShouldTraverseFunction(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
332	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n,  parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n,  parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n,  parent))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
333	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(parent))  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
334	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n)||  parent!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n)||  parent!=  null)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  handleShouldTraverseFunction(n)||  parent!=  null)  {  return;  }	  if(shouldTraverseFunctions    ||    handleShouldTraverseFunction(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
335	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  t);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  t);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  t);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
336	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
337	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getMessage()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getMessage()));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(t.getMessage()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
338	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
339	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tMap.put(n,  finallyMap  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tMap.put(n,  finallyMap  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(tMap.put(n,  finallyMap	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
340	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiPolyMap.put(n,  finallyMap.put(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiPolyMap.put(n,  finallyMap.put(  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiPolyMap.put(n,  finallyMap.put(	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
341	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiBottomMap.put(n,  finallyMap.put  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiBottomMap.put(n,  finallyMap.put  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetiBottomMap.put(n,  finallyMap.put	  safelyMap.put(n,    shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
342	[BUG]  [BUGGY]  Context  cfg  =  this.context.getCurrentContext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  this.context.getCurrentContext();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  this.context.getCurrentContext();	  Context    cfg    =    context.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
343	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "The  Token  is  null. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "The  Token  is  null. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwable  t  =  new  IllegalArgumentException( "The  Token  is  null. ");	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
344	[BUG]  [BUGGY]  reportError(t,  n, "The  Token  is  null. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  reportError(t,  n, "The  Token  is  null. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	reportError(t,  n, "The  Token  is  null. ");	  throw    new    IllegalArgumentException(   "The    Token    is    null.   ");    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
345	[BUG]  [BUGGY]  While(shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  While(shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	While(shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }	  While(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
346	[BUG]  [BUGGY]  handleStatement(n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  parent.getFirstChild());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  parent.getFirstChild());	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
347	[BUG]  [BUGGY]  handleStatement(n,  parent.getParent());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  parent.getParent());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  parent.getParent());	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
348	[BUG]  [BUGGY]  handleStatement(n,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleStatement(n,  parent.getLastChild());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleStatement(n,  parent.getLastChild());	  handleStatement(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
349	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
350	[BUG]  [BUGGY]  handleSwitch(n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleSwitch(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleSwitch(n);	  handleFallThrough(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
351	[BUG]  [BUGGY]  handleShouldTraverseFunction(t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleShouldTraverseFunction(t);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleShouldTraverseFunction(t);	  handleShouldTraverseFunction(n);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  this);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowAnalysisGraph());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  cfg);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowAnalysisGraph(),  cfg);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowAnalysisGraph());    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.priorityCounter);	  NodeTraversal.traverse(compiler,    n,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
355	[BUG]  [BUGGY]  n!=  parent.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n!=  parent.getFirstChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n!=  parent.getFirstChild())  {  return;  }	  if(!shouldTraverseFunctions    &&    n!=    parent.getFirstChild())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
356	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }	  if(!shouldTraverseFunctions    &&    n!=    parent.getFirstChild())    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
357	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContextForNode(n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContextForNode(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.getCurrentContextForNode(n);	  Context    cfg    =    Context.getCurrentContext(parent);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
358	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.getMessage1());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.getMessage1());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.getMessage1());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
359	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.getMessage2());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  Token.getMessage2());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  Token.getMessage2());	  throw    new    IllegalArgumentException(   "   "    +    Token.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  root);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  root);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
361	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>())  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>())  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>())  {  return;  }	  NeighborTraversal.traverse(compiler,    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
362	[BUG]  [BUGGY]  n.removeChild(getKey());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n.removeChild(getKey());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n.removeChild(getKey());	  n.removeChild(key);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
363	[BUG]  [BUGGY]  handleAstControlFlowGraph(n,  cfg,  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAstControlFlowGraph(n,  cfg,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAstControlFlowGraph(n,  cfg,  t);	  handleAstControlFlowGraph(n,    cfg);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  t,  this);	  NodeTraversal.traverse(compiler,    t);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  key,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  key,  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  key,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
367	[BUG]  [BUGGY]  Context  cfg  =  Context.currentTimeMillis();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context  cfg  =  Context.currentTimeMillis();  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context  cfg  =  Context.currentTimeMillis();	  Context    cfg    =    Context.currentContext();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  entry);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  entry);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this,  entry);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
371	[BUG]  [BUGGY]  parent  ==  null  ||!shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent  ==  null  ||!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent  ==  null  ||!shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
372	[BUG]  [BUGGY]  parent  ==  null  &&!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  parent  ==  null  &&!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	parent  ==  null  &&!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
373	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  NodeUtil.isExpressionNode(parent))  {  return;  }	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
374	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(n))  {  return;  }	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
375	[BUG]  [BUGGY]  if(!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(n))  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(n))  {  return;  }	  if(!shouldTraverseFunctions    &&    NodeUtil.isExpressionNode(parent))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
376	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  t.toString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  t.toString());  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  t.toString());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
377	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
378	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()!=  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()!=  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()!=  n);	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
379	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()  ==  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()  ==  n);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()  ==  n);	  Context.checkState(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
380	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
381	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
382	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    null);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
383	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Token  is  null. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Token  is  null. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( "The  Token  is  null. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
384	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Token  has  been  deprecated. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "The  Token  has  been  deprecated. ");  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	Throwables.throw  new  IllegalStateException( "The  Token  has  been  deprecated. ");	  Throwables.throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleTry(n),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleTry(n),  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  handleTry(n),  parent);	  NodeTraversal.traverse(compiler,    n,    this,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
387	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  this);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
388	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  nodePriorities);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    ControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
389	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
390	[BUG]  [BUGGY]  safelyMap.put(n,  handleShouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleShouldTraverseFunctions);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleShouldTraverseFunctions);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
391	[BUG]  [BUGGY]  safelyMap.put(n,  handleHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleHandler);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleHandler);	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
392	[BUG]  [BUGGY]  safelyMap.put(n,  handleShouldTraverseFunction(n));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  safelyMap.put(n,  handleShouldTraverseFunction(n));  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	safelyMap.put(n,  handleShouldTraverseFunction(n));	  safelyMap.put(n,    shouldTraverseFunctions);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
394	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n  =  n.getfirstChild();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n  =  n.getfirstChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
395	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	n  =  n.removeFirstChild();	  n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
396	[BUG]  [BUGGY]  handleEmbeddedAst(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmbeddedAst(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmbeddedAst(n);	  handleEmbeddedBy(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
397	[BUG]  [BUGGY]  handleEmbeddedAstBy(n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleEmbeddedAstBy(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleEmbeddedAstBy(n);	  handleEmbeddedBy(n);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
399	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getCompiler()!=  root)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  if(shouldTraverseFunctions  ||  t.getCompiler()!=  root)  {  return;  }  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	if(shouldTraverseFunctions  ||  t.getCompiler()!=  root)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getCompiler()!=    n)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
400	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  null);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  null);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  root,  null);	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
401	[BUG]  [BUGGY]  handleSerialization(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleSerialization(n);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleSerialization(n);	  handleSerialize(n);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
402	[BUG]  [BUGGY]  handleAstControlFlowGraph(n,  parent.getParent());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleAstControlFlowGraph(n,  parent.getParent());  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleAstControlFlowGraph(n,  parent.getParent());	  handleAstControlFlowGraph(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
403	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  exceptionHandler);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.type);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.type);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.type);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.inclusionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.inclusionHandler);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.inclusionHandler);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
407	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  token.EXPR_RESULT);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( " "  +  token.EXPR_RESULT);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
408	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Token.EXPR_RESULT  must  be  >  ' "  +  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  throw  new  IllegalArgumentException( "The  Token.EXPR_RESULT  must  be  >  ' "  +  Token.EXPR_RESULT);  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	throw  new  IllegalArgumentException( "The  Token.EXPR_RESULT  must  be  >  ' "  +  Token.EXPR_RESULT);	  throw    new    IllegalArgumentException(   "   "    +    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.priorityCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.priorityCounter);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.priorityCounter);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
410	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.value);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.value);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
411	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.priorityComparator);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
412	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.type);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.type);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  this.type);	  NodeTraversal.traverse(compiler,    n,    this.exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
413	[BUG]  [BUGGY]  handleFunction(n,  t);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleFunction(n,  t);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleFunction(n,  t);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
414	[BUG]  [BUGGY]  handleSwitch(n,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  handleSwitch(n,  parent);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	handleSwitch(n,  parent);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  root);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleFunction(n);  return;  case  Token.EXPR_RESULT:  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  root);  [BUGGY]      return;  case  Token.CATCH:  handleCatch(n);  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	329	329	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  this,  root);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    this);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
