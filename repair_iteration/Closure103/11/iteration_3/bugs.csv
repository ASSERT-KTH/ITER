bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  parent.getLastChild();	  Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
2	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasCatchBlock(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasCatchBlock(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasCatchBlock(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasCatchBlock(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
3	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasCatchBlock(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasCatchBlock(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasCatchBlock(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(NodeUtil.hasCatchBlock(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
4	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasCatchBlock(node)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasCatchBlock(node)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasCatchBlock(node)||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasCatchBlock(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  parent);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  thenBlock);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  parent,  thenBlock);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  parent,  thenBlock);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  curHandler,  thenBlock);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  curHandler,  thenBlock);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  curHandler,  thenBlock);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstNode);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstNode);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  firstNode);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
10	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
11	[BUG]  [BUGGY]  parent!=  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
12	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
13	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
14	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
15	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
16	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
17	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
18	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  fromNode.getFirstChild();	  Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
19	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
20	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
21	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
22	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getConditionExpression(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getConditionExpression(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getConditionExpression(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
23	[BUG]  [BUGGY]  Node  parent  =  fromNode.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  =  fromNode.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  =  fromNode.getFirstChild();	  Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
24	[BUG]  [BUGGY]  parent  =  NodeUtil.getLastChild(parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getLastChild(parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getLastChild(parent);	  parent    =    NodeUtil.getFirstChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
25	[BUG]  [BUGGY]  parent  =  NodeUtil.getFirstChild(node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getFirstChild(node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getFirstChild(node);	  parent    =    NodeUtil.getFirstChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
26	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node,  parent.getLastChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node,  parent.getLastChild());	  return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
27	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent,  fromNode.getLastChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent,  fromNode.getLastChild());	  return    computeFallThrough(fromNode,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
28	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
29	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  return  computeFallThrough(parent.getNext());  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
30	[BUG]  [BUGGY]  Node  nextSibling  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  child.getNext();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  child.getNext();	  Node    nextSibling    =    fromNode.getNext();    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
31	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode,  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode,  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
32	[BUG]  [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent.replaceChild(node,  Node.newString(Token.NAME));  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent.replaceChild(node,  Node.newString(Token.NAME));	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
33	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
34	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
35	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getNextSibling(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getNextSibling(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getNextSibling(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
36	[BUG]  [BUGGY]  Node  node  =  fromNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  fromNode.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  fromNode.getLastChild();	  Node    node    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
37	[BUG]  [BUGGY]  Node  node  =  toNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  toNode(parent.getLastChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  toNode(parent.getLastChild());	  Node    node    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
38	[BUG]  [BUGGY]  Node  node  =  toNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  toNode.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  toNode.getLastChild();	  Node    node    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
39	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent!=    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
40	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent!=    null    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
41	[BUG]  [BUGGY]  }  else  if(parent  ==  null  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  &&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent!=    null    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
42	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  ||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent!=    null    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
43	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(parent!=    null    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
44	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode,  parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode,  parent.getNext());	  return    computeFollowNode(fromNode,    parent.getNext());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
45	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent.getParent());	  return    computeFollowNode(fromNode,    parent.getNext());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
46	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(node)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
47	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(!NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(node)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
48	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(node)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
49	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    parent    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
50	[BUG]  [BUGGY]  }  else  if(parent.getNext()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getNext()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getNext()  ==  node)  {	  }    else    if(parent.getCatchBlock()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
51	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
52	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
53	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
54	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode.getNext());	  return    computeFallThrough(fromNode.getNext());    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
55	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode.getFirstChild());	  return    computeFallThrough(fromNode.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
56	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
57	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
58	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
59	[BUG]  [BUGGY]  }  else  if(node.getLastChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getLastChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getLastChild()  ==  parent)  {	  }    else    if(parent.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
60	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  parent.getParent();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  parent.getParent();	  Node    nextSibling    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
61	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  fromNode.getParent();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  fromNode.getParent();	  Node    nextSibling    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
62	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent.getFirstChild(),  node);	  return    computeFallThrough(node.getFirstChild(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
63	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  parent);	  return    computeFallThrough(node.getFirstChild(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
64	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild(),  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node.getLastChild(),  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node.getLastChild(),  parent);	  return    computeFallThrough(node.getFirstChild(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
65	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode.getFirstChild(),  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode.getFirstChild(),  parent);	  return    computeFallThrough(node.getFirstChild(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
66	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node.getFirstChild(),  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node.getFirstChild(),  node);	  return    computeFallThrough(node.getFirstChild(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
67	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)!=  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)!=  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)!=  parent)  {	  }    else    if(NodeUtil.getCatchBlock(node)!=    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
68	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)!=  node)  {	  }    else    if(NodeUtil.getCatchBlock(node)!=    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
69	[BUG]  [BUGGY]  }  else  if(NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.getFirstChild()!=  node)  {	  }    else    if(NodeUtil.getCatchBlock(node)!=    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
70	[BUG]  [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
71	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFirstChild())  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFirstChild())  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFirstChild())  {  return  computeFallThrough(node.getNext());  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
72	[BUG]  [BUGGY]  parent  =  NodeUtil.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getLastChild();	  parent    =    NodeUtil.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
73	[BUG]  [BUGGY]  parent  =  NodeUtil.getParentNode();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getParentNode();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getParentNode();	  parent    =    NodeUtil.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
74	[BUG]  [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFallThrough(node.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
75	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(node)  {  return  computeFallThrough(parent.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(node)  {  return  computeFallThrough(parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(node)  {  return  computeFallThrough(parent.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
76	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFirstChild())  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFirstChild())  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFirstChild())  {  return  computeFallThrough(node.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
77	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFallThrough(parent.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFallThrough(parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFallThrough(parent.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
78	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
79	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getLastChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getLastChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
80	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
81	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getLastChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getLastChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
82	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
83	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
84	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
85	[BUG]  [BUGGY]  parent  >=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  >=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  >=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
86	[BUG]  [BUGGY]  }  else  if(parent.getNext()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getNext()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getNext()!=  node)  {	  }    else    if(parent.getCatchBlock()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
87	[BUG]  [BUGGY]  }  else  if(node.getCatchBlock()!=  parent)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getCatchBlock()!=  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getCatchBlock()!=  parent)  {	  }    else    if(parent.getCatchBlock()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
88	[BUG]  [BUGGY]  }  else  if(node  ==  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node  ==  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node  ==  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
89	[BUG]  [BUGGY]  }  else  if(parent  ==  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
90	[BUG]  [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
91	[BUG]  [BUGGY]  }  else  if(parent  ==  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
92	[BUG]  [BUGGY]  }  else  if(parent  ==  NodeUtil.getCatchBlock(node))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  NodeUtil.getCatchBlock(node))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  NodeUtil.getCatchBlock(node))  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
93	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getNextSibling(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getNextSibling(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getNextSibling(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getNextSibling(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
94	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getNextSibling(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getNextSibling(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getNextSibling(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getNextSibling(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
95	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(node)  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getNextSibling(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
96	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(parent)!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getNextSibling(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
97	[BUG]  [BUGGY]  parent  ==  parent  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  parent  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  parent  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent    ==    if(NodeUtil.hasFinally(parent))    {    if(NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
98	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
99	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
100	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }	  parent    ==    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
102	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
103	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
104	[BUG]  [BUGGY]  parent  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
105	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
106	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
107	[BUG]  [BUGGY]  Node  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
108	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasCatchBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasCatchBlock(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasCatchBlock(parent))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.hasCatchBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
109	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasFinally(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasFinally(parent))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.hasCatchBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
110	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(parent))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(parent))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.hasCatchBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
111	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(node))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(node))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(node))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.hasCatchBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
112	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
113	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)!=  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)!=  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)!=  parent)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
114	[BUG]  [BUGGY]  parent  =  NodeUtil.getCatchBlock(node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getCatchBlock(node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getCatchBlock(node);	  parent    =    NodeUtil.getCatchBlock(parent);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
115	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
116	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getNextSibling(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getNextSibling(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getNextSibling(parent)  ==  node)  {	  }    else    if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
117	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(node)  ==  parent)  {	  }    else    if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
118	[BUG]  [BUGGY]  return  computeFollowNode(parent,  node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(parent,  node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(parent,  node.getNext());	  return    computeFollowNode(parent.getNext());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
119	[BUG]  [BUGGY]  Node  node  =  fromNode.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  fromNode.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  fromNode.getParent();	  Node    node    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
120	[BUG]  [BUGGY]  Node  node  =  fromNode.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  fromNode.getNext();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  fromNode.getNext();	  Node    node    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
121	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent!=    node    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
122	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  NodeUtil.hasFinally(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.BLOCK  &&  NodeUtil.hasFinally(parent))  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
123	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  parent.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  parent.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.BLOCK  &&  parent.getFirstChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
124	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.FUNCTION)  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
125	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.BLOCK)  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
126	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFirstChild())  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFirstChild())  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFirstChild())  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
127	[BUG]  [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getParentNode(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
128	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
129	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
130	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
131	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.hasFinally(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.hasFinally(parent))  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
132	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(fromNode)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(fromNode)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(fromNode)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(node)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
133	[BUG]  [BUGGY]  parent  =  NodeUtil.getParentNode(parent,  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getParentNode(parent,  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getParentNode(parent,  node);	  parent    =    NodeUtil.getParentNode(parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
134	[BUG]  [BUGGY]  parent  =  NodeUtil.getParentNode(node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getParentNode(node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getParentNode(node);	  parent    =    NodeUtil.getParentNode(parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
135	[BUG]  [BUGGY]  }  else  if(parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
136	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
137	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
138	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getNextSibling(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getNextSibling(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.getNextSibling(parent)  ==  node)  {	  }    else    if(parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
139	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
140	[BUG]  [BUGGY]  parent  >=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  >=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  >=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
141	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getConditionExpression(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getConditionExpression(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getConditionExpression(parent)!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
142	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
143	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getConditionExpression(parent)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getConditionExpression(parent)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getConditionExpression(parent)  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
144	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
145	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getLastChild());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
146	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
147	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
148	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
149	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getLastChild()  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
150	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
151	[BUG]  [BUGGY]  Node  parent  =  fromNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  =  fromNode.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  =  fromNode.getLastChild();	  Node    parent    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
152	[BUG]  [BUGGY]  Node  parent  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  =  parent.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  =  parent.getLastChild();	  Node    parent    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
153	[BUG]  [BUGGY]  parent!=  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node)  {  return  computeFallThrough(node.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
154	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
155	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
156	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getFirstChild());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
157	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
158	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
159	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  parent.getParent();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  parent.getParent();	  parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
160	[BUG]  [BUGGY]  parent  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  node.getNext();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  node.getNext();	  parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
161	[BUG]  [BUGGY]  parent  =  fromNode.getParent();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  fromNode.getParent();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  fromNode.getParent();	  parent    =    node.getParent();    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
162	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
163	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
164	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)  ==  parent)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
165	[BUG]  [BUGGY]  }  else  if(parent.getType()!=  Token.FUNCTION  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()!=  Token.FUNCTION  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()!=  Token.FUNCTION  &&  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
166	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(node)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
167	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
168	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
169	[BUG]  [BUGGY]  }  else  if(parent.getType()!=  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()!=  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()!=  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
170	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
171	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
172	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  return  computeFallThrough(parent.getNext());  }	  parent    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
173	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }	  parent    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
174	[BUG]  [BUGGY]  parent!=  node)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node)  {  return  computeFallThrough(parent.getNext());  }	  parent    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
175	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getNext());  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
176	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
177	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
178	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(fromNode.getNext());  }	  parent    ==    node    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
179	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
180	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
181	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
182	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
183	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
184	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent!=    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
185	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent!=    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
186	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent!=    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
187	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
188	[BUG]  [BUGGY]  }  else  if(parent  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node)  {	  }    else    if(parent!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
189	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  fromNode.getLastChild();	  Node    nextSibling    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
190	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasFinally(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  NodeUtil.hasFinally(parent))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
191	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  parent.getFirstChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
192	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  parent.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  &&  parent.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  &&  parent.getFirstChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
193	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
194	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
195	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  parent)  {	  }    else    if(parent    ==    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
196	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent    ==    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
197	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  return  computeFallThrough(fromNode,  parent);  }	  parent    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
198	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent,  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent,  node);	  return    computeFallThrough(node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
199	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node,  parent.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node,  parent.getFirstChild());	  return    computeFallThrough(node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
200	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
201	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
202	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
203	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
204	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  [CE]  illegal  start  of  expression  [FE]                                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
205	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  }	  parent    ==    if(NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
206	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode.getNext());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
207	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
208	[BUG]  [BUGGY]  }  else  if(parent.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getLastChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getLastChild()!=  node)  {	  }    else    if(parent.getFirstChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
209	[BUG]  [BUGGY]  }  else  if(node.getFirstChild()!=  parent)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getFirstChild()!=  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getFirstChild()!=  parent)  {	  }    else    if(parent.getFirstChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
210	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
211	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(node)  ==  parent)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
212	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)  ==  parent)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
213	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
214	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
215	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
216	[BUG]  [BUGGY]  }  else  if(node.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getFirstChild()  ==  node)  {	  }    else    if(node.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
217	[BUG]  [BUGGY]  }  else  if(node.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getLastChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getLastChild()  ==  node)  {	  }    else    if(node.getFirstChild()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
218	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(fromNode,  parent);  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
219	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
220	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode,  parent,  node);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
221	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
222	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
223	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  ||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
224	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
225	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getNext());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode,  node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode,  node.getNext());	  return    computeFollowNode(fromNode,    node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
226	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  node.getLastChild());	  return    computeFollowNode(fromNode,    node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
227	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(node.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
228	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(node.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
229	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)!=  node)  {	  }    else    if(node.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
230	[BUG]  [BUGGY]  }  else  if(parent.getType()!=  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()!=  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()!=  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(node.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
231	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent!=    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
232	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getLastChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getLastChild()  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
233	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
234	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
235	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
236	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getLastChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getLastChild()  ==  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
237	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(node)||  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(node)||  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(node)||  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
238	[BUG]  [BUGGY]  return  computeFallThrough(node,  fromNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node,  fromNode);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node,  fromNode);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
239	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent,  fromNode.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent,  fromNode.getFirstChild());	  return    computeFallThrough(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
240	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
241	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node);	  return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
242	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getFirstChild()  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getFirstChild()  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
243	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getLastChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getLastChild()  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
244	[BUG]  [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getParentNode(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
245	[BUG]  [BUGGY]  parent!=  NodeUtil.getParentNode(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.getParentNode(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.getParentNode(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
246	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	  parent!=    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
247	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	  parent!=    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
248	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode,  node.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode,  node.getFirstChild());	  return    computeFollowNode(fromNode,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
249	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.isFunctionDeclaration(parent))    {    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
250	[BUG]  [BUGGY]  }  else  if(parent.getCatchBlock(node)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getCatchBlock(node)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getCatchBlock(node)!=  node)  {	  }    else    if(parent.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
251	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild());	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
252	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  node,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
253	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
254	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getNextSibling(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getNextSibling(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getNextSibling(parent)!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
255	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
256	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
257	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
258	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
259	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.CATCH  &&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
260	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(!NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
261	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getCatchBlock(node)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getCatchBlock(node)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.getCatchBlock(node)!=  node)  {	  }    else    if(NodeUtil.getCatchBlock(node)!=    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
262	[BUG]  [BUGGY]  return  computeFollowNode(parent.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(parent.getFirstChild(),  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(parent.getFirstChild(),  node);	  return    computeFallThrough(node.getFirstChild(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
263	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FOR  &&  NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FOR  &&  NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FOR  &&  NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(node)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
264	[BUG]  [BUGGY]  Node  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getNext());	  parent!=    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
265	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);	  parent!=    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
266	[BUG]  [BUGGY]  parent!=  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
267	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
268	[BUG]  [BUGGY]  parent  ==  NodeUtil.isFunctionDeclaration(parent))  {  if(NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.isFunctionDeclaration(parent))  {  if(NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.isFunctionDeclaration(parent))  {  if(NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.isFunctionDeclaration(parent))    {    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
269	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
270	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  ||  parent.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  ||  parent.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.BLOCK  ||  parent.getFirstChild()  ==  node)  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
271	[BUG]  [BUGGY]  }  else  if(node!=  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node!=  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node!=  parent)  {	  }    else    if(parent!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
272	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasCatchBlock(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasCatchBlock(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  ||  NodeUtil.hasCatchBlock(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasCatchBlock(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
273	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
274	[BUG]  [BUGGY]  parent!=  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
275	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
276	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  ==  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  ==  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  ==  return  computeFallThrough(parent.getNext());  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
277	[BUG]  [BUGGY]  parent  =  NodeUtil.getNextNode(parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getNextNode(parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getNextNode(parent);	  parent    =    NodeUtil.getParentNode(parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
278	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
279	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFinally(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFinally(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFinally(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
280	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
281	[BUG]  [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
282	[BUG]  [BUGGY]  parent!=  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
283	[BUG]  [BUGGY]  parent!=  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
284	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getConditionExpression(node)  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
285	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.cloneTree());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.cloneTree());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent,  node.cloneTree());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
286	[BUG]  [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(!NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(!NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(node)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
287	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
288	[BUG]  [BUGGY]  return  computeFollowNode(parent,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(parent,  node.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(parent,  node.getFirstChild());	  return    computeFollowNode(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
289	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
290	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
291	[BUG]  [BUGGY]  }  else  if(node!=  null  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node!=  null  &&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node!=  null  &&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(parent!=    null    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
292	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getConditionExpression(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.getConditionExpression(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.getConditionExpression(parent)!=  node)  {	  }    else    if(parent!=    null    &&    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
293	[BUG]  [BUGGY]  parent  >=  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  >=  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  >=  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
294	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(fromNode,  node.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
295	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(node.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)  {  return  computeFollowNode(node.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
296	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent,  node.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent,  node.getFirstChild());	  return    computeFollowNode(fromNode,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
297	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
298	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
299	[BUG]  [BUGGY]  }  else  if(node  ==  parent  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node  ==  parent  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node  ==  parent  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
300	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
301	[BUG]  [BUGGY]  Node  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent!=  node  &&  NodeUtil.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getNext());  }	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
302	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  null)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.getCatchBlock(node)  ==  null)  {	  }    else    if(node.getType()    ==    Token.FUNCTION    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
303	[BUG]  [BUGGY]  Node  node  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  n.getLastChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  n.getLastChild();	  Node    node    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
304	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node.getNext());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent,  node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent,  node.getNext());	  return    computeFollowNode(fromNode,    node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
305	[BUG]  [BUGGY]  Node  parent  =  toNode.getNext();  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  =  toNode.getNext();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  =  toNode.getNext();	  Node    parent    =    toNode.getParent();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
306	[BUG]  [BUGGY]  parent  ==  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
307	[BUG]  [BUGGY]  }  else  if(parent.getCatchBlock(fromNode)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getCatchBlock(fromNode)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getCatchBlock(fromNode)  ==  node)  {	  }    else    if(parent.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
308	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
309	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  node.getNext());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
310	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getFinally(parent)  {  return  computeFallThrough(node.getNext());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
311	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(node.getNext());	  parent    ==    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
312	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  parent)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
313	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)  ==  parent)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
314	[BUG]  [BUGGY]  parent  ==  NodeUtil.getConditionExpression(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getConditionExpression(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getConditionExpression(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
315	[BUG]  [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(node.getType()  ==  Token.FUNCTION  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
316	[BUG]  [BUGGY]  Node  node  =  toNode.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  toNode.getNext();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  toNode.getNext();	  Node    node    =    toNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
317	[BUG]  [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
318	[BUG]  [BUGGY]  }  else  if(parent.getParent()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getParent()!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getParent()!=  node)  {	  }    else    if(parent.getCatchBlock()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
319	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(parent)&&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(parent)&&  NodeUtil.hasFinally(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasCatchBlock(parent)&&  NodeUtil.hasFinally(parent))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.hasCatchBlock(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
320	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
321	[BUG]  [BUGGY]  Node  node  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  child.getFirstChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  child.getFirstChild();	  Node    node    =    fromNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
322	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getConditionExpression(parent)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
323	[BUG]  [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
324	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
325	[BUG]  [BUGGY]  parent  =  NodeUtil.getFirstChild(parent,  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getFirstChild(parent,  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getFirstChild(parent,  node);	  parent    =    NodeUtil.getFirstChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
326	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)&&  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
327	[BUG]  [BUGGY]  parent  ==  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  return  computeFollowNode(fromNode,  parent);	  parent    ==    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
328	[BUG]  [BUGGY]  }  else  if(parent  ==  NodeUtil.getConditionExpression(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  NodeUtil.getConditionExpression(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  NodeUtil.getConditionExpression(node)  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
329	[BUG]  [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
330	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getFirstChild()  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
331	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
332	[BUG]  [BUGGY]  parent  ==  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
333	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(parent,  fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(parent,  fromNode,  parent);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
334	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  parent    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
335	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getFirstChild()  ==  node)  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
336	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
337	[BUG]  [BUGGY]  }  else  if(parent.getParent()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getParent()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getParent()  ==  node)  {	  }    else    if(parent.getCatchBlock()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
338	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(parent)&&  NodeUtil.getNextSibling(node)  ==  node)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)&&    NodeUtil.getNextSibling(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstNode,  thenBlock);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstNode,  thenBlock);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  firstNode,  thenBlock);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  toNode);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  toNode);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  toNode);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
341	[BUG]  [BUGGY]  Node  node  =  parents.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  node  =  parents.getFirstChild();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  node  =  parents.getFirstChild();	  Node    node    =    fromNode.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
342	[BUG]  [BUGGY]  parent  <  0  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  <  0  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  <  0  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
343	[BUG]  [BUGGY]  Node  parent  <  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  <  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  <  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  }	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
344	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
345	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
346	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
347	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  nodeCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
348	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFallThrough(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFallThrough(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  NodeUtil.getFallThrough(parent)  ==  node)  {	  }    else    if(parent.getType()    ==    Token.CATCH    &&    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
349	[BUG]  [BUGGY]  Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  ==  node  ||  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
350	[BUG]  [BUGGY]  parent!=  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node)  {  if(NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
351	[BUG]  [BUGGY]  Node  parent  =  node.getParentNode();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  =  node.getParentNode();  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  =  node.getParentNode();	  Node    parent    =    fromNode.getNext();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
352	[BUG]  [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
353	[BUG]  [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent  ==  node  ||  NodeUtil.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent  ==  node  ||  NodeUtil.getCatchBlock(node)  ==  node)  {	  }    else    if(parent    ==    NodeUtil.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
354	[BUG]  [BUGGY]  parent!=  NodeUtil.getCatchBlock(parent)  {  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.getCatchBlock(parent)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.getCatchBlock(parent)  {  return  computeFallThrough(node.getNext());  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
355	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node.getNext(),  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node.getNext(),  parent);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
356	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext(),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext(),  node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent.getNext(),  node);	  return    computeFollowNode(fromNode,    parent.getNext());    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
357	[BUG]  [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(node)!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  createEdge(fromNode,  Branch.UNCOND,  thenBlock));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  createEdge(fromNode,  Branch.UNCOND,  thenBlock));  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  createEdge(fromNode,  Branch.UNCOND,  thenBlock));	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  toBlock);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  toBlock);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  toBlock);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  builder);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  NodeTraversal.traverse(compiler,  node,  builder);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	NodeTraversal.traverse(compiler,  node,  builder);	  NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
361	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  node  &&  NodeUtil.getFirstChild()  ==  parent)  {  return  computeFallThrough(node.getNext());	  parent!=    node    ||    NodeUtil.getFirstChild()    ==    parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
362	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyNode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyNode);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyNode);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
363	[BUG]  [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
364	[BUG]  [BUGGY]  parent  =  NodeUtil.getConditionExpression(parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getConditionExpression(parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getConditionExpression(parent);	  parent    =    NodeUtil.getCatchBlock(parent);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
365	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(node.getNext());	  parent    ==    NodeUtil.getCatchBlock(parent)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
366	[BUG]  [BUGGY]  parent  =  NodeUtil.getParent(parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  =  NodeUtil.getParent(parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  =  NodeUtil.getParent(parent);	  parent    =    NodeUtil.getParentNode(parent);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
367	[BUG]  [BUGGY]  return  computeFallThrough(node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFallThrough(node);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFallThrough(node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
368	[BUG]  [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(node)!=  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(node)!=  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  NodeUtil.getCatchBlock(node)!=  parent)  {	  }    else    if(NodeUtil.getCatchBlock(node)!=    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
369	[BUG]  [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(node)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  NodeUtil.getCatchBlock(node)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  NodeUtil.getCatchBlock(node)!=  node)  {	  }    else    if(NodeUtil.getCatchBlock(node)!=    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
370	[BUG]  [BUGGY]  parent!=  NodeUtil.isFunctionDeclaration(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent!=  NodeUtil.isFunctionDeclaration(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent!=  NodeUtil.isFunctionDeclaration(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent!=    NodeUtil.hasFinally(parent)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
371	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  node!=  parent.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  node!=  parent.getFirstChild())  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.BLOCK  &&  node!=  parent.getFirstChild())  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
372	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  parent.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.BLOCK  &&  parent.hasChildren())  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.BLOCK  &&  parent.hasChildren())  {	  }    else    if(parent.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
373	[BUG]  [BUGGY]  }  else  if(parent!=  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent!=  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent!=  node  ||  NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  }    else    if(parent!=    null    ||    NodeUtil.hasFinally(parent)||    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
374	[BUG]  [BUGGY]  Node  parent  <  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parent  <  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parent  <  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
375	[BUG]  [BUGGY]  parent  <  0  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  <  0  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  <  0  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    <    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
376	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  parent.getCatchBlock()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  parent.getCatchBlock()  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  parent.getCatchBlock()  ==  node)  {	  }    else    if(parent.getCatchBlock()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
377	[BUG]  [BUGGY]  parent  ==  parent  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  parent  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  parent  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(fromNode,  parent);  }	  parent    ==    if(NodeUtil.isFunctionDeclaration(parent))    {    if(NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
378	[BUG]  [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  nextSibling  =  child.getFirstChild();	  Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
379	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parent!=  node  &&  NodeCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parent!=  node  &&  NodeCopiiiCopiii  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parent!=  node  &&  NodeCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
380	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parent!=  node  &&  NodeCopiiiCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parent!=  node  &&  NodeCopiiiCopiiiCopiii  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parent!=  node  &&  NodeCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
381	[BUG]  [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getCatchBlock(node)  ==  parent)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isFunctionDeclaration(node)||  NodeUtil.getCatchBlock(node)  ==  parent)  {	  }    else    if(NodeUtil.isFunctionDeclaration(parent)||    NodeUtil.getCatchBlock(node)    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
382	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node  ||  NodeUtil.getConditionExpression(parent)  ==  node)  {  return  computeFallThrough(node.getNext());	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(node.getNext());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
383	[BUG]  [BUGGY]  }  else  if(NodeUtil.isCatchBlock(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(NodeUtil.isCatchBlock(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(NodeUtil.isCatchBlock(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {	  }    else    if(NodeUtil.hasCatchBlock(parent)||    NodeUtil.getCatchBlock(parent)!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
384	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasConditionExpression(parent))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasConditionExpression(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.FUNCTION  ||  NodeUtil.hasConditionExpression(parent))  {	  }    else    if(parent.getType()    ==    Token.FUNCTION    ||    NodeUtil.getConditionExpression(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
385	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  createEdge(fromNode,  Branch.UNCOND));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  createEdge(fromNode,  Branch.UNCOND));  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(fromNode,  parent,  node,  createEdge(fromNode,  Branch.UNCOND));	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
386	[BUG]  [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  ==  return  computeFallThrough(node.getNext());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  ==  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	parent  ==  node)  {  if(NodeUtil.hasFinally(parent)  ==  return  computeFallThrough(node.getNext());  }	  parent    ==    node)    {    if(NodeUtil.getCatchBlock(parent)    ==    return    computeFallThrough(node.getNext());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
387	[BUG]  [BUGGY]  return  computeFollowNode(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  return  computeFollowNode(node.getFirstChild());  [BUGGY]      }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	return  computeFollowNode(node.getFirstChild());	  return    computeFollowNode(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
388	[BUG]  [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  parent.getCatchBlock(node)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }        [BUGGY]  }  else  if(parent.getType()  ==  Token.CATCH  &&  parent.getCatchBlock(node)  ==  node)  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (parent.getLastChild()  ==  node){  for  (Node  finallyNode  :  finallyMap.get(parent))  {  createEdge(fromNode,  Branch.UNCOND,  finallyNode);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.2886751345948129	733	733	3	replace	}  else  if(parent.getType()  ==  Token.CATCH  &&  parent.getCatchBlock(node)  ==  node)  {	  }    else    if(parent.getCatchBlock(node)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
