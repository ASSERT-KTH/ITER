bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
2	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
3	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
4	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
5	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
6	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	  	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]    Node  parent  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Node  parent  =  parent.getParent();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Node  parent  =  parent.getParent();		non-compiled	[CE]  illegal  start  of  expression	16	None	add
8	[BUG]  [BUGGY]    Node  parent  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Node  parent  =  parent.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Node  parent  =  parent.getFirstChild();		non-compiled	[CE]  illegal  start  of  expression	16	None	add
9	[BUG]  [BUGGY]    Node  parent  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Node  parent  =  node.getFirstChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Node  parent  =  node.getFirstChild();		non-compiled	[CE]  illegal  start  of  expression	16	None	add
10	[BUG]  [BUGGY]    Node  parent  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Node  parent  =  parent.getLastChild();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Node  parent  =  parent.getLastChild();		non-compiled	[CE]  illegal  start  of  expression	16	None	add
11	[BUG]  [BUGGY]    Node  parent  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Node  parent  =  node.getParent();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Node  parent  =  node.getParent();		non-compiled	[CE]  illegal  start  of  expression	16	None	add
12	[BUG]  [BUGGY]    Node  parent  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Node  parent  =  parent.getNext();  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Node  parent  =  parent.getNext();		non-compiled	[CE]  illegal  start  of  expression	16	None	add
13	[BUG]  [BUGGY]    return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    return  computeFollowNode(fromNode,  parent);  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    return  computeFollowNode(fromNode,  parent);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
14	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
17	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
18	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getFirstChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
19	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent))  {	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]  if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]    Preconditions.checkState(parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Preconditions.checkState(parent.getFirstChild()  ==  node);  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Preconditions.checkState(parent.getFirstChild()  ==  node);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
23	[BUG]  [BUGGY]    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
24	[BUG]  [BUGGY]    Preconditions.checkState(parent.getType()  ==  Token.TRY);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {  [BUGGY]    Preconditions.checkState(parent.getType()  ==  Token.TRY);  [BUGGY]  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	    Preconditions.checkState(parent.getType()  ==  Token.TRY);		non-compiled	[CE]  illegal  start  of  expression	16	None	add
