bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()!=  node,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()!=  node,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()!=  node,  parent.getLastChild());	  Preconditions.checkState(parent.getFirstChild()    ==    node,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  parent,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  parent,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()  ==  parent,  parent.getFirstChild());	  Preconditions.checkState(parent.getFirstChild()    ==    node,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(parent.getLastChild()  ==  node,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getLastChild()  ==  node,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getLastChild()  ==  node,  parent.getFirstChild());	  Preconditions.checkState(parent.getFirstChild()    ==    node,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
4	[BUG]  [BUGGY]  parent  ==  node  &&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
5	[BUG]  [BUGGY]  parent  ==  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
6	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(node,  parent);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(node,  parent);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
7	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(parent,  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(parent,  node);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
8	[BUG]  [BUGGY]  return  computeFallThrough(parent,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(parent,  parent);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(parent,  parent);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
9	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
10	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
11	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(node,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(node,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
12	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)&&  parent.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)&&  parent.getFirstChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)&&  parent.getFirstChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)||    parent.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
13	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)||  parent.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)||  parent.getFirstChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)||  parent.getFirstChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)||    parent.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
14	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
15	[BUG]  [BUGGY]  parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
16	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent!=    node    &&    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
17	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    node    &&    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getLastChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getLastChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getLastChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getFirstChild()!=  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getFirstChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getFirstChild()!=  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
21	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.isFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  NodeUtil.isFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  NodeUtil.isFinally(parent))  {	  parent    ==    node    &&    NodeUtil.isFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
22	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.isFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.isFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.isFinally(parent))  {	  parent    ==    node    &&    NodeUtil.isFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
23	[BUG]  [BUGGY]  parent!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  node  &&  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  node  &&  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()  ==  node  &&  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getFirstChild()    ==    node    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  node  ||  parent.getLastChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  node  ||  parent.getLastChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()  ==  node  ||  parent.getLastChild()  ==  node);	  Preconditions.checkState(parent.getFirstChild()    ==    node    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(parent.getLastChild()  ==  node  ||  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getLastChild()  ==  node  ||  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getLastChild()  ==  node  ||  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getFirstChild()    ==    node    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()!=  node  ||  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()!=  node  ||  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()!=  node  ||  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getFirstChild()    ==    node    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  ||  NodeUtil.hasFinally(parent));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  ||  NodeUtil.hasFinally(parent));  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  ||  NodeUtil.hasFinally(parent));	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(node.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  NodeUtil.hasFinally(parent));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  NodeUtil.hasFinally(parent));  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  &&  NodeUtil.hasFinally(parent));	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
32	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)&&  parent.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)&&  parent.getLastChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)&&  parent.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    parent.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
33	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getFirstChild());	  parent!=    null    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(node.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getLastChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getLastChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getLastChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getFirstChild()!=  node);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getFirstChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getFirstChild()!=  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  ||  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  ||  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  ||  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
37	[BUG]  [BUGGY]  parent  ==  node  ||  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    ||    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
38	[BUG]  [BUGGY]  parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());	  parent!=    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(parent.getLastChild()!=  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getLastChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getLastChild()!=  node);	  Preconditions.checkState(parent.getFirstChild()!=    node);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(node.getFirstChild()!=  parent);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(node.getFirstChild()!=  parent);	  Preconditions.checkState(parent.getFirstChild()!=    node);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  parent);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()  ==  parent);	  Preconditions.checkState(parent.getFirstChild()!=    node);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
42	[BUG]  [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
43	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  nextSibling  =  node.getFirstChild();	  Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
44	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  nextSibling  =  parent.getNext();	  Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
45	[BUG]  [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  nextSibling  =  child.getFirstChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  nextSibling  =  child.getFirstChild();	  Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
46	[BUG]  [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
47	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    parent    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    parent    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(node.getLastChild()  ==  parent);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(node.getLastChild()  ==  parent);	  Preconditions.checkState(parent.getLastChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
50	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
51	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)||  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)||  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)||  NodeUtil.hasFinally(parent))  {	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
52	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFunctionDeclaration(parent)||  NodeUtil.hasFinally(parent))  {	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
53	[BUG]  [BUGGY]  if(NodeUtil.isFunctionAnalysis(parent)||  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFunctionAnalysis(parent)||  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFunctionAnalysis(parent)||  NodeUtil.hasFinally(parent))  {	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getLastChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getLastChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getLastChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getChildCount()  ==  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getChildCount()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getChildCount()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
56	[BUG]  [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
57	[BUG]  [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
58	[BUG]  [BUGGY]  parent  ==  node  ||  parent.hasFinally(node))  {  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.hasFinally(node))  {  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.hasFinally(node))  {  return  computeFallThrough(parent.getLastChild());	  parent    ==    node    ||    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  parent,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  parent,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()  ==  parent,  parent.getLastChild());	  Preconditions.checkState(parent.getFirstChild()    ==    node,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  parent,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(node.getFirstChild()  ==  parent,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(node.getFirstChild()  ==  parent,  parent.getLastChild());	  Preconditions.checkState(parent.getFirstChild()    ==    node,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
61	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());	  parent!=    null    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
62	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());	  parent!=    null    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
63	[BUG]  [BUGGY]  parent  ==  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    NodeUtil.removeChild(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
64	[BUG]  [BUGGY]  parent!=  NodeUtil.removeChild(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  NodeUtil.removeChild(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  NodeUtil.removeChild(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    NodeUtil.removeChild(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
65	[BUG]  [BUGGY]  parent!=  node  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.getFirstChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getLastChild()!=  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getLastChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getLastChild()!=  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getFirstChild()!=    node);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getFirstChild()!=  node);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getFirstChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getFirstChild()!=  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getFirstChild()!=    node);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
68	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  nextSibling  =  node.getLastChild();	  Node    nextSibling    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
69	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  nextSibling  =  parent.getfirstChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  nextSibling  =  parent.getfirstChild();	  Node    nextSibling    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
70	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(node.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(node.getFirstChild());	  return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
71	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(parent.getLastChild());	  return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
72	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(parent.getFirstChild(),  node);	  return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
73	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    parent    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
74	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    parent    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getLastChild()!=  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getLastChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getLastChild()!=  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getFirstChild()!=    node);    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
76	[BUG]  [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(node.getLastChild());  }	  parent    ==    null    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
77	[BUG]  [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  parent)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  parent)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.getFirstChild()  ==  parent)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.getFirstChild()    ==    parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
78	[BUG]  [BUGGY]  parent  ==  node  ||  parent.getFirstChild()  ==  parent)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.getFirstChild()  ==  parent)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.getFirstChild()  ==  parent)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.getFirstChild()    ==    parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
79	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
80	[BUG]  [BUGGY]  parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
81	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent)&&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
82	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent)&&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
83	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  parent.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)&&  parent.getFirstChild()!=  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  parent.getFirstChild()!=  node)  {	  if(NodeUtil.hasFinally(parent)&&    parent.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
84	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  parent.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)||  parent.getLastChild()!=  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)||  parent.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(parent)&&    parent.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
85	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)&&  parent.getLastChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)&&  parent.getLastChild()!=  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)&&  parent.getLastChild()!=  node)  {	  if(NodeUtil.hasFinally(parent)&&    parent.getLastChild()!=    node)    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getType()!=  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  ||  parent.getType()!=  Token.BLOCK);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  ||  parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    ||    parent.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
90	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
91	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
92	[BUG]  [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
93	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)||  NodeUtil.getCatchBlock(parent)  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
94	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.getFirstChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
95	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getLastChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
96	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)&&  NodeUtil.getCatchBlock(parent)  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
97	[BUG]  [BUGGY]  parent!=  null  &&  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.getLastChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
98	[BUG]  [BUGGY]  parent  ==  null  ||  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.getLastChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY,  parent.getLastChild());	  Preconditions.checkState(parent.getType()    ==    Token.TRY,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY,  node.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY,  node.getFirstChild());	  Preconditions.checkState(parent.getType()    ==    Token.TRY,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY,  parent.getFirstChild());	  Preconditions.checkState(parent.getType()    ==    Token.TRY,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK,  parent.getLastChild());	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK,  node.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK,  node.getFirstChild());	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.BLOCK,  parent.getFirstChild());	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getFirstChild()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getFirstChild()  ==  parent);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getFirstChild()  ==  parent);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
106	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
107	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
108	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent))  {	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
109	[BUG]  [BUGGY]  Node  parent  =  toNode.getParent();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  parent  =  toNode.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  parent  =  toNode.getParent();	  Node    parent    =    fromNode.getNext();    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
110	[BUG]  [BUGGY]  parent!=  node  &&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.getLastChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.getLastChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
111	[BUG]  [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
112	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
113	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFallThrough(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFallThrough(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFallThrough(parent.getLastChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)&&    block.    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
114	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.removeChild(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.removeChild(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.removeChild(parent.getFirstChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)&&    block.    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
115	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.hasNext())    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
116	[BUG]  [BUGGY]  parent!=  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.hasNext())    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
117	[BUG]  [BUGGY]  parent!=  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.hasNext())  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.hasNext())    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
118	[BUG]  [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());	  parent    ==    null    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(node.getType()!=  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(node.getType()!=  Token.BLOCK);	  Preconditions.checkState(parent.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(node.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(node.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parent.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  >=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  >=  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  >=  Token.BLOCK);	  Preconditions.checkState(parent.getType()!=    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
122	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(fromNode,  parent.getLastChild());	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
123	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(fromNode,  parent,  node);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
124	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
125	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
126	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
127	[BUG]  [BUGGY]  parent!=  node  &&  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.getLastChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    node    &&    parent.getLastChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getType()  ==  Token.TRY);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getType()  ==  Token.TRY);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getType()  ==  Token.TRY);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.TRY);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.TRY);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.TRY);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.TRY);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.TRY);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.TRY);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.TRY);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.TRY);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.TRY);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY,  parent.getFirstChild());	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.TRY);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
132	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node);	  return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
133	[BUG]  [BUGGY]  parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
134	[BUG]  [BUGGY]  parent  ==  null  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
135	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)||  parent.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)||  parent.getLastChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)||  parent.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)||    parent.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getType()  ==  Token.THIS);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  &&  parent.getType()  ==  Token.THIS);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.THIS);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()!=  Token.THIS);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.THIS);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.BLOCK  ||  parent.getType()  ==  Token.THIS);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.BLOCK);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.BLOCK);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
140	[BUG]  [BUGGY]  parent!=  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    node    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getLastChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getLastChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getLastChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getChildCount()  ==  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getChildCount()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getChildCount()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
143	[BUG]  [BUGGY]  parent!=  null  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  ||  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    null    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
144	[BUG]  [BUGGY]  parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    null    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
145	[BUG]  [BUGGY]  parent!=  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  ||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    null    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
146	[BUG]  [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
147	[BUG]  [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
148	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
149	[BUG]  [BUGGY]  parent!=  parent  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  parent  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  parent  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    node    &&    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
150	[BUG]  [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent!=    node    &&    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.THIS);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.THIS);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.THIS);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.THIS);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.THIS);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.THIS);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.TRY);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.TRY);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.TRY);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getType()  ==  Token.GETPROP);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
155	[BUG]  [BUGGY]  Node  lastJump  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  lastJump  =  parent.getFirstChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  lastJump  =  parent.getFirstChild();	  Node    lastJump    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
156	[BUG]  [BUGGY]  Node  lastJump  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  lastJump  =  node.getLastChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  lastJump  =  node.getLastChild();	  Node    lastJump    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
157	[BUG]  [BUGGY]  Node  lastJump  =  child.getLastChild();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  lastJump  =  child.getLastChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  lastJump  =  child.getLastChild();	  Node    lastJump    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
158	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.getFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.getFinally(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
159	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)||  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
160	[BUG]  [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent!=    node    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
161	[BUG]  [BUGGY]  Node  lastJump  =  nextSibling.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  lastJump  =  nextSibling.getLastChild();  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  lastJump  =  nextSibling.getLastChild();	  Node    lastJump    =    parent.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
162	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
163	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS,  parent.getFirstChild());	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getFirstChild()!=  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getFirstChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  ||  parent.getFirstChild()!=  node);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
167	[BUG]  [BUGGY]  parent!=  null)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
168	[BUG]  [BUGGY]  parent!=  null)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    null)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
169	[BUG]  [BUGGY]  parent  ==  node  &&  parent.getFirstChild()!=  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.getFirstChild()!=  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.getFirstChild()!=  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    &&    parent.getFirstChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
170	[BUG]  [BUGGY]  parent!=  null)  {  return  computeFollowNode(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null)  {  return  computeFollowNode(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null)  {  return  computeFollowNode(parent.getFirstChild());  }	  parent    ==    null)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
171	[BUG]  [BUGGY]  parent  ==  null)  {  return  computeFollowNode(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null)  {  return  computeFollowNode(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null)  {  return  computeFollowNode(parent.getFirstChild());  }	  parent    ==    null)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
172	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent)&&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.hasFinally(parent)&&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY  &&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY  &&  NodeUtil.hasFinally(parent))  {  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY  &&  NodeUtil.hasFinally(parent))  {	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.TRY);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
174	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
175	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  FINALLY);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  FINALLY);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent,  FINALLY);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
176	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());	  parent    ==    node    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
177	[BUG]  [BUGGY]  if(NodeUtil.isFinally(parent)&&  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFinally(parent)&&  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFinally(parent)&&  NodeUtil.hasFinally(parent))  {	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
178	[BUG]  [BUGGY]  if(NodeUtil.isFunctionDeclaration(parent)&&  parent.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.isFunctionDeclaration(parent)&&  parent.getLastChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.isFunctionDeclaration(parent)&&  parent.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    parent.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
179	[BUG]  [BUGGY]  parent  ==  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    ||    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
180	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(node,  parent.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(node,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  node  ||  parent.getFirstChild()!=  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()  ==  node  ||  parent.getFirstChild()!=  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()  ==  node  ||  parent.getFirstChild()!=  node);	  Preconditions.checkState(parent.getFirstChild()    ==    node    ||    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
182	[BUG]  [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
183	[BUG]  [BUGGY]  parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
184	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
185	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent.getLastChild());	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
186	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
187	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
188	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFollowNode(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFollowNode(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFollowNode(parent.getFirstChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)&&    block.    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
189	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)&&  block.  return  computeFollowNode(parent.getLastChild());	  parent    ==    node    &&    NodeUtil.hasFinally(parent)&&    block.    return    computeFallThrough(parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
190	[BUG]  [BUGGY]  parent  ==  node)  {  return  computeFollowNode(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node)  {  return  computeFollowNode(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node)  {  return  computeFollowNode(parent.getFirstChild());  }	  parent    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
191	[BUG]  [BUGGY]  parent!=  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent!=    NodeUtil.removeChild(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
192	[BUG]  [BUGGY]  parent!=  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  NodeUtil.removeChild(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }	  parent!=    NodeUtil.removeChild(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
193	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
194	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
195	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.getFirstChild()  ==  node)  {  return  computeFollowNode(parent.getLastChild());  }	  parent!=    null    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
196	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasNext())  {  return  computeFollowNode(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.hasNext())  {  return  computeFollowNode(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.hasNext())  {  return  computeFollowNode(parent.getFirstChild());  }	  parent    ==    node    &&    parent.hasNext())    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.TRY  &&  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
198	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    //    and    have    FINALLY    block.    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
199	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent)  {  return  computeFollowNode(parent.getFirstChild());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent)    {    //    and    have    FINALLY    block.    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
200	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(fromNode,  parent);	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    //    and    have    FINALLY    block.    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
201	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)||  parent.getFirstChild()!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)||  parent.getFirstChild()!=  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)||  parent.getFirstChild()!=  node)  {	  if(NodeUtil.hasFinally(parent)||    parent.getFirstChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
202	[BUG]  [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  }	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
203	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.hasFinally(parent))  {  return  computeFollowNode(parent.getFirstChild());  }	  parent    ==    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
204	[BUG]  [BUGGY]  parent  ==  null  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.getLastChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
205	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.getFirstChild()!=  node)  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    parent.getLastChild()!=    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
206	[BUG]  [BUGGY]  parent  ==  node  &&  NodeUtil.mayHaveSideEffects(parent))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  &&  NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  &&  NodeUtil.mayHaveSideEffects(parent))  {	  parent    ==    node    &&    NodeUtil.isFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
207	[BUG]  [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
208	[BUG]  [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.getCatchBlock(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.getCatchBlock(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
209	[BUG]  [BUGGY]  parent  ==  NodeUtil.getFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  NodeUtil.getFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  NodeUtil.getFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    NodeUtil.hasFinally(parent)&&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
210	[BUG]  [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());	  parent    ==    node    ||    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
211	[BUG]  [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  &&  NodeUtil.hasFinally(parent)&&  NodeUtil.hasFinally(parent))  {  return  computeFallThrough(parent.getLastChild());  }	  parent    ==    null    &&    NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  NodeUtil.hasCatchBlock(parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  NodeUtil.hasCatchBlock(parent));  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.TRY  &&  NodeUtil.hasCatchBlock(parent));	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
213	[BUG]  [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFollowNode(parent.getLastChild());	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFollowNode(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
214	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFallThrough(node.getLastChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFallThrough(node.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
215	[BUG]  [BUGGY]  parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  NodeUtil.getCatchBlock(parent)  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    ||    NodeUtil.getCatchBlock(parent)    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
216	[BUG]  [BUGGY]  if(NodeUtil.getCatchBlock(parent)&&  parent.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.getCatchBlock(parent)&&  parent.getLastChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.getCatchBlock(parent)&&  parent.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)&&    parent.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
217	[BUG]  [BUGGY]  if(NodeUtil.getCatchBlock(parent)||  NodeUtil.hasFinally(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.getCatchBlock(parent)||  NodeUtil.hasFinally(parent))  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.getCatchBlock(parent)||  NodeUtil.hasFinally(parent))  {	  if(NodeUtil.hasFinally(parent)||    NodeUtil.hasFinally(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  &&  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()!=  Token.BLOCK  &&  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()!=  Token.BLOCK  &&  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getfirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getfirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getfirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
220	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
221	[BUG]  [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii  return  parentCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiiiCopiii	  parent!=    node    &&    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
222	[BUG]  [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.hasFinally(parent)&&  NodeUtil.getCatchBlock(parent)!=  node)  {	  if(NodeUtil.hasFinally(parent)&&    NodeUtil.getCatchBlock(parent)    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
223	[BUG]  [BUGGY]  parent!=  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
224	[BUG]  [BUGGY]  parent  ==  node  ||  parent.hasNext())  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.hasNext())  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.hasNext())  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.hasNext())    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
225	[BUG]  [BUGGY]  parent  ==  null  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  null  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  null  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    null    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
226	[BUG]  [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  node  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkArgument(parent.getType()  ==  Token.TRY  ||  NodeUtil.hasFinally(parent));	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY  &&  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY  &&  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK  ||  parent.getType()  ==  Token.TRY  &&  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.BLOCK    ||    parent.getType()    ==    Token.TRY);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
229	[BUG]  [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  node  ||  parent.hasFinally(parent))  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    node    &&    parent.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
230	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  thenBlock);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  thenBlock);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent,  node,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
231	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent());	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.TRY  ||  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkArgument(parent.getType()  ==  Token.TRY  ||  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkArgument(parent.getType()  ==  Token.TRY  ||  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.TRY    &&    parent.getFirstChild()    ==    node);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
233	[BUG]  [BUGGY]  if(NodeUtil.getCatchBlock(parent)||  parent.getLastChild()  ==  node)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  if(NodeUtil.getCatchBlock(parent)||  parent.getLastChild()  ==  node)  {  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	if(NodeUtil.getCatchBlock(parent)||  parent.getLastChild()  ==  node)  {	  if(NodeUtil.hasFinally(parent)||    parent.getLastChild()    ==    node)    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  &&  parent.getFirstChild()  ==  node);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.THIS  &&  parent.getFirstChild()  ==  node);  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getType()  ==  Token.THIS  &&  parent.getFirstChild()  ==  node);	  Preconditions.checkState(parent.getType()    ==    Token.THIS);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
235	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Node  parent  =  n.getParent();	  Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
236	[BUG]  [BUGGY]  parent!=  null  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getLastChild());  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent!=  null  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent!=  null  &&  parent.getFirstChild()  ==  node)  {  return  computeFallThrough(node.getLastChild());  }	  parent!=    null    &&    parent.getFirstChild()    ==    node)    {    return    computeFallThrough(parent.getLastChild());    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
237	[BUG]  [BUGGY]  parent  ==  parent.getFirstChild())  {  return  computeFallThrough(parent.getFirstChild());  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  parent  ==  parent.getFirstChild())  {  return  computeFallThrough(parent.getFirstChild());  }  [BUGGY]      return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	parent  ==  parent.getFirstChild())  {  return  computeFallThrough(parent.getFirstChild());  }	  parent    ==    parent    ||    NodeUtil.hasFinally(parent))    {    return    computeFallThrough(parent.getFirstChild());    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(parent.getFirstChild()!=  node,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  parent;  }  else  {  return  parent.getFirstChild().getNext().getNext();  }  case  Token.WHILE:  case  Token.DO:  return  parent;  case  Token.TRY:  if  (parent.getFirstChild()  ==  node)  {      [BUGGY]  Preconditions.checkState(parent.getFirstChild()!=  node,  parent.getFirstChild());  [BUGGY]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.    return  computeFallThrough(parent.getLastChild());  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.  return  computeFollowNode(fromNode,  parent);  }  }  else  if  (NodeUtil.getCatchBlock(parent)  ==  node){  if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {  return  computeFollowNode(fromNode,  parent);  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3086066999241838	727	728	3	replace	Preconditions.checkState(parent.getFirstChild()!=  node,  parent.getFirstChild());	  Preconditions.checkState(parent.getFirstChild()    ==    node,    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
