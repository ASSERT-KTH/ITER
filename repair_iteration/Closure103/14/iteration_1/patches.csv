bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  parent  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  n.getLastChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  n.getLastChild();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  Node  parent  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  node.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  node.getParent();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
4	[BUG]  [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
5	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
6	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
7	[BUG]  [BUGGY]  Node  n  =  getLastChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  getLastChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getLastChild();	      Node    n    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
8	[BUG]  [BUGGY]  Node  n  =  getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  getFirstChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getFirstChild().getNext();	      Node    n    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
9	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getLastChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
10	[BUG]  [BUGGY]  Node  n  =  child.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  child.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  child.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
11	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getNext();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  parent.getLastChild()  :  null;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  parent.getLastChild()  :  null;  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getType()  ==  Token.TRY?  parent.getLastChild()  :  null;	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  if(n.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent);  exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
14	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
15	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.peek()  ==  exceptionHandler);  exceptionHandler.pop();  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler);  exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
16	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
17	[BUG]  [BUGGY]  Node  parent  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  node.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  node.getFirstChild();	      Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
19	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  Node  parent  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  node.getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  node.getNext();	      Node    parent    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getFirstChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getFirstChild().getNext();	      Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
24	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  node.getFirstChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  node.getFirstChild().getNext();	      Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
25	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getLastChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getLastChild().getNext();	      Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
26	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
27	[BUG]  [BUGGY]  if(n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n!=  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getLastChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
28	[BUG]  [BUGGY]  Node  entry  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  entry  =  parent.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  parent.getFirstChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
29	[BUG]  [BUGGY]  Node  entry  =  n.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  entry  =  n.getLastChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  n.getLastChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
30	[BUG]  [BUGGY]  Node  entry  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  entry  =  n.getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  n.getNext();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
31	[BUG]  [BUGGY]  Node  entry  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  entry  =  node.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  node.getFirstChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
32	[BUG]  [BUGGY]  Node  n  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  node.getLastChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  node.getLastChild();	      Node    n    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
33	[BUG]  [BUGGY]  Node  n  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  node.getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  node.getNext();	      Node    n    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
34	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
35	[BUG]  [BUGGY]  if(parent!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent!=  null)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null)  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  1)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  1)  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
37	[BUG]  [BUGGY]  if(exceptionHandler  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler  ==  null)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null)  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
38	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
39	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
40	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.getFirstChild()!=  null  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  null  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild()!=  null  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n!=  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
45	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
46	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
47	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
48	[BUG]  [BUGGY]  if(parent!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n.getFirstChild().getNext()!=  null)  {	  if(n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
49	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  parent.getFirstChild().getNext()!=  null)  {	  if(n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  Node  parent  =  n.getPreviousChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  n.getPreviousChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  n.getPreviousChild();	      Node    parent    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
51	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
52	[BUG]  [BUGGY]  if(parent  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
54	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
55	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
56	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
57	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  exceptionHandler.peek())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild()!=  exceptionHandler.peek())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  exceptionHandler.peek())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
58	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
59	[BUG]  [BUGGY]  if(parent.getFirstChild()  ==  null  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild()  ==  null  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()  ==  null  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  Node  parent  =  n.getPrevious();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  n.getPrevious();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  n.getPrevious();	      Node    parent    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
61	[BUG]  [BUGGY]  Node  n  =  parents.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parents.getFirstChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parents.getFirstChild().getNext();	      Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
62	[BUG]  [BUGGY]  Node  n  =  child.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  child.getFirstChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  child.getFirstChild().getNext();	      Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
63	[BUG]  [BUGGY]  Node  n  =  parent.getfirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getfirstChild().getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getfirstChild().getNext();	      Node    n    =    n.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
64	[BUG]  [BUGGY]  Node  n  =  root.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  root.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  root.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  if(n.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
67	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getParent();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  Node  n  =  getNext();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  getNext();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getNext();	      Node    n    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
69	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.hasChildren())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
70	[BUG]  [BUGGY]  if(parent  ==  null  ||  exceptionHandler.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  null  ||  exceptionHandler.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  exceptionHandler.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  if(parent  ==  null)  {  exceptionHandler.peek()  ==  exceptionHandler;  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  null)  {  exceptionHandler.peek()  ==  exceptionHandler;  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null)  {  exceptionHandler.peek()  ==  exceptionHandler;  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
72	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
73	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
74	[BUG]  [BUGGY]  Node  parent  =  n.getParentNode();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  parent  =  n.getParentNode();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  n.getParentNode();	      Node    parent    =    n.getParent();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
75	[BUG]  [BUGGY]  Node  entry  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  entry  =  n.removeFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  n.removeFirstChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
76	[BUG]  [BUGGY]  Node  n  =  nodePriorities.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  nodePriorities.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  nodePriorities.getFirstChild();	      Node    n    =    getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
77	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {	  if(n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
79	[BUG]  [BUGGY]  if(parent  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(parent  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
80	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler.peek()  ==  parent)exceptionHandler.pop();  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
81	[BUG]  [BUGGY]  if(exceptionHandler.peek()!=  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler.peek()!=  parent);  exceptionHandler.pop();  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()!=  parent);  exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
82	[BUG]  [BUGGY]  Node  n  =  this.node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  this.node.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  this.node.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
83	[BUG]  [BUGGY]  Node  n  =  parents.getFirstChild();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parents.getFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parents.getFirstChild();	      Node    n    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
84	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]    if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.removeFirstChild();	      Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
85	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren())  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:          [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  0)  {  [BUGGY]    Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  0)  {	  if(exceptionHandler!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
