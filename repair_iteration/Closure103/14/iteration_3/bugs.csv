bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
2	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
3	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent  ||  n!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
4	[BUG]  [BUGGY]  if(parent!=  null  &&  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  exceptionHandler.hasChildren())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null    &&    exceptionHandler.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
5	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  &&  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  &&  exceptionHandler.hasChildren())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  &&  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null    &&    exceptionHandler.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
6	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren()  ||  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren()  ||  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren()  ||  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
7	[BUG]  [BUGGY]  Node  entry  =  parent.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  parent.removeFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  parent.removeFirstChild();	  Node    entry    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
8	[BUG]  [BUGGY]  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	exceptionHandler.pop();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
9	[BUG]  [BUGGY]  Context.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Context.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Context.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
10	[BUG]  [BUGGY]  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	exceptionHandler.peek();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
11	[BUG]  [BUGGY]  Context.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Context.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Context.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
12	[BUG]  [BUGGY]  Context.checkState(exceptionHandler.peek()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Context.checkState(exceptionHandler.peek()  ==  parent);  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Context.checkState(exceptionHandler.peek()  ==  parent);	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
13	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
14	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
15	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent  ||  n!=  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
16	[BUG]  [BUGGY]  Node  n  =  parent.getfirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getfirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getfirstChild();	  Node    n    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
17	[BUG]  [BUGGY]  Node  n  =  parent.getlastChild();  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getlastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getlastChild();	  Node    n    =    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
18	[BUG]  [BUGGY]  if(n  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent!=    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
19	[BUG]  [BUGGY]  if(n  ==  parent  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent!=    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
20	[BUG]  [BUGGY]  if(n!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent!=    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
21	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  parent.getFirstChild()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
22	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild()  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent.getFirstChild()  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild()  ||  n!=  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
23	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild()  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent.getFirstChild()  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild()  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
24	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
25	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild().getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
26	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  ||  n!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
29	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
30	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  ||  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  ||  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  ||  parent.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
31	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
32	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  n.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
33	[BUG]  [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  parent.getFirstChild()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  parent.getFirstChild()  :  null;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getType()  ==  Token.TRY?  parent.getFirstChild()  :  null;	  Node    n    =    parent.getType()    ==    Token.TRY?    parent.getLastChild()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  Node  n  =  parent.getType()!=  Token.TRY?  parent.getFirstChild()  :  null;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getType()!=  Token.TRY?  parent.getFirstChild()  :  null;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getType()!=  Token.TRY?  parent.getFirstChild()  :  null;	  Node    n    =    parent.getType()    ==    Token.TRY?    parent.getLastChild()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild()  ==  Token.TRY?  parent.getLastChild()  :  null;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getFirstChild()  ==  Token.TRY?  parent.getLastChild()  :  null;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getFirstChild()  ==  Token.TRY?  parent.getLastChild()  :  null;	  Node    n    =    parent.getType()    ==    Token.TRY?    parent.getLastChild()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
36	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()!=  parent.getLastChild().getNext())  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
41	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
42	[BUG]  [BUGGY]  if(parent!=  null  &&  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
43	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  &&  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  &&  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  &&  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
44	[BUG]  [BUGGY]  if(n  ==  parent  ||  exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent  ||  exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent  ||  exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
45	[BUG]  [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getType()    ==    Token.TRY    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
46	[BUG]  [BUGGY]  if(n.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getType()    ==    Token.TRY    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
47	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {	  if(parent.getType()    ==    Token.TRY    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
48	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.TRY  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getType()  ==  Token.TRY  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getType()  ==  Token.TRY  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getType()    ==    Token.TRY    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
49	[BUG]  [BUGGY]  Node  n  =  node.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  node.getLastChild().getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  node.getLastChild().getNext();	  Node    n    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
50	[BUG]  [BUGGY]  if(parent!=  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {	  if(n!=    parent.getFirstChild().getNext()    ||!NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
51	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild().getNext()  ||!NodeUtil.isExpressionNode(parent))  {	  if(n!=    parent.getFirstChild().getNext()    ||!NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
52	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild().getNext()!=  NodeUtil.isExpressionNode(parent))  {	  if(n!=    parent.getFirstChild().getNext()    ||!NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
53	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&!NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&!NodeUtil.isExpressionNode(parent))  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  &&!NodeUtil.isExpressionNode(parent))  {	  if(n!=    parent.getFirstChild().getNext()    ||!NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
54	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n.getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
55	[BUG]  [BUGGY]  if(n.getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {	  if(n.getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
56	[BUG]  [BUGGY]  if(n.getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getType()  ==  Token.TRY  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n.getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
57	[BUG]  [BUGGY]  if(n.getType()!=  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getType()!=  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getType()!=  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n.getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
58	[BUG]  [BUGGY]  Node  n  =  nodePriorities.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  nodePriorities.getFirstChild().getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  nodePriorities.getFirstChild().getNext();	  Node    n    =    parents.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
59	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent)exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)exceptionHandler.peek();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
60	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.peek())exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  exceptionHandler.peek())exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.peek())exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
61	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler)exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  exceptionHandler)exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler)exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
62	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent)exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()  ==  parent)exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent)exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
63	[BUG]  [BUGGY]  if(exceptionHandler.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
64	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
65	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()!=  null  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
66	[BUG]  [BUGGY]  if(parent.getFirstChild()  ==  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()  ==  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()  ==  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
67	[BUG]  [BUGGY]  if(n  ==  parent  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
68	[BUG]  [BUGGY]  if(n  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
69	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
70	[BUG]  [BUGGY]  Node  entry  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  parent.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  parent.getLastChild();	  Node    entry    =    parent.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
71	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  ||  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
72	[BUG]  [BUGGY]  Node  parent  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  parent  =  node.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  node.getLastChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
73	[BUG]  [BUGGY]  Node  n  =  getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getLastChild().getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getLastChild().getNext();	  Node    n    =    getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
74	[BUG]  [BUGGY]  Node  n  =  getFirstChild().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getFirstChild().getNext()  +  1;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getFirstChild().getNext()  +  1;	  Node    n    =    getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
75	[BUG]  [BUGGY]  Node  n  =  root.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  root.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  root.getLastChild();	  Node    n    =    root.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
76	[BUG]  [BUGGY]  if(n.getLastChild().getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getLastChild().getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getLastChild().getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
77	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
78	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  ||  n!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
79	[BUG]  [BUGGY]  if(parent.getLastChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getLastChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getLastChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
80	[BUG]  [BUGGY]  Node  n  =  node.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  node.removeFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  node.removeFirstChild();	  Node    n    =    parent.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
81	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  n  ||  n!=  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
82	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
83	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  >  0)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.size()  >  0)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
84	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  1)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  1)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
85	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  ==  0)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.size()  ==  0)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
86	[BUG]  [BUGGY]  if(parent!=  null  &&  exceptionHandler.size()  >  0)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  exceptionHandler.size()  >  0)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  exceptionHandler.size()  >  0)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
87	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()!=  parent  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()!=  parent  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()!=  parent  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
88	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()!=  n  &&  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()!=  n  &&  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()!=  n  &&  n  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
89	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  ==  1)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.size()  ==  1)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
90	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  2)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  2)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  2)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
91	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.size()  ==  1)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  ||  exceptionHandler.size()  ==  1)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
92	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  &&  exceptionHandler.size()  ==  1)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  &&  exceptionHandler.size()  ==  1)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  &&  exceptionHandler.size()  ==  1)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
93	[BUG]  [BUGGY]  Node  n  =  nodePriorities.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  nodePriorities.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  nodePriorities.getLastChild();	  Node    n    =    nodePriorities.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
94	[BUG]  [BUGGY]  Node  n  =  parentPriorities.getFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parentPriorities.getFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parentPriorities.getFirstChild();	  Node    n    =    nodePriorities.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
95	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();	  if(parent.peek()    ==    exceptionHandler);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
96	[BUG]  [BUGGY]  if(parent.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  parent);  exceptionHandler.pop();	  if(parent.peek()    ==    exceptionHandler);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
97	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild().getNext()  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getFirstChild().getNext()  +  1;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getFirstChild().getNext()  +  1;	  Node    n    =    parent.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
98	[BUG]  [BUGGY]  if(parent!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
99	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  parent.getFirstChild()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
100	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild()  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  parent.getFirstChild()  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild()  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
101	[BUG]  [BUGGY]  if(exceptionHandler.getFirstChild()!=  parent.peek())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getFirstChild()!=  parent.peek())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getFirstChild()!=  parent.peek())  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
102	[BUG]  [BUGGY]  if(n.getFirstChild()!=  exceptionHandler.peek())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()!=  exceptionHandler.peek())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  exceptionHandler.peek())  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
103	[BUG]  [BUGGY]  if(n.getFirstChild()!=  parent.peek())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()!=  parent.peek())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  parent.peek())  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
104	[BUG]  [BUGGY]  if(parent.getFirstChild()  ==  exceptionHandler.peek())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()  ==  exceptionHandler.peek())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()  ==  exceptionHandler.peek())  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
105	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
106	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  n);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()  ==  n);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  n);  exceptionHandler.pop();	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
107	[BUG]  [BUGGY]  if(!exceptionHandler.peek()!=  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()!=  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()!=  parent);  exceptionHandler.pop();	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
108	[BUG]  [BUGGY]  if(n  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
109	[BUG]  [BUGGY]  if(n  ==  parent  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
110	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
111	[BUG]  [BUGGY]  if(n!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
112	[BUG]  [BUGGY]  if(parent!=  null  ||  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  exceptionHandler.hasChildren())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null    ||    exceptionHandler.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
113	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.hasChildren())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  ||  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null    ||    exceptionHandler.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
114	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
115	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
116	[BUG]  [BUGGY]  if(!exceptionHandler.peek()!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()!=  parent.getFirstChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
117	[BUG]  [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(!exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(!exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
118	[BUG]  [BUGGY]  if(parent!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
119	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }	  if(parent    ==    null    ||    exceptionHandler.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
120	[BUG]  [BUGGY]  Node  exceptionHandler  =  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  exceptionHandler  =  exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  exceptionHandler  =  exceptionHandler.peek();	  if(parent    ==    null    ||    exceptionHandler.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
121	[BUG]  [BUGGY]  if(n!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null  ||  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
122	[BUG]  [BUGGY]  if(n  ==  null  ||  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  null  ||  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  null  ||  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
123	[BUG]  [BUGGY]  if(parent!=  null  &&  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
124	[BUG]  [BUGGY]  if(n!=  null  ||  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null  ||  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null  ||  parent.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
125	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  null  ||  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
126	[BUG]  [BUGGY]  exceptionHandler.peek()  ==  parent;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  exceptionHandler.peek()  ==  parent;  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	exceptionHandler.peek()  ==  parent;	  if(parent    ==    null)    {    exceptionHandler.peek()    ==    exceptionHandler;    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
127	[BUG]  [BUGGY]  Node  entry  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  parent.getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  parent.getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
128	[BUG]  [BUGGY]  Node  entry  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  node.getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  node.getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
129	[BUG]  [BUGGY]  if(n.getFirstChild()!=  null  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()!=  null  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  null  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
130	[BUG]  [BUGGY]  Node  entry  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  node.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  node.getLastChild();	  Node    entry    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
131	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()  ==  null  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()  ==  null  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
132	[BUG]  [BUGGY]  if(n.getLastChild()!=  null  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getLastChild()!=  null  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getLastChild()!=  null  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
133	[BUG]  [BUGGY]  Node  n  =  child.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  child.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  child.getLastChild();	  Node    n    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
134	[BUG]  [BUGGY]  if(parent.peek()!=  exceptionHandler.peek());  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()!=  exceptionHandler.peek());  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()!=  exceptionHandler.peek());  exceptionHandler.pop();	  if(exceptionHandler.peek()!=    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
135	[BUG]  [BUGGY]  if(n.peek()!=  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.peek()!=  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()!=  parent);  exceptionHandler.pop();	  if(exceptionHandler.peek()!=    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
136	[BUG]  [BUGGY]  if(parent!=  null  ||  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
137	[BUG]  [BUGGY]  if(n  ==  parent  ||  exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent  ||  exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent  ||  exceptionHandler!=  null  ||  exceptionHandler.peek()  ==  parent)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
138	[BUG]  [BUGGY]  if(n  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
139	[BUG]  [BUGGY]  if(n!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
140	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  exceptionHandler.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
141	[BUG]  [BUGGY]  if(n.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
142	[BUG]  [BUGGY]  Node  n  =  node.getParent();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  node.getParent();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  node.getParent();	  Node    n    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
143	[BUG]  [BUGGY]  Node  n  =  getNextChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getNextChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getNextChild();	  Node    n    =    getNext();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
144	[BUG]  [BUGGY]  Node  n  =  getNextSibling();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getNextSibling();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getNextSibling();	  Node    n    =    getNext();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
145	[BUG]  [BUGGY]  Node  n  =  child.getLastChild().getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  child.getLastChild().getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  child.getLastChild().getNext();	  Node    n    =    child.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
146	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
147	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  &&  n!=  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
148	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()  ==  null  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()  ==  null  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()    ==    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
149	[BUG]  [BUGGY]  if(parent.peek()  ==  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  n.getFirstChild().getNext())  {	  if(n.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
150	[BUG]  [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {	  if(n.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
151	[BUG]  [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getLastChild().getNext())  {	  if(n.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
152	[BUG]  [BUGGY]  Node  n  =  this.node.getLastChild();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  this.node.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  this.node.getLastChild();	  Node    n    =    this.node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
153	[BUG]  [BUGGY]  Node  n  =  this.node.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  this.node.getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  this.node.getNext();	  Node    n    =    this.node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
154	[BUG]  [BUGGY]  if(n.getLastChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getLastChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getLastChild().getType()  ==  Token.TRY  &&  n!=  parent.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
155	[BUG]  [BUGGY]  if(parent.peek()  ==  n);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  n);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  n);  exceptionHandler.pop();	  if(n.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
156	[BUG]  [BUGGY]  if(parent.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.peek()    ==    exceptionHandler.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
157	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()  ==  n  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  n  ||  n!=  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
158	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  parent.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
159	[BUG]  [BUGGY]  if(n!=  null  &&  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null  &&  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null  &&  parent.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
160	[BUG]  [BUGGY]  if(n  ==  null  &&  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  null  &&  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  null  &&  parent.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
161	[BUG]  [BUGGY]  if(parent  ==  null  &&  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null  &&  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  &&  parent.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
162	[BUG]  [BUGGY]  Node  entry  =  n.getParent();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  n.getParent();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  n.getParent();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
163	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  >  1)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  >  1)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.size()  >  1)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.size()    ==    1)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
164	[BUG]  [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  node.getLastChild()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  node.getLastChild()  :  null;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getType()  ==  Token.TRY?  node.getLastChild()  :  null;	  Node    n    =    parent.getType()    ==    Token.TRY?    parent.getLastChild()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent);	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Preconditions.checkState(exceptionHandler.pop()  ==  parent);  exceptionHandler.pop();	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent);  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Preconditions.checkState(exceptionHandler.pop()  ==  parent);	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
168	[BUG]  [BUGGY]  Node  n  =  children.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  children.getFirstChild().getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  children.getFirstChild().getNext();	  Node    n    =    child.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
169	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren()  ||  exceptionHandler.hasChildren())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren()  ||  exceptionHandler.hasChildren())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.hasChildren()  ||  exceptionHandler.hasChildren())  {	  if(exceptionHandler!=    null    &&    exceptionHandler.hasChildren())    {    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
170	[BUG]  [BUGGY]  Node  n  =  child.getNext();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  child.getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  child.getNext();	  Node    n    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
171	[BUG]  [BUGGY]  if(exceptionHandler.getFirstChild()!=  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getFirstChild()!=  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getFirstChild()!=  parent)  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
172	[BUG]  [BUGGY]  if(exceptionHandler.getFirstChild()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getFirstChild()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getFirstChild()  ==  parent)  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
173	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent!=    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
174	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  &&  n  ==  parent.getLastChild().getNext())  {	  if(parent!=    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
175	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
176	[BUG]  [BUGGY]  if(parent.getType()  ==  Token.TRY  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getType()  ==  Token.TRY  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getType()  ==  Token.TRY  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
177	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()!=  null  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  &&!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
178	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  ||!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()!=  null  ||!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  ||!exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(!exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
179	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  Node.newString(Token.NAME));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.replaceChild(n,  Node.newString(Token.NAME));  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.replaceChild(n,  Node.newString(Token.NAME));	  Node    n    =    parent.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
180	[BUG]  [BUGGY]  parent  ==  null)  {  exceptionHandler.peek()  ==  parent;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  parent  ==  null)  {  exceptionHandler.peek()  ==  parent;  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	parent  ==  null)  {  exceptionHandler.peek()  ==  parent;	  if(parent    ==    null)    {    exceptionHandler.peek()    ==    exceptionHandler;    }    else    {    Preconditions.checkState(exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
181	[BUG]  [BUGGY]  if(exceptionHandler.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
182	[BUG]  [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext()!=  null)  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
183	[BUG]  [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getType()  ==  Token.TRY  &&  parent.getFirstChild().getNext())  {	  if(n.getFirstChild().getType()    ==    Token.TRY    &&    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
184	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
185	[BUG]  [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  parent.getFirstChild().getNext()!=  n  ||  n!=  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
186	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  parent.peek()  ==  exceptionHandler.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  parent.peek()  ==  exceptionHandler.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  parent.peek()  ==  exceptionHandler.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
187	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
188	[BUG]  [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  parent.peek()  ==  exceptionHandler.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  parent.peek()  ==  exceptionHandler.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()  ==  exceptionHandler.getFirstChild().getNext()  ||  parent.peek()  ==  exceptionHandler.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
189	[BUG]  [BUGGY]  Node  n  =  getFirstChild().getLastChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getFirstChild().getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getFirstChild().getLastChild();	  Node    n    =    getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
190	[BUG]  [BUGGY]  Node  entry  =  node.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  node.removeFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  node.removeFirstChild();	  Node    entry    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
191	[BUG]  [BUGGY]  Node  n  =  root.getFirstChild().getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  root.getFirstChild().getNext();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  root.getFirstChild().getNext();	  Node    n    =    node.getFirstChild().getNext();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
192	[BUG]  [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getType()    ==    Token.TRY    &&    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
193	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent);  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent);	  if(n.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
194	[BUG]  [BUGGY]  if(n.peek()  ==  parent)exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.peek()  ==  parent)exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.peek()  ==  parent)exceptionHandler.pop();	  if(n.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
195	[BUG]  [BUGGY]  if(parent!=  null  ||  n!=  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  n!=  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n!=  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
196	[BUG]  [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getType()  ==  Token.TRY  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n.getType()    ==    Token.TRY    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
197	[BUG]  [BUGGY]  if(parent!=  null  ||  n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n!=  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
198	[BUG]  [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getType()  ==  Token.TRY  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(parent.getType()    ==    Token.TRY    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
199	[BUG]  [BUGGY]  if(parent.peek()!=  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()!=  exceptionHandler.peek());  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()!=  exceptionHandler.peek());	  if(exceptionHandler.peek()!=    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
200	[BUG]  [BUGGY]  if(parent!=  null  &&  exceptionHandler.peek()!=  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  exceptionHandler.peek()!=  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  exceptionHandler.peek()!=  parent);  exceptionHandler.pop();	  if(exceptionHandler.peek()!=    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
201	[BUG]  [BUGGY]  if(parent.peek()!=  exceptionHandler.peek())exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()!=  exceptionHandler.peek())exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()!=  exceptionHandler.peek())exceptionHandler.pop();	  if(exceptionHandler.peek()!=    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
202	[BUG]  [BUGGY]  if(parent!=  null  ||  n!=  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  n!=  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n!=  parent.getFirstChild().getNext()  ||  n!=  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n!=    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
203	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  &&  n  ==  parent.getLastChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
204	[BUG]  [BUGGY]  if(exceptionHandler!=  null)  {  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null)  {  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null)  {  exceptionHandler.pop();  }	  if(parent    ==    null    ||    exceptionHandler.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
205	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild()  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent.getFirstChild()  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild()  ||  n  ==  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
206	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler!=  null)  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
207	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  2)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  2)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.size()  >  2)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.size()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
208	[BUG]  [BUGGY]  if(exceptionHandler!=  null)  {  if(parent.peek()  ==  exceptionHandler);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null)  {  if(parent.peek()  ==  exceptionHandler);  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null)  {  if(parent.peek()  ==  exceptionHandler);  exceptionHandler.pop();  }	  if(parent.peek()    ==    exceptionHandler);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
209	[BUG]  [BUGGY]  if(exceptionHandler!=  null)  {  if(parent.peek()  ==  parent);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null)  {  if(parent.peek()  ==  parent);  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null)  {  if(parent.peek()  ==  parent);  exceptionHandler.pop();  }	  if(parent.peek()    ==    exceptionHandler);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
210	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  root)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  root)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  root)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
211	[BUG]  [BUGGY]  if(n  ==  parent.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n  ==  parent.getFirstChild())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n  ==  parent.getFirstChild())  {	  if(parent.getFirstChild()!=    null    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
212	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  &&  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()!=  null  &&  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  &&  n  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
213	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
214	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
215	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
216	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||!NodeUtil.mayHaveSideEffects(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  parent.getFirstChild().getNext()  ||!NodeUtil.mayHaveSideEffects(parent))  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  ||!NodeUtil.mayHaveSideEffects(parent))  {	  if(n!=    parent.getFirstChild().getNext()    ||!NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
217	[BUG]  [BUGGY]  if(parent  ==  exceptionHandler.peek())exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  exceptionHandler.peek())exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  exceptionHandler.peek())exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
218	[BUG]  [BUGGY]  if(exceptionHandler.peek()!=  parent)exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()!=  parent)exceptionHandler.peek();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()!=  parent)exceptionHandler.peek();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
219	[BUG]  [BUGGY]  if(parent!=  null  ||  n.getLastChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  n.getLastChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n.getLastChild().getNext()!=  null)  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
220	[BUG]  [BUGGY]  if(parent!=  null  &&  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  n!=  parent.getLastChild().getNext())  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
221	[BUG]  [BUGGY]  if(parent!=  null  ||  n.getLastChild().getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  n.getLastChild().getNext()  ==  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n.getLastChild().getNext()  ==  null)  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
222	[BUG]  [BUGGY]  if(parent  ==  node.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  node.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  node.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
223	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
224	[BUG]  [BUGGY]  if(parent!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
225	[BUG]  [BUGGY]  if(parent.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()!=  null  &&  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
226	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)  {	  if(parent.peek()    ==    exceptionHandler.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
227	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent).getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent).getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent).getFirstChild().getNext())  {	  if(parent.peek()    ==    exceptionHandler.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
228	[BUG]  [BUGGY]  if(parent  ==  node.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  node.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  node.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
229	[BUG]  [BUGGY]  Node  parent  =  n.getfirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  parent  =  n.getfirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  n.getfirstChild();	  Node    parent    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
230	[BUG]  [BUGGY]  if(parent!=  null)  {  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null)  {  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null)  {  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
231	[BUG]  [BUGGY]  if(parent  ==  null)  {  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null)  {  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null)  {  if(!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
232	[BUG]  [BUGGY]  if(parent  ==  null  ||!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null  ||!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
233	[BUG]  [BUGGY]  if(parent!=  null  ||!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
234	[BUG]  [BUGGY]  if(parent.getFirstChild()  ==  exceptionHandler.peek()  ||  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()  ==  exceptionHandler.peek()  ||  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()  ==  exceptionHandler.peek()  ||  exceptionHandler.peek()  ==  parent.getLastChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
235	[BUG]  [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  0)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  0)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  ||  exceptionHandler.size()  ==  0)  {	  if(parent!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
236	[BUG]  [BUGGY]  if(exceptionHandler.peek()!=  parent.getFirstChild())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()!=  parent.getFirstChild())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()!=  parent.getFirstChild())  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
237	[BUG]  [BUGGY]  if(exceptionHandler.getFirstChild()  ==  parent.peek())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getFirstChild()  ==  parent.peek())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getFirstChild()  ==  parent.peek())  {	  if(parent.getFirstChild()!=    exceptionHandler.peek())    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
238	[BUG]  [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  parent.removeFirstChild()  :  null;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.getType()  ==  Token.TRY?  parent.removeFirstChild()  :  null;  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.getType()  ==  Token.TRY?  parent.removeFirstChild()  :  null;	  Node    n    =    parent.getType()    ==    Token.TRY?    parent.getLastChild()    :    null;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
239	[BUG]  [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.getType()  ==  Token.TRY  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.getType()  ==  Token.TRY  ||  exceptionHandler.peek()  ==  parent.getFirstChild().getNext())  {	  if(parent.getType()    ==    Token.TRY    &&    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
240	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getLastChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
241	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()    ==    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
242	[BUG]  [BUGGY]  Node  n  =  getChildNodes().getFirstChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getChildNodes().getFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getChildNodes().getFirstChild();	  Node    n    =    child.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
243	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.TRUE));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parent.replaceChild(n,  new  Node(Token.TRUE));  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parent.replaceChild(n,  new  Node(Token.TRUE));	  Node    n    =    parent.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
244	[BUG]  [BUGGY]  if(parent!=  null  &&!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&!exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();	  if(!exceptionHandler.peek()    ==    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
245	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent,  exceptionHandler.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent,  exceptionHandler.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent,  exceptionHandler.getFirstChild().getNext())  {	  if(parent.peek()    ==    exceptionHandler.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
246	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()  ==  n.getFirstChild().getNext())  {	  if(n.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
247	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  parent.getFirstChild().getNext()  ==  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
248	[BUG]  [BUGGY]  if(parent.peek()!=  exceptionHandler);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.peek()!=  exceptionHandler);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.peek()!=  exceptionHandler);  exceptionHandler.pop();	  if(exceptionHandler.peek()!=    parent);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
249	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
250	[BUG]  [BUGGY]  if(exceptionHandler.peek()!=  parent)exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()!=  parent)exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()!=  parent)exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
251	[BUG]  [BUGGY]  if(exceptionHandler.pop()  ==  parent)exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.pop()  ==  parent)exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.pop()  ==  parent)exceptionHandler.pop();	  if(exceptionHandler.peek()    ==    parent)exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
252	[BUG]  [BUGGY]  Node  parent  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  parent  =  n.removeFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  parent  =  n.removeFirstChild();	  Node    parent    =    node.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
253	[BUG]  [BUGGY]  if(n.getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getType()  ==  Token.TRY  &&  n!=  parent.getLastChild().getNext())  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
254	[BUG]  [BUGGY]  if(n.getFirstChild()!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()!=  parent.getLastChild().getNext())  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
255	[BUG]  [BUGGY]  if(parent!=  null  &&  n.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  n.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  n.getLastChild().getNext())  {	  if(n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
256	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.pop()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.pop()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.pop()  ==  parent)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
257	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  >=  parent)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  exceptionHandler.peek()  >=  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  exceptionHandler.peek()  >=  parent)  {	  if(exceptionHandler!=    null    &&    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
258	[BUG]  [BUGGY]  if(parent.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild().getNext()  ==  parent  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
259	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
260	[BUG]  [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  parent.getFirstChild().getNext()  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  parent.getFirstChild().getNext()  &&  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild().getNext()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
261	[BUG]  [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  &&  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  &&  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getLastChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()!=    n    ||    n    ==    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
262	[BUG]  [BUGGY]  if(parent.getFirstChild()  ==  null  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent.getFirstChild()  ==  null  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent.getFirstChild()  ==  null  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
263	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  n  ==  parent.getFirstChild().getNext())  {	  if(parent.getFirstChild()!=    null    &&    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
264	[BUG]  [BUGGY]  if(exceptionHandler.pop()  ==  parent);  exceptionHandler.pop();  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.pop()  ==  parent);  exceptionHandler.pop();  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.pop()  ==  parent);  exceptionHandler.pop();	  if(parent.peek()    ==    exceptionHandler);    exceptionHandler.pop();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
265	[BUG]  [BUGGY]  Node  n  =  parents.getLastChild();  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  parents.getLastChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  parents.getLastChild();	  Node    n    =    parents.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
266	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
267	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
268	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.peek();  }	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
269	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.push();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.push();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent)  {  exceptionHandler.pop();  }  else  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.push();  }	  if(parent.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
270	[BUG]  [BUGGY]  if(parent!=  null  ||  n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n!=    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
271	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent  ||  exceptionHandler.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent  ||  exceptionHandler.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent  ||  exceptionHandler.peek()  ==  exceptionHandler.peek())  {  exceptionHandler.pop();  }	  if(parent    ==    null    ||    exceptionHandler.peek()    ==    exceptionHandler.peek())    {    exceptionHandler.pop();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
272	[BUG]  [BUGGY]  if(n!=  null  &&  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n!=  null  &&  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n!=  null  &&  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
273	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  n.getFirstChild().getNext()!=  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  n.getFirstChild().getNext()!=  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  n.getFirstChild().getNext()!=  null)  {	  if(parent!=    null    ||    n.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
274	[BUG]  [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()!=  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()!=  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler.peek()  ==  parent.getFirstChild().getNext()  ||  exceptionHandler.peek()!=  parent.getFirstChild().getNext())  {	  if(exceptionHandler.peek()    ==    parent.getFirstChild().getNext()    ||    exceptionHandler.peek()    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
275	[BUG]  [BUGGY]  if(parent  ==  null  ||  n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null  ||  n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  n  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
276	[BUG]  [BUGGY]  if(parent  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  parent.getFirstChild()  ||  n  ==  parent.getFirstChild().getNext())  {	  if(n    ==    parent.getFirstChild()    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
277	[BUG]  [BUGGY]  if(exceptionHandler!=  null  &&  parent.getFirstChild().getNext()  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler!=  null  &&  parent.getFirstChild().getNext()  ==  null)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler!=  null  &&  parent.getFirstChild().getNext()  ==  null)  {	  if(parent!=    null    &&    parent.getFirstChild().getNext()!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
278	[BUG]  [BUGGY]  if(parent!=  null  ||  exceptionHandler.peek()  ==  exceptionHandler)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent!=  null  ||  exceptionHandler.peek()  ==  exceptionHandler)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent!=  null  ||  exceptionHandler.peek()  ==  exceptionHandler)  {	  if(exceptionHandler!=    null    ||    exceptionHandler.peek()    ==    parent)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
279	[BUG]  [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.size()  ==  parent)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(exceptionHandler  ==  null  ||  exceptionHandler.size()  ==  parent)  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(exceptionHandler  ==  null  ||  exceptionHandler.size()  ==  parent)  {	  if(exceptionHandler    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
280	[BUG]  [BUGGY]  Node  n  =  this.nodePriorities.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  this.nodePriorities.getFirstChild();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  this.nodePriorities.getFirstChild();	  Node    n    =    nodePriorities.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
281	[BUG]  [BUGGY]  Node  entry  =  n.cloneTry();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  entry  =  n.cloneTry();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  entry  =  n.cloneTry();	  Node    entry    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
282	[BUG]  [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(parent  ==  null  ||  parent.getFirstChild().getNext()!=  n  ||  n  ==  parent.getFirstChild().getNext())  {	  if(parent    ==    null    ||    parent.getFirstChild().getNext()    ==    n    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
283	[BUG]  [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild()  ==  null  ||  n.getFirstChild().getNext())  {	  if(n.getFirstChild()!=    null    ||    n    ==    parent.getFirstChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
284	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getLastChild().getNext())  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getLastChild().getNext())  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()  ==  parent.getFirstChild().getNext()  ||  n!=  parent.getLastChild().getNext())  {	  if(n    ==    parent.getFirstChild().getNext()    ||    n!=    parent.getLastChild().getNext())    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
285	[BUG]  [BUGGY]  Node  n  =  getTry();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  Node  n  =  getTry();  [BUGGY]      if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	Node  n  =  getTry();	  Node    n    =    getNext();    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
286	[BUG]  [BUGGY]  if(n.getFirstChild().getNext()!=  NodeUtil.isExpressionNode(parent))  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      case  Token.RETURN:  case  Token.THROW:  return  false;  case  Token.TRY:            [BUGGY]  if(n.getFirstChild().getNext()!=  NodeUtil.isExpressionNode(parent))  {  [BUGGY]      Preconditions.checkState(exceptionHandler.peek()  ==  parent);  exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	281	281	3	replace	if(n.getFirstChild().getNext()!=  NodeUtil.isExpressionNode(parent))  {	  if(n!=    parent.getFirstChild().getNext()    ||!NodeUtil.isExpressionNode(parent))    {    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
