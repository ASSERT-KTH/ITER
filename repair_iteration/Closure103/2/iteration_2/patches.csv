bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  node);	  NodeTraversal.traverse(compiler,    node,    body);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	142	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node);	  NodeTraversal.traverse(compiler,    node,    body);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	142	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  fromNode);	  NodeTraversal.traverse(compiler,    node,    body);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	142	None	replace
4	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	100	None	replace
5	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  priorityComparator);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  priorityComparator);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)	100	None	replace
6	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	100	None	replace
7	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  exceptionHandler,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  exceptionHandler,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  exceptionHandler,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)	100	None	replace
8	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  int,  astPositionCounter);  [CE]  '.class'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  int,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  int,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  '.class'  expected	100	None	replace
9	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  return  computeFallThrough(fromNode.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  return  computeFallThrough(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    return  computeFallThrough(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	106	None	add
10	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	add
11	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  return  computeFollowNode(fromNode.getNext());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  return  computeFollowNode(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    return  computeFollowNode(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	106	None	add
12	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	add
13	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	add
14	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  node.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  fromNode  =  node.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	add
15	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  node.getNext();  Node  head  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  node.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    Node  body  =  node.getNext();  Node  head  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	add
16	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  parent.getNext();  Node  head  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  parent.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    Node  body  =  parent.getNext();  Node  head  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	add
17	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  node.getNext();  Node  header  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  node.getNext();  Node  header  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    Node  body  =  node.getNext();  Node  header  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	add
18	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  child.getNext();  Node  head  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  child.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    Node  body  =  child.getNext();  Node  head  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	add
19	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    Node  body  =  parent.getNext();  Node  head  =  parent.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	add
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	2	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  node);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	2	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  astPosition);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)	2	None	replace
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	238	8	add
24	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	238	8	add
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	238	8	add
26	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	238	8	add
27	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	238	8	add
28	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	238	8	add
29	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	238	8	add
30	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	238	8	add
31	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	238	8	add
32	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	238	8	add
33	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	238	8	add
34	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	compilable	  [FE]  RuntimeException  	238	8	add
35	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  fromNode.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    fromNode.getNext();    Node  nextSibling  =  fromNode.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	16	None	add
36	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  toNode.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    fromNode.getNext();    Node  nextSibling  =  toNode.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	16	None	add
37	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  byNode.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  byNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    fromNode.getNext();    Node  nextSibling  =  byNode.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	16	None	add
38	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    fromNode.getNext();    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	16	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	224	3	replace
40	[BUG]  [BUGGY]  Node  body  =  node.getParent();  [FE]  AssertionFailedError  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	224	3	replace
41	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getParent();  [CE]  unreachable  statement  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getParent();    	non-compiled	[CE]  unreachable  statement	224	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  AssertionFailedError  	80	5	add
43	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  AssertionFailedError  	80	5	add
44	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	80	8	add
45	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	80	8	add
46	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
47	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
49	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
50	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	80	8	add
51	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	80	8	add
52	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
53	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  fromNode);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getAstControlFlowGraph();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	39	None	replace
55	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getAstControlFlowGraph();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	39	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getAstControlFlowGraph();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	39	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getAstControlFlowGraph();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	39	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	219	3	replace
59	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	219	3	replace
60	[BUG]  [BUGGY]  nextSibling  =  parent.getFirstChild();  [CE]  cannot  find  symbol  nextSibling  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  nextSibling  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	nextSibling  =  parent.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  nextSibling	219	None	replace
61	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	160	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	160	3	replace
63	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	160	3	replace
64	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	160	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getLastChild();	  Node    nextSibling    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	3	replace
66	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getLastChild();	  Node    nextSibling    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	3	replace
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getParent());	  return    computeFallThrough(fromNode.getNext());    	compilable	  [FE]  AssertionFailedError  	107	3	replace
68	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getParent());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getParent());	  return    computeFallThrough(fromNode.getNext());    	compilable	  [FE]  AssertionFailedError  	107	3	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  root);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  root);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	143	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  root);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  root);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	143	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	143	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  root,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  root,  node);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	143	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fromNode,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fromNode,  root);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  fromNode,  root);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	143	None	replace
74	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  curHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  curHandler);	  return    computeFollowNode(fromNode,    parent,    node,    firstMap);    	non-compiled	[CE]  cannot  find  symbol  curHandler	145	None	replace
75	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  node,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext(),  node,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  node,  parent);	  return    computeFallThrough(parent,    node,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	218	None	replace
76	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	181	None	replace
77	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	181	None	replace
78	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION,  parent.getString());  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION,  parent.getString());  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION,  parent.getString());  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	181	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	compilable	  [FE]  AssertionFailedError  	159	3	replace
80	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	compilable	  [FE]  AssertionFailedError  	159	3	replace
81	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	compilable	  [FE]  RuntimeException  	159	8	replace
82	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [FE]  RuntimeException  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	compilable	  [FE]  RuntimeException  	159	8	replace
83	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	compilable	  [FE]  AssertionFailedError  	159	3	replace
84	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(node.getNext());    }    	compilable	  [FE]  AssertionFailedError  	159	3	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	8	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	8	replace
87	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [CE]  cannot  find  symbol  preconditions  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  preconditions	197	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	197	8	replace
89	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  parent.removeChild(node);  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	197	8	replace
90	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	add
91	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	add
92	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	add
93	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  node.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  fromNode  =  node.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	add
94	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	add
95	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  parent  =  fromNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  parent  =  fromNode.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  parent  =  fromNode.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	152	None	add
96	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  curHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  curHandler);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    body);    	non-compiled	[CE]  cannot  find  symbol  curHandler	214	None	replace
97	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  child);  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  child);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  child);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    body);    	non-compiled	[CE]  cannot  find  symbol  child	214	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    parent.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	207	3	replace
99	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    parent.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	207	3	replace
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    parent.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	207	3	replace
101	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    parent.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	207	3	replace
102	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	207	8	replace
103	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	207	8	replace
104	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
105	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
106	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
107	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
108	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
109	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  >=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  >=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  >=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
110	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  astPosition);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  astPosition);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
111	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent,  this);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  parent,  this);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
112	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  cfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  cfg);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
113	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode,  parent,  this);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(fromNode,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(fromNode,  parent,  this);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
114	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  first);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  first);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  first	91	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	156	3	replace
116	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	156	3	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	156	3	replace
118	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	156	3	replace
119	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	compilable	  [FE]  RuntimeException  	29	8	replace
120	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	compilable	  [FE]  RuntimeException  	29	8	replace
121	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  ParentUtil  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  ParentUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	29	None	replace
122	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);  [CE]  cannot  find  symbol  n  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  n	29	None	replace
123	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
124	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
125	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
126	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,  parent);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
127	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  parent);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(parent.getParent());	  return    computeFallThrough(parent.getNext());    	compilable	  [FE]  AssertionFailedError  	109	3	replace
129	[BUG]  [BUGGY]  return  computeFollowNode(parent.getParent());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getParent());	  return    computeFallThrough(parent.getNext());    	compilable	  [FE]  AssertionFailedError  	109	3	replace
130	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	replace
131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
132	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
133	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	replace
134	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getNext());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent.getNext());	  return    computeFollowNode(fromNode,    parent.getNext());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	166	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getNext());    	compilable	  [FE]  AssertionFailedError  	166	3	replace
136	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getNext());    	compilable	  [FE]  AssertionFailedError  	166	3	replace
137	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
138	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
139	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
140	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getLastChild();  Node  header  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getLastChild();  Node  header  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  node.getLastChild();  Node  header  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
141	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
142	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  child.getLastChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  child.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  child.getLastChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
143	[BUG]  [BUGGY]  Node  body  =  n.getFirstChild();  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  n.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  n.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  n	18	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<Node,Integer>,ControlFlowAnalysis)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  astPosition,  this);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<Node,Integer>,ControlFlowAnalysis)	5	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)	5	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  astPosition,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Map<Node,Integer>,ControlFlowAnalysis,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  astPosition,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  astPosition,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Map<Node,Integer>,ControlFlowAnalysis,Node)	5	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)	5	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Map<Node,Integer>)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Map<Node,Integer>)	5	None	replace
149	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyMap,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  finallyMap,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  finallyMap,  node);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Multimap<Node,Node>,Node)	213	None	replace
150	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)	213	None	replace
151	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  node);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Node)	213	None	replace
152	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)	213	None	replace
153	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  compiler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,AbstractCompiler)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  compiler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  compiler);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,AbstractCompiler)	213	None	replace
154	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  fromNode,  node);	  return    computeFallThrough(parent,    fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	147	None	replace
155	[BUG]  [BUGGY]  return  computeFallThrough(node,  fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node,  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node,  fromNode,  parent);	  return    computeFallThrough(parent,    fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	147	None	replace
156	[BUG]  [BUGGY]  Traverse.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  Traverse  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Traverse.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Traverse.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  Traverse	38	None	replace
157	[BUG]  [BUGGY]  Traversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  Traversal  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Traversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Traversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  Traversal	38	None	replace
158	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
159	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  parent.getParent());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  parent.getParent());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
160	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  parent.getParent());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  parent.getParent());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
161	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
162	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
163	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling  ==  parent.getParent());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling  ==  parent.getParent());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
164	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	3	8	add
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	3	8	add
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Compiler.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Compiler.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    Compiler.traverse(compiler,  fromNode,  this);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  that);  [CE]  cannot  find  symbol  that  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  that);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  that);	  	non-compiled	[CE]  cannot  find  symbol  that	3	None	add
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Compiler  compiler  =  node.getCompiler();  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Compiler  compiler  =  node.getCompiler();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    Compiler  compiler  =  node.getCompiler();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
169	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node,  parent,  astPositionCounter);	  return    computeFallThrough(fromNode,    node,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	138	None	replace
170	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getNext(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getNext(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	77	None	replace
171	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter,  node);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Node)	77	None	replace
172	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,int)	77	None	replace
173	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	77	None	replace
174	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	167	3	replace
175	[BUG]  [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	167	3	replace
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	167	3	replace
177	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	167	3	replace
178	[BUG]  [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	167	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	167	3	replace
180	[BUG]  [BUGGY]  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	167	3	replace
181	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	196	8	add
182	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	196	8	add
183	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	196	8	add
184	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	196	8	add
185	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	196	8	add
186	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	196	8	add
187	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	196	8	add
188	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	196	8	add
189	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	196	8	add
190	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	196	8	add
191	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	196	8	add
192	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	196	8	add
193	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();  [CE]  unreachable  statement  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    node.getNext();    	non-compiled	[CE]  unreachable  statement	127	None	replace
194	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  node.getNext();  [CE]  unreachable  statement  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  node.getNext();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    node.getNext();    	non-compiled	[CE]  unreachable  statement	127	None	replace
195	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
196	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  fromNode  =  fromNode.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  fromNode  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  fromNode  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
197	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
198	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  toNode.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  toNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  toNode.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    fromNode.getLastChild();    Node  head  =  fromNode.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	74	3	add
200	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  head  =  fromNode.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	74	3	add
201	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	101	None	replace
202	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,int)	101	None	replace
203	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	101	None	replace
204	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  node);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Node)	101	None	replace
205	[BUG]  [BUGGY]  Node  body  =  n.getNext();  [CE]  cannot  find  symbol  n  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  n.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  n.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol  n	119	None	replace
206	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getNext());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node.getNext());	  return    computeFollowNode(fromNode,    node.getNext());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	164	None	replace
207	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node.getNext());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent,  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  node.getNext());	  return    computeFollowNode(fromNode,    node.getNext());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	164	None	replace
208	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
209	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	30	None	replace
210	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  body);  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  body);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  cannot  find  symbol  body	30	None	replace
211	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  item);  [CE]  cannot  find  symbol  item  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  item);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  item);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  cannot  find  symbol  item	30	None	replace
212	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(fromNode,  parent);	  NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	81	8	replace
213	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(fromNode,  parent);	  NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	81	8	replace
214	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  getFallThrough(node));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  getFallThrough(node));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  getFallThrough(node));	  NodeUtil.removeChild(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getDefaultAstControlFlowGraph();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	40	None	replace
216	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getDefaultAstControlFlowGraph();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	40	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getDefaultAstControlFlowGraph();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	40	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getDefaultAstControlFlowGraph();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	40	None	replace
219	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
220	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
221	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  parentSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
222	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  parent.getParent();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
223	[BUG]  [BUGGY]  Node  body  =  child.getLastChild();  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  child.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  child.getLastChild();	          Node    body    =    node.getLastChild();    Node    body    =    child.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  child	63	None	replace
224	[BUG]  [BUGGY]  Node  body  =  child.getFirstChild();  [CE]  cannot  find  symbol  child  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  child.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  child.getFirstChild();	          Node    body    =    node.getLastChild();    Node    body    =    child.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  child	63	None	replace
225	[BUG]  [BUGGY]  Node  nextSibling  =  children.getNext();  [CE]  cannot  find  symbol  children  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  children.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  children.getNext();	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    child.getNext();    	non-compiled	[CE]  cannot  find  symbol  children	50	None	replace
226	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext(),  fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext(),  fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext(),  fromNode,  node);	  return    computeFallThrough(node.getNext(),    fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	93	None	replace
227	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  parent,  node);	  return    computeFallThrough(node.getNext(),    fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	93	None	replace
228	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  node,  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  node,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext(),  node,  parent);	  return    computeFallThrough(node.getNext(),    fromNode,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	93	None	replace
229	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  parent,  fromNode);	  return    computeFallThrough(node.getNext(),    fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	93	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	211	3	replace
231	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	211	3	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	211	3	replace
233	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	211	3	replace
234	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext());  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getNext());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	125	None	replace
235	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  node.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  node.getNext();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    node.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	136	None	replace
236	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  fromNode  =  node.getNext();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node);  Node  fromNode  =  node.getNext();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    node.getNext();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	136	None	replace
237	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  fromNode  =  node.getNext();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  fromNode  =  node.getNext();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    node.getNext();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	136	None	replace
238	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  this.nextSibling);	  return    computeFollowNode(fromNode,    parent,    node,    toSibling);    	non-compiled	[CE]  cannot  find  symbol  nextSibling	118	None	replace
239	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstBlock);  [CE]  cannot  find  symbol  firstBlock  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstBlock);	  return    computeFollowNode(fromNode,    parent,    node,    toSibling);    	non-compiled	[CE]  cannot  find  symbol  firstBlock	118	None	replace
240	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
241	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	23	None	replace
242	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	23	3	replace
243	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	23	3	replace
244	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  nodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	nodeTraversal.traverse(compiler,  node,  this);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	132	None	replace
245	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	72	None	add
246	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	72	None	add
247	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	72	None	add
248	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	72	None	add
249	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  }  else  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  }  else  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  }  else  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  'else'  without  'if'	72	None	add
250	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  }  else  if(body!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  }  else  if(body!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  }  else  if(body!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	  	non-compiled	[CE]  'else'  without  'if'	72	None	add
251	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getPrevious();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getPrevious();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getPrevious();	          Node    nextSibling    =    parent.getNext();    Node    nextSibling    =    parent.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
252	[BUG]  [BUGGY]  Node  nextSibling  =  node.getPrevious();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getPrevious();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getPrevious();	          Node    nextSibling    =    parent.getNext();    Node    nextSibling    =    parent.getPrevious();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
253	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  nodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  nodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    nodeTraversal.traverse(compiler,  parent,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	1	None	add
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  node.getCompiler();  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Compiler  compiler  =  node.getCompiler();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Compiler  compiler  =  node.getCompiler();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
257	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  StackOverflowError  	1	8	add
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  StackOverflowError  	1	8	add
259	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  StackOverflowError  	1	8	add
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  StackOverflowError  	1	8	add
261	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	1	8	add
262	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	1	8	add
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	66	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  parent);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	66	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  fromNode,  parent);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	66	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  node);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	66	None	replace
267	[BUG]  [BUGGY]  Node  fromNode  =  parent.getNext(),  node);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  parent.getNext(),  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  parent.getNext(),  node);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
268	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  astPositionCounter);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent,  astPositionCounter);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
269	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  1);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent,  1);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
270	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  computeFollowNode(fromNode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  computeFollowNode(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent,  computeFollowNode(fromNode);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
271	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  this);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent,  this);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  <identifier>  expected	97	None	replace
272	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext(),  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext(),  fromNode);	  return    computeFallThrough(fromNode.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	89	None	replace
273	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent,  nodePriorities);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  parent,  nodePriorities);	  return    computeFallThrough(fromNode.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	89	None	replace
274	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)	173	None	replace
275	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	173	None	replace
276	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	173	None	replace
277	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)	173	None	replace
278	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  node);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Node)	173	None	replace
279	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	216	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	216	None	replace
281	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	216	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	216	None	replace
283	[BUG]  [BUGGY]  Node  fromNode  =  parent.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  parent.getLastChild();	  Node    fromNode    =    parent.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	96	None	replace
284	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getLastChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	79	None	replace
285	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)	79	None	replace
286	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	41	8	add
287	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	41	8	add
288	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	41	8	add
289	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	41	8	add
290	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	41	8	add
291	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	41	8	add
292	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	41	8	add
293	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	41	8	add
294	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	41	8	add
295	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	41	8	add
296	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	41	8	add
297	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	41	8	add
298	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	add
299	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	add
300	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  child.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  child.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  child.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	add
301	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parents.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parents.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  parents.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	add
302	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getLastChild());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  nextSibling  =  parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  nextSibling  =  parent.getLastChild());	  	non-compiled	[CE]  ';'  expected	12	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	21	3	replace
304	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	21	3	replace
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	21	3	replace
306	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	21	3	replace
307	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
308	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
309	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
310	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getFirstChild());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
311	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
312	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getLastChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
313	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  collection);  [CE]  cannot  find  symbol  collection  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  collection);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  collection);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  collection	212	None	replace
314	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cr);  [CE]  cannot  find  symbol  cr  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cr);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cr);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  cr	212	None	replace
315	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  this.nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)	212	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  toNode);	  NodeTraversal.traverse(compiler,    node,    toNode);    	non-compiled	[CE]  cannot  find  symbol  toNode	68	None	replace
317	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getFirstChild();    Node  body  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	87	None	add
318	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getFirstChild();    Node  body  =  fromNode.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	87	None	add
319	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  fromNode  =  fromNode.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  fromNode  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getFirstChild();    Node  fromNode  =  fromNode.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	87	None	add
320	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  toNode.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  toNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getFirstChild();    Node  body  =  toNode.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	87	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    fromNode.getFirstChild();    Node  head  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	87	3	add
322	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getFirstChild();    Node  head  =  fromNode.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	87	3	add
323	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
324	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
325	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
326	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
327	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();  preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
328	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
329	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node,  parent.getLastChild());	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	139	None	replace
330	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  astPositionCounter);	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	139	None	replace
331	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  node);	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	139	None	replace
332	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  astPositionCount);  [CE]  cannot  find  symbol  astPositionCount  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  astPositionCount);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  astPositionCount);	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  astPositionCount	139	None	replace
333	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  astPositionCounter);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	137	None	replace
334	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  cfg);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  cfg);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	137	None	replace
335	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  firstSibling);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	137	None	replace
336	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  nodePriorities);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  nodePriorities);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	137	None	replace
337	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  body  =  fromNode.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	35	None	add
338	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  fromNode  =  fromNode.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  fromNode  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  fromNode  =  fromNode.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	35	None	add
339	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  toNode.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  body  =  toNode.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	35	None	add
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  head  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    fromNode.getNext();    Node  head  =  fromNode.getNext();	  	compilable	  [FE]  AssertionFailedError  	35	3	add
341	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  head  =  fromNode.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  head  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  head  =  fromNode.getNext();	  	compilable	  [FE]  AssertionFailedError  	35	3	add
342	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
343	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
344	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
345	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
346	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  node.getNext();  preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
347	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  >=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  >=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  >=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
348	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	add
349	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	add
350	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	add
351	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getNext());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	add
352	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	add
353	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  if(parent  ==  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  parent  =  node.getParent();  if(parent  ==  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  parent  =  node.getParent();  if(parent  ==  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	165	None	add
354	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	191	None	replace
355	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	191	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	191	None	replace
357	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  lastJump);	  return    computeFollowNode(fromNode,    parent,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  lastJump	115	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	150	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  this);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	150	None	replace
360	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent,  astPositionCounter);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	117	None	replace
361	[BUG]  [BUGGY]  return  computeFollowNode(tode,  fromNode,  parent);  [CE]  cannot  find  symbol  tode  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(tode,  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(tode,  fromNode,  parent);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol  tode	117	None	replace
362	[BUG]  [BUGGY]  return  computeFollowNode(parent,  node,  fromNode);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent,  node,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent,  node,  fromNode);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	117	None	replace
363	[BUG]  [BUGGY]  Node  fromNode  =  node.getLastChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getLastChild();	  Node    fromNode    =    node.getParent();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	172	None	replace
364	[BUG]  [BUGGY]  return  calculateFallThrough(fromNode,  node);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  calculateFallThrough(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  calculateFallThrough(fromNode,  node);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	217	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	194	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	194	None	replace
367	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	194	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	194	None	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	24	8	add
370	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	24	8	add
371	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	24	None	add
372	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(child,  node);  NodeUtil.removeChild(parent,  node);  [CE]  cannot  find  symbol  child  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(child,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(child,  node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol  child	24	None	add
373	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	24	8	add
374	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	24	8	add
375	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	24	None	add
376	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	162	None	replace
377	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<DiGraphNode<Node,Branch>,Integer>)	162	None	replace
378	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getParent(),  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	162	None	replace
379	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  node);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Node)	162	None	replace
380	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getNext());    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	154	6	replace
381	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node.getLastChild());	  return    computeFallThrough(node.getNext());    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	154	6	replace
382	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  parent.getFirstChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    node,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	102	None	replace
383	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    node,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	102	None	replace
384	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.getNext();  [CE]  cannot  find  symbol  toNode  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  toNode.getNext();	  Node    nextSibling    =    fromNode.getNext();    	non-compiled	[CE]  cannot  find  symbol  toNode	17	None	replace
385	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getLastChild());	  return    computeFollowNode(fromNode.getNext());    	compilable	  [FE]  RuntimeException  	105	8	replace
386	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getLastChild());	  return    computeFollowNode(fromNode.getNext());    	compilable	  [FE]  RuntimeException  	105	8	replace
387	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node.getNext(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node.getNext(),  fromNode);	  return    computeFallThrough(fromNode.getNext(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	95	None	replace
388	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getParent(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	76	None	replace
389	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,int)	76	None	replace
390	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	76	None	replace
391	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
392	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FOR);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
393	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
394	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
395	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
396	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FOR);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FOR);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FOR);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	175	None	replace
398	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  thenBlock);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	175	None	replace
399	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	239	8	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	239	8	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	239	8	replace
402	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  parent.removeChild(node);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.BLOCK);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	239	8	replace
403	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  preconditions	239	None	replace
404	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfg,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowGraph<Node>,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  cfg,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  cfg,  node);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,ControlFlowGraph<Node>,Node)	116	None	replace
405	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfg,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>,int)	116	None	replace
406	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  curHandler,  cfg);  [CE]  cannot  find  symbol  curHandler  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  curHandler,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  curHandler,  cfg);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  cannot  find  symbol  curHandler	116	None	replace
407	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  collection,  cfg);  [CE]  cannot  find  symbol  collection  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  collection,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  collection,  cfg);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  cannot  find  symbol  collection	116	None	replace
408	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  cfg);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent,  cfg);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>)	116	None	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling    ==    null);    	compilable	  [FE]  AssertionFailedError  	228	3	replace
410	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling    ==    null);    	compilable	  [FE]  AssertionFailedError  	228	3	replace
411	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getParent();  [CE]  unreachable  statement  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getParent();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getParent();    	non-compiled	[CE]  unreachable  statement	130	None	replace
412	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  parent.getParent();  [CE]  unreachable  statement  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  parent.getParent();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getParent();    	non-compiled	[CE]  unreachable  statement	130	None	replace
413	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getParent();  [CE]  unreachable  statement  [FE]                      RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getParent();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getParent();    	non-compiled	[CE]  unreachable  statement	130	None	replace
414	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  iter);  [CE]  cannot  find  symbol  iter  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  iter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  iter);	  return    computeFollowNode(fromNode,    parent,    node,    init);    	non-compiled	[CE]  cannot  find  symbol  iter	146	None	replace
415	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  this);	  return    computeFollowNode(fromNode,    parent,    node,    init);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	146	None	replace
416	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  value);  [CE]  cannot  find  symbol  value  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  value);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  value);	  return    computeFollowNode(fromNode,    parent,    node,    init);    	non-compiled	[CE]  cannot  find  symbol  value	146	None	replace
417	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	108	None	add
418	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(parent.getNext());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFollowNode(parent.getNext());	  	non-compiled	[CE]  unreachable  statement	108	None	add
419	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFallThrough(parent.getNext());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFallThrough(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFallThrough(parent.getNext());	  	non-compiled	[CE]  unreachable  statement	108	None	add
420	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getNext();  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  unreachable  statement	108	None	add
421	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFallThrough(node.getNext());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFallThrough(node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFallThrough(node.getNext());	  	non-compiled	[CE]  unreachable  statement	108	None	add
422	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getNext();  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  unreachable  statement	108	None	add
423	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
424	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
425	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
426	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  node.getNext();  preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
427	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
428	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  >=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  >=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  >=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
429	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();	          Node    body    =    node.getLastChild();    AssertionFailedError    <    Node>    body    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
430	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AssertionFailedError  <  Node>  body  =  node.getLastChild();	          Node    body    =    node.getLastChild();    AssertionFailedError    <    Node>    body    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
431	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();	          Node    body    =    node.getLastChild();    AssertionFailedError    <    Node>    body    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
432	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	157	3	replace
433	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	157	3	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  return  computeFallThrough(fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	192	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	192	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  return  computeFallThrough(fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,<null>)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  null);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  null);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,<null>)	192	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  node);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	192	None	replace
438	[BUG]  [BUGGY]  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.addChildToFront(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
439	[BUG]  [BUGGY]  NodeUtil.addChildToBack(parent,  node);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.addChildToBack(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.addChildToBack(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
440	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  node);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.replaceChild(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
441	[BUG]  [BUGGY]  Node  parent  =  toNode.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  parent  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  toNode.getNext();	  Node    parent    =    node.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	9	None	replace
442	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
443	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
444	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
445	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
446	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
447	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
448	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
449	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	37	8	add
450	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	223	None	replace
451	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	223	None	replace
452	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  this);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	215	None	replace
453	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  astPosition);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  astPosition);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  astPosition);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)	215	None	replace
454	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,ControlFlowAnalysis)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  this);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,ControlFlowAnalysis)	215	None	replace
455	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getParent(),  this);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	215	None	replace
456	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Multimap<Node,Node>)	215	None	replace
457	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node,  parent.getFirstChild());	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	141	None	replace
458	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  astPositionCounter);	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	141	None	replace
459	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  node);	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	141	None	replace
460	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  nodePriorities);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  nodePriorities);	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	141	None	replace
461	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
462	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
463	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
464	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
465	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
466	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
467	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  node  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	133	None	replace
468	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	133	None	replace
469	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	133	None	replace
470	[BUG]  [BUGGY]  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  parent  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  node.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getFirstChild();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	133	None	replace
471	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  parent,  node);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	176	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  fromNode);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	176	None	replace
473	[BUG]  [BUGGY]  node  =  compiler.traverse(compiler,  parent,  fromNode);  [CE]  cannot  find  symbol  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  node  =  compiler.traverse(compiler,  parent,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	node  =  compiler.traverse(compiler,  parent,  fromNode);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
474	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
475	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
476	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getLastChild();    Node  head  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	70	3	add
477	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  head  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	70	3	add
478	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
479	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
480	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
482	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  parent.removeChild(fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
484	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  fromNode,  this);  parent.removeChild(fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  parent.removeChild(fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
486	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Node  body  =  parent.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	33	None	add
487	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  parent.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  parent  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Node  parent  =  parent.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	33	None	add
488	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Node  body  =  parent.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	33	None	add
489	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getParent();    Node  head  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	33	3	add
490	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  parent.getParent();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Node  head  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	33	3	add
491	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  node.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Node  body  =  node.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	33	None	add
492	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  curHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  curHandler);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    body);    	non-compiled	[CE]  cannot  find  symbol  curHandler	174	None	replace
493	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  cr);  [CE]  cannot  find  symbol  cr  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  cr);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  cr);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    body);    	non-compiled	[CE]  cannot  find  symbol  cr	174	None	replace
494	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  child);  [CE]  cannot  find  symbol  child  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  child);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  child);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    body);    	non-compiled	[CE]  cannot  find  symbol  child	174	None	replace
495	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	add
496	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	add
497	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	add
498	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  return  computeFallThrough(node.getNext());  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  return  computeFallThrough(node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    return  computeFallThrough(node.getNext());	  	non-compiled	[CE]  unreachable  statement	110	None	add
499	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	add
500	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	add
501	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
502	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getNext());  }  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
503	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
504	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getLastChild());  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getLastChild());  }	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
505	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
506	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getFirstChild());  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getFirstChild());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFallThrough(node.getFirstChild());  }	  	non-compiled	[CE]  'else'  without  'if'	14	None	add
507	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	112	None	add
508	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  node.getNext();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  unreachable  statement	112	None	add
509	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFallThrough(node.getNext());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFallThrough(node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    return  computeFallThrough(node.getNext());	  	non-compiled	[CE]  unreachable  statement	112	None	add
510	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  parent.getNext();  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  unreachable  statement	112	None	add
511	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFallThrough(fromNode.getNext());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFallThrough(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    return  computeFallThrough(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	112	None	add
512	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    Node  node  =  parent.getParent();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	112	None	add
513	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	28	8	add
514	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	28	8	add
515	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	28	8	add
516	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	28	8	add
517	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	28	None	add
518	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
519	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  [CE]  illegal  start  of  expression  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
520	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	28	None	add
521	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
522	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
523	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
524	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
525	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
526	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
527	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getNext();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
528	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getNext();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
529	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getLastChild();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
530	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getLastChild();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getLastChild();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
531	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
532	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
533	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getParent();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
534	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getParent();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	20	3	replace
536	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	20	3	replace
537	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
538	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
539	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
540	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
541	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
542	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getLastChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
544	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getFirstChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);	  	compilable	  [FE]  AssertionFailedError  	231	3	add
546	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);	  	compilable	  [FE]  AssertionFailedError  	231	3	add
547	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(parent);	  	compilable	  [FE]  RuntimeException  	231	4	add
548	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(parent);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(parent);	  	compilable	  [FE]  RuntimeException  	231	4	add
549	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	231	8	add
550	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	231	8	add
551	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	231	8	add
552	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	231	8	add
553	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(fromNode);	  	compilable	  [FE]  AssertionFailedError  	231	3	add
554	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(fromNode);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(fromNode);	  	compilable	  [FE]  AssertionFailedError  	231	3	add
555	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  this);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	231	None	add
556	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    }    else    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	replace
557	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getFirstChild();  Node  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    }    else    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	replace
558	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(fromNode,  node);	  NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	230	8	replace
559	[BUG]  [BUGGY]  NodeUtil.removeChild(fromNode,  node);  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(fromNode,  node);	  NodeUtil.removeChild(node);    	compilable	  [FE]  RuntimeException  	230	8	replace
560	[BUG]  [BUGGY]  NodeUtil.removeChild(lastJump,  node);  [CE]  cannot  find  symbol  lastJump  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(lastJump,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(lastJump,  node);	  NodeUtil.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  lastJump	230	None	replace
561	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	163	None	add
562	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	163	None	add
563	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  NodeTraversal.traverse(compiler,  node,  this);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  unreachable  statement	163	None	add
564	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  fromNode  =  node.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  fromNode  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  fromNode  =  node.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	163	None	add
565	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  fromNode  =  node.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  fromNode  =  node.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	163	None	add
566	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  node  =  parent.getParent();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	163	None	add
567	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
568	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
569	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
570	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
571	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
572	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
573	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
574	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
575	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
576	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getNext();    Node  head  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	31	3	add
577	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  head  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  head  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	31	3	add
578	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  parent  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  parent  =  parent.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
579	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getParent());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent.getParent());	  return    computeFollowNode(fromNode,    parent.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	236	None	replace
580	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent.getParent(),  node);	  return    computeFollowNode(fromNode,    parent.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	236	None	replace
581	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getNext(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent.getNext(),  node);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
582	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node.getNext(),  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent,  node.getNext(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  node.getNext(),  fromNode);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
583	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent,  astPositionCounter);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node.getNext(),  parent,  astPositionCounter);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
584	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent,  nodePriorities);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node.getNext(),  parent,  nodePriorities);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
585	[BUG]  [BUGGY]  return  computeFallThrough(node,  fromNode.getNext(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node,  fromNode.getNext(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node,  fromNode.getNext(),  parent);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
586	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
587	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
588	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
589	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
590	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
591	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  null);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
592	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
593	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	44	8	add
594	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    AssertionFailedError    <    Node>    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
595	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    AssertionFailedError    <    Node>    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
596	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  parent.getFirstChild();	          Node    body    =    node.getFirstChild();    AssertionFailedError    <    Node>    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
597	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	83	8	add
598	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	83	8	add
599	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	83	8	add
600	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	83	8	add
601	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	83	8	add
602	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	83	8	add
603	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	83	None	add
604	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(child,  parent);  [CE]  cannot  find  symbol  child  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(child,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(child,  parent);	  	non-compiled	[CE]  cannot  find  symbol  child	83	None	add
605	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstJump);  [CE]  cannot  find  symbol  firstJump  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstJump);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  firstJump);	  NodeTraversal.traverse(compiler,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  firstJump	69	None	replace
606	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  lastJump);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  lastJump);	  NodeTraversal.traverse(compiler,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  lastJump	69	None	replace
607	[BUG]  [BUGGY]  Node  body  =  child.getNext();  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  child.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  child.getNext();	          Node    body    =    node.getNext();    Node    body    =    child.getNext();    	non-compiled	[CE]  cannot  find  symbol  child	124	None	replace
608	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  count);  [CE]  cannot  find  symbol  count  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  count);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  count);	  return    computeFollowNode(fromNode,    parent,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  count	144	None	replace
609	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  values);  [CE]  cannot  find  symbol  values  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  values);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  values);	  return    computeFollowNode(fromNode,    parent,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  values	144	None	replace
610	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,int)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,int)	237	None	replace
611	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,ControlFlowAnalysis)  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  this);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>,ControlFlowAnalysis)	237	None	replace
612	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Multimap<Node,Node>)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  finallyMap);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Multimap<Node,Node>)	237	None	replace
613	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>,int)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  finallyMap,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>,int)	237	None	replace
614	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  this,  finallyMap);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Multimap<Node,Node>)	237	None	replace
615	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  parent.getNext();  [CE]  unreachable  statement  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  parent.getNext();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  unreachable  statement	128	None	replace
616	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  nextSibling  =  node.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	64	None	add
617	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	64	None	add
618	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  nextSibling  =  node.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	64	None	add
619	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  child.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  child.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  nextSibling  =  child.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	64	None	add
620	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  bytes);  [CE]  cannot  find  symbol  bytes  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  bytes);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  bytes);	  NodeTraversal.traverse(compiler,    node,    parents);    	non-compiled	[CE]  cannot  find  symbol  bytes	67	None	replace
621	[BUG]  [BUGGY]  Node  nextSibling  =  child.getParent();  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  child.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  child.getParent();	          Node    nextSibling    =    parent.getNext();    Node    nextSibling    =    child.getNext();    	non-compiled	[CE]  cannot  find  symbol  child	57	None	replace
622	[BUG]  [BUGGY]  Node  body  =  node.getNext();  this.lastJump  =  node.getLastJump();  [CE]  cannot  find  symbol  lastJump  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  this.lastJump  =  node.getLastJump();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  this.lastJump  =  node.getLastJump();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    this.lastJump    =    node.getLastJump();    	non-compiled	[CE]  cannot  find  symbol  lastJump	170	None	replace
623	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  this.lastJump  =  node.getLastJump();  [CE]  cannot  find  symbol  lastJump  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  this.lastJump  =  node.getLastJump();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  this.lastJump  =  node.getLastJump();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    this.lastJump    =    node.getLastJump();    	non-compiled	[CE]  cannot  find  symbol  lastJump	170	None	replace
624	[BUG]  [BUGGY]  Node  body  =  node.getLastJump();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getLastJump();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getLastJump();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    this.lastJump    =    node.getLastJump();    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
625	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  this.lastJump  =  node.getLastJump();  [CE]  cannot  find  symbol  lastJump  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  this.lastJump  =  node.getLastJump();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  this.lastJump  =  node.getLastJump();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    this.lastJump    =    node.getLastJump();    	non-compiled	[CE]  cannot  find  symbol  lastJump	170	None	replace
626	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(parent);	  NodeUtil.redeclareVarsInsideBranch(node);    	compilable	  [FE]  RuntimeException  	232	4	replace
627	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(parent);	  NodeUtil.redeclareVarsInsideBranch(node);    	compilable	  [FE]  RuntimeException  	232	4	replace
628	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node);	  NodeUtil.redeclareVarsInsideBranch(node);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	232	None	replace
629	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(fromNode);	  NodeUtil.redeclareVarsInsideBranch(node);    	compilable	  [FE]  AssertionFailedError  	232	3	replace
630	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);	  NodeUtil.redeclareVarsInsideBranch(node);    	compilable	  [FE]  AssertionFailedError  	232	3	replace
631	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  parent);	  NodeUtil.redeclareVarsInsideBranch(node);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	232	None	replace
632	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node,  parent);	  NodeUtil.redeclareVarsInsideBranch(node);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	232	None	replace
633	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	104	None	add
634	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  node.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    Node  fromNode  =  node.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	104	None	add
635	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	104	None	add
636	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    Node  fromNode  =  node.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	104	None	add
637	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  return  computeFallThrough(fromNode.getNext());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  return  computeFallThrough(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    return  computeFallThrough(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	104	None	add
638	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  node.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  fromNode  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    Node  fromNode  =  node.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	104	None	add
639	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getNext(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getNext(),  node);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	140	None	replace
640	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getNext());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getNext());	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	140	None	replace
641	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getParent());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node,  parent.getParent());	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	140	None	replace
642	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getParent(),  node);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	140	None	replace
643	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  node,  astPositionCounter);	  return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	155	None	replace
644	[BUG]  [BUGGY]  Traverse.traverse(compiler,  parent,  node);  [CE]  cannot  find  symbol  Traverse  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Traverse.traverse(compiler,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Traverse.traverse(compiler,  parent,  node);	  return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  Traverse	155	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)	6	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  priorityComparator);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Comparator<DiGraphNode<Node,Branch>>)	6	None	replace
647	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,int)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  node,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,int)	6	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  astPositionCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	6	None	replace
649	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,ControlFlowAnalysis)  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,ControlFlowAnalysis)	6	None	replace
650	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	78	None	replace
651	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	78	None	replace
652	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  priorityComparator);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  priorityComparator);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)	78	None	replace
653	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  exceptionHandler,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  exceptionHandler,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  exceptionHandler,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)	78	None	replace
654	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getParent(),  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getParent(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	78	None	replace
655	[BUG]  [BUGGY]  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  node  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	134	None	replace
656	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	134	None	replace
657	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getNext();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  node  =  parent.getNext();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	134	None	replace
658	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	234	3	replace
659	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	234	3	replace
660	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  child);  [CE]  cannot  find  symbol  child  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  child);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol  child	82	None	replace
661	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	7	None	replace
662	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  this,  fromNode);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis,Node)	7	None	replace
663	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Node)  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  parent,  fromNode);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Node)	7	None	replace
664	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Node)  [FE]                      StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter,  fromNode);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int,Node)	7	None	replace
665	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Node)  [FE]                        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  fromNode,  parent);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Node)	7	None	replace
666	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  fromNode  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getParent();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	135	None	replace
667	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
668	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
669	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
670	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
671	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
672	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
673	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
674	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
675	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
676	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
677	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  child.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  child.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  child.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
678	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	240	8	add
679	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	240	8	add
680	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	240	8	add
681	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	240	8	add
682	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	240	8	add
683	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	240	8	add
684	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	240	8	add
685	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	240	8	add
686	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	240	8	add
687	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	240	8	add
688	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	240	8	add
689	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	240	8	add
690	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  RuntimeException  	226	8	replace
691	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getNext();  Preconditions.checkState(nextSibling!=  null);	          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  RuntimeException  	226	8	replace
692	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	85	8	add
693	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	85	8	add
694	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	85	8	add
695	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(node,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	85	8	add
696	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	85	None	add
697	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	85	8	add
698	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	85	8	add
699	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	85	8	add
700	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  parent);	  	compilable	  [FE]  RuntimeException  	85	8	add
701	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(child,  parent);  [CE]  cannot  find  symbol  child  [FE]              RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(child,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(child,  parent);	  	non-compiled	[CE]  cannot  find  symbol  child	85	None	add
702	[BUG]  [BUGGY]  Node  fromNode  =  node.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getFirstChild();	  Node    fromNode    =    parent.getFirstChild();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	99	None	replace
703	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	190	None	replace
704	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	190	8	replace
705	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	190	8	replace
706	[BUG]  [BUGGY]  Node  nextSibling  =  node.next();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.next();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.next();	  Node    nextSibling    =    parent.next();    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
707	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.next();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.next();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.next();	  Node    nextSibling    =    parent.next();    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
708	[BUG]  [BUGGY]  Node  nextSibling  =  toNode.next();  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  toNode.next();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  toNode.next();	  Node    nextSibling    =    parent.next();    	non-compiled	[CE]  cannot  find  symbol  toNode	151	None	replace
709	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent,  node);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent,  node);	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
710	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  node);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  node);	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
711	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent,  node.getLastChild());  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent,  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent,  node.getLastChild());	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
712	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent,  node.getParent());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent,  node.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent,  node.getParent());	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
713	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent.getParent());  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent.getParent());	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
714	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node,    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	193	None	replace
715	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node,    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	193	None	replace
716	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node,    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	193	None	replace
717	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                    StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node,    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	193	None	replace
718	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)	103	None	replace
719	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)	103	None	replace
720	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)	103	None	replace
721	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  values);  [CE]  cannot  find  symbol  values  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  values);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  values);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  values	103	None	replace
722	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();	          Node    body    =    node.getNext();    AssertionFailedError    <    Node>    body    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
723	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();	          Node    body    =    node.getNext();    AssertionFailedError    <    Node>    body    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
724	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  body  =  node.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AssertionFailedError  <  Node>  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AssertionFailedError  <  Node>  body  =  node.getNext();	          Node    body    =    node.getNext();    AssertionFailedError    <    Node>    body    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
725	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
726	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getParent());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getParent());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getParent());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
727	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getParent());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getParent());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
728	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
729	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getNext());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
730	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getNext());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
731	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  parent  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	131	None	replace
732	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  parent  =  node.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  parent  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	131	None	replace
733	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  parent  =  node.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node);  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node);  Node  parent  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	131	None	replace
734	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();	          Node    nextSibling    =    node.getNext();    AssertionFailedError    <    Node>    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
735	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nodeSibling  =  node.getNext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nodeSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nodeSibling  =  node.getNext();	          Node    nextSibling    =    node.getNext();    AssertionFailedError    <    Node>    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
736	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	          Node    nextSibling    =    node.getNext();    AssertionFailedError    <    Node>    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
737	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  result  =  node.getNext();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  result  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  result  =  node.getNext();	          Node    nextSibling    =    node.getNext();    AssertionFailedError    <    Node>    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
738	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	241	8	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	241	8	replace
740	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	241	8	replace
741	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  parent.removeChild(node);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()!=  Token.NAME);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	compilable	  [FE]  AssertionFailedError  	241	8	replace
742	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [CE]  cannot  find  symbol  preconditions  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  preconditions	241	None	replace
743	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getNext();  [CE]  unreachable  statement  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getNext();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getNext();    	non-compiled	[CE]  unreachable  statement	221	None	replace
744	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getNext();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getNext();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getNext();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	221	None	replace
745	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	compilable	  [FE]  StackOverflowError  	45	8	replace
746	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	compilable	  [FE]  StackOverflowError  	45	8	replace
747	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  astPosition);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  astPosition);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  astPosition);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Map<Node,Integer>)	242	None	replace
748	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  this);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	242	None	replace
749	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getFirstChild(),  this);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	242	None	replace
750	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,Multimap<Node,Node>)	242	None	replace
751	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,ControlFlowAnalysis)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  this);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,ControlFlowAnalysis)	242	None	replace
752	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  RuntimeException  	209	8	replace
753	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  RuntimeException  	209	8	replace
754	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  RuntimeException  	209	8	replace
755	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getParent());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  node.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  RuntimeException  	209	8	replace
756	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	209	3	replace
757	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [FE]  AssertionFailedError  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	209	3	replace
758	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
759	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
760	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  child.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  child.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  child.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
761	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
762	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild());  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild());	  	non-compiled	[CE]  ';'  expected	199	None	add
763	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(fromNode,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,  parent);  parent.removeChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	26	None	replace
764	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	26	None	replace
765	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  child);  [CE]  cannot  find  symbol  child  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  child);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  child	26	None	replace
766	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	114	None	replace
767	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  astPositionCounter,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  astPositionCounter,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  astPositionCounter,  node);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int,Node)	114	None	replace
768	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	114	None	replace
769	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityCounter,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  priorityCounter,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	114	None	replace
770	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityComparator);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter,  priorityComparator);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)	114	None	replace
771	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  ParentUtil  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  ParentUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	27	None	replace
772	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,  parent);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	27	None	replace
773	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  parent);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    parent);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	27	None	replace
774	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	182	None	replace
775	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	182	None	replace
776	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME,  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  ')'  expected	182	None	replace
777	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getNext(),  node);	  return    computeFollowNode(fromNode.getNext(),    parent);    	compilable	  [FE]  RuntimeException  	153	8	replace
778	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  node);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext(),  node);	  return    computeFollowNode(fromNode.getNext(),    parent);    	compilable	  [FE]  RuntimeException  	153	8	replace
779	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent,  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext(),  parent,  node);	  return    computeFollowNode(fromNode.getNext(),    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	153	None	replace
780	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(node.getNext(),  parent);	  return    computeFollowNode(fromNode.getNext(),    parent);    	compilable	  [FE]  AssertionFailedError  	153	3	replace
781	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext(),  parent);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(node.getNext(),  parent);	  return    computeFollowNode(fromNode.getNext(),    parent);    	compilable	  [FE]  AssertionFailedError  	153	3	replace
782	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  child  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  cannot  find  symbol  child	44	None	add
783	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  exceptionHandler);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node,  parent,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node,  parent,  exceptionHandler);	  return    computeFallThrough(fromNode,    node,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	138	None	replace
784	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyNode);  [CE]  cannot  find  symbol  finallyNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyNode);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  finallyNode	212	None	replace
785	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  first);  [CE]  cannot  find  symbol  first  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  first);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  first);	  return    computeFollowNode(fromNode,    parent,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  first	212	None	replace
786	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  node.getNext();  [CE]  unreachable  statement  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  node.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext());  Node  nextSibling  =  node.getNext();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    node.getNext();    	non-compiled	[CE]  unreachable  statement	127	None	replace
787	[BUG]  [BUGGY]  return  computeFollowNode(toNode,  fromNode,  parent);  [CE]  cannot  find  symbol  toNode  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(toNode,  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(toNode,  fromNode,  parent);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol  toNode	117	None	replace
788	[BUG]  [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  node);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThroughNode(fromNode,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThroughNode(fromNode,  parent,  node);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
789	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  fromNode  =  fromNode.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  fromNode  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    fromNode.getNext();    Node  fromNode  =  fromNode.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	16	None	add
790	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  node  =  node.getLastChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  node  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  node  =  node.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	64	None	add
791	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
792	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getNext();  [CE]  unreachable  statement  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getNext();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  unreachable  statement	128	None	replace
793	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getNext();  [CE]  unreachable  statement  [FE]                RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getNext();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getNext();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  unreachable  statement	128	None	replace
794	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  parent,  node);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  nodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	nodeTraversal.traverse(compiler,  parent,  node);	  return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	155	None	replace
795	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  parent,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	2	None	replace
796	[BUG]  [BUGGY]  TraverseFactory.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  TraverseFactory  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  TraverseFactory.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	TraverseFactory.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseFactory	38	None	replace
797	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parents,  this);  [CE]  cannot  find  symbol  parents  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parents,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parents,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  parents	38	None	replace
798	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	8	add
799	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	238	8	add
800	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	238	8	add
801	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	238	8	add
802	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  parent.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  parent.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    parent.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	223	None	replace
803	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  priorityCounter,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  priorityCounter,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  priorityCounter,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	78	None	replace
804	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	78	None	replace
805	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  return  computeFollowNode(parent.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  return  computeFollowNode(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    return  computeFollowNode(parent.getNext());	  	non-compiled	[CE]  unreachable  statement	110	None	add
806	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  return  computeFollowNode(parent.getNext());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  parent  =  node.getParent();  return  computeFollowNode(parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    Node  parent  =  node.getParent();  return  computeFollowNode(parent.getNext());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	110	None	add
807	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(parent.getNext());    return  computeFollowNode(fromNode,  parent.getNext());	  	non-compiled	[CE]  unreachable  statement	110	None	add
808	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	194	None	replace
809	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	194	None	replace
810	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFollowNode(fromNode,  parent.getNext());	  	non-compiled	[CE]  unreachable  statement	108	None	add
811	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode,  parent.getParent());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFollowNode(fromNode,  parent.getParent());	  	non-compiled	[CE]  unreachable  statement	108	None	add
812	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFollowNode(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	108	None	add
813	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode.getNext());  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  return  computeFollowNode(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(parent.getNext());    return  computeFollowNode(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	108	None	add
814	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    return  computeFollowNode(fromNode,  parent.getNext());	  	non-compiled	[CE]  unreachable  statement	165	None	add
815	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getAstControlFlowGraph();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	39	None	replace
816	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  cannot  find  symbol  nextSibling  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  cannot  find  symbol  nextSibling	181	None	replace
817	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	181	None	replace
818	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	181	None	replace
819	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent,  this);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,  parent,  this);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
820	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  toNode);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  toNode	91	None	replace
821	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  node);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
822	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  computeFollowNode);  [CE]  cannot  find  symbol  computeFollowNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  computeFollowNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  computeFollowNode);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  computeFollowNode	91	None	replace
823	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  getFallThrough(node));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  getFallThrough(node));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  getFallThrough(node));	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
824	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  RuntimeException  	209	8	replace
825	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  RuntimeException  	209	8	replace
826	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	209	3	replace
827	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	209	3	replace
828	[BUG]  [BUGGY]  Node  nextSibling  =  node.getfirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getfirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getfirstChild();	  Node    nextSibling    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
829	[BUG]  [BUGGY]  Node  fromNode  =  child.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  child.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  child.getFirstChild();	  Node    fromNode    =    parent.getFirstChild();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	99	None	replace
830	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getFirstChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getFirstChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getFirstChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	222	None	replace
831	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,Multimap<Node,Node>)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,Multimap<Node,Node>)	76	None	replace
832	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();	          Node    body    =    node.getLastChild();    AssertionFailedError    <    Node>    body    =    node.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
833	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  NodeTraversal.traverse(compiler,  node,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  NodeTraversal.traverse(compiler,  node,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    NodeTraversal.traverse(compiler,  node,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	152	None	add
834	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  computeFallThrough(node.getNext()));  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  computeFallThrough(node.getNext()));  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  computeFallThrough(node.getNext()));	  return    computeFollowNode(fromNode,    parent,    node,    firstMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	145	None	replace
835	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    nodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	37	None	add
836	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  finallyMap);	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	139	None	replace
837	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  cur);  [CE]  cannot  find  symbol  cur  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  cur);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  cur);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    body);    	non-compiled	[CE]  cannot  find  symbol  cur	174	None	replace
838	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  collection);  [CE]  cannot  find  symbol  collection  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  collection);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  collection);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    body);    	non-compiled	[CE]  cannot  find  symbol  collection	174	None	replace
839	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  collected);  [CE]  cannot  find  symbol  collected  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  collected);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  collected);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    body);    	non-compiled	[CE]  cannot  find  symbol  collected	174	None	replace
840	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);  [CE]  cannot  find  symbol  n  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  n);	  	non-compiled	[CE]  cannot  find  symbol  n	28	None	add
841	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityComparator,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Comparator<DiGraphNode<Node,Branch>>,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  priorityComparator,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  priorityComparator,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Comparator<DiGraphNode<Node,Branch>>,int)	114	None	replace
842	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
843	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
844	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  AssertionFailedError  <  Node>  body  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    AssertionFailedError  <  Node>  body  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
845	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
846	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Node  body  =  parent.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	70	None	add
847	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  toNode,  this);  [CE]  cannot  find  symbol  toNode  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  toNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  toNode,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  toNode	45	None	replace
848	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getDefaultAstControlFlowGraph();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	40	None	replace
849	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  cfg);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getDefaultAstControlFlowGraph();    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>)	40	None	replace
850	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
851	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  RuntimeException  	205	8	replace
852	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	205	3	replace
853	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  node.getFirstChild());  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  node.getFirstChild());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	205	3	replace
854	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
855	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  AssertionFailedError  <  Node>  body  =  fromNode.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  AssertionFailedError  <  Node>  body  =  fromNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    AssertionFailedError  <  Node>  body  =  fromNode.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
856	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
857	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  if(body!=  null)  {  return  computeFallThrough(fromNode.getNext());  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  body  =  fromNode.getLastChild();  if(body!=  null)  {  return  computeFallThrough(fromNode.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getLastChild();    Node  body  =  fromNode.getLastChild();  if(body!=  null)  {  return  computeFallThrough(fromNode.getNext());  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	74	None	add
858	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
859	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
860	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
861	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
862	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFollowNode(fromNode,  parent);  }	  	compilable	  [FE]  StackOverflowError  	1	8	add
863	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFollowNode(fromNode,  parent);  }	  	compilable	  [FE]  StackOverflowError  	1	8	add
864	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	1	None	add
865	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  if(shouldTraverseFunctions)  {  return  computeFallThrough(fromNode,  parent);  }	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	add
866	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    NodeTraversal.traverse(compiler,  parent,  this);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	add
867	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	219	None	replace
868	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	219	None	replace
869	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  [CE]  cannot  find  symbol  body  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  body);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  cannot  find  symbol  body	150	None	replace
870	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	83	8	add
871	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	83	8	add
872	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [CE]  cannot  find  symbol  nextSibling  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	non-compiled	[CE]  cannot  find  symbol  nextSibling	185	None	replace
873	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [CE]  cannot  find  symbol  nextSibling  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	non-compiled	[CE]  cannot  find  symbol  nextSibling	187	None	replace
874	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getParent();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	224	None	replace
875	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  finallyMap);	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	141	None	replace
876	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getLastChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
877	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getLastChild();  Node  head  =  node.getLastChild();	          Node    body    =    node.getLastChild();    Node    head    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	62	3	replace
878	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent.getNext(),  node);	  return    computeFollowNode(fromNode,    parent.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	166	None	replace
879	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	235	None	add
880	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  body,  this,  fromNode);  [CE]  cannot  find  symbol  body  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  body,  this,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  body,  this,  fromNode);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  cannot  find  symbol  body	7	None	replace
881	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	3	None	add
882	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	3	None	add
883	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  nodeTraversal.traverse(compiler,  fromNode,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  nodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    nodeTraversal.traverse(compiler,  fromNode,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	3	None	add
884	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  StackOverflowError  <  Node>  fromNodeTraversal  =  compiler.getCurrentTraversal();  [CE]  type  StackOverflowError  does  not  take  parameters  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  StackOverflowError  <  Node>  fromNodeTraversal  =  compiler.getCurrentTraversal();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    StackOverflowError  <  Node>  fromNodeTraversal  =  compiler.getCurrentTraversal();	  	non-compiled	[CE]  type  StackOverflowError  does  not  take  parameters	3	None	add
885	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  StackOverflowError  <  Node>  fromNode  =  node.getLastChild();  [CE]  type  StackOverflowError  does  not  take  parameters  [FE]            StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  StackOverflowError  <  Node>  fromNode  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    StackOverflowError  <  Node>  fromNode  =  node.getLastChild();	  	non-compiled	[CE]  type  StackOverflowError  does  not  take  parameters	3	None	add
886	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	211	3	replace
887	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent!=  null);  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  Preconditions.checkState(parent!=  null);	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=    null);    	compilable	  [FE]  AssertionFailedError  	211	3	replace
888	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getParent();  [CE]  unreachable  statement  [FE]                  RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext());  Node  nextSibling  =  parent.getParent();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getParent();    	non-compiled	[CE]  unreachable  statement	130	None	replace
889	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getParent();  [CE]  unreachable  statement  [FE]                    RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext());  Node  nextSibling  =  parent.getParent();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getParent();    	non-compiled	[CE]  unreachable  statement	130	None	replace
890	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Node  body  =  node.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getLastChild();    	non-compiled	[CE]  unreachable  statement	220	None	replace
891	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getLastChild();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  body  =  node.getLastChild();	  return    computeFollowNode(fromNode,    node);    Node    body    =    node.getLastChild();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	220	None	replace
892	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getNextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getNextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getNextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
893	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
894	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()  ==  node);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
895	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	239	8	replace
896	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	239	8	replace
897	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(node);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	239	None	replace
898	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent  +  1);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent  +  1);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent  +  1);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
899	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent;  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent;  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent;	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	97	None	replace
900	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  body);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  body);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
901	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	8	replace
902	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	8	replace
903	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	8	replace
904	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	197	8	replace
905	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  body  =  fromNode.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  body  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    AssertionFailedError  <  Node>  body  =  fromNode.getNext();	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
906	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  body  =  fromNode.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	35	None	add
907	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  body  =  fromNode.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	35	None	add
908	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  fromNode  =  fromNode.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  AssertionFailedError  <  Node>  fromNode  =  fromNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    AssertionFailedError  <  Node>  fromNode  =  fromNode.getNext();	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
909	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  curHandler);  [CE]  cannot  find  symbol  curHandler  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  curHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  curHandler);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    body);    	non-compiled	[CE]  cannot  find  symbol  curHandler	214	None	replace
910	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  collection);  [CE]  cannot  find  symbol  collection  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  collection);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  collection);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    body);    	non-compiled	[CE]  cannot  find  symbol  collection	214	None	replace
911	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    cfg    =    compiler.getCfg();    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	216	None	replace
912	[BUG]  [BUGGY]  Node  body  =  toNode.getNext();  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  toNode.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  toNode.getNext();	          Node    body    =    node.getNext();    Node    body    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  toNode	121	None	replace
913	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  Parent.removeChild(fromNode);  [CE]  cannot  find  symbol  Parent  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  Parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  Parent.removeChild(fromNode);	  	non-compiled	[CE]  cannot  find  symbol  Parent	41	None	add
914	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(fromNode,  body);  [CE]  cannot  find  symbol  body  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(fromNode,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(fromNode,  body);	  	non-compiled	[CE]  cannot  find  symbol  body	41	None	add
915	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	190	8	replace
916	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [FE]  StackOverflowError  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	190	8	replace
917	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(node.getNext());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(node.getNext());	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	190	8	replace
918	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(node.getNext());  [FE]  StackOverflowError  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(node.getNext());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(node.getNext());	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  StackOverflowError  	190	8	replace
919	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  parent,  fromNode);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  nodeTraversal.traverse(compiler,  parent,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	nodeTraversal.traverse(compiler,  parent,  fromNode);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	176	None	replace
920	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  parent  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext());  Node  parent  =  node.getParent();	  return    computeFallThrough(node.getNext());    Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	125	None	replace
921	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	240	8	add
922	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	240	8	add
923	[BUG]  [BUGGY]  return  computeFallThrough(parent,  parent.getParent());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  parent.getParent());	  return    computeFollowNode(fromNode,    parent.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	236	None	replace
924	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent!=  null);  Node  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	3	replace
925	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  Node  body  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent!=  null);  Node  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent!=  null);  Node  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	18	3	replace
926	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  AssertionFailedError  <  Node>  body  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  AssertionFailedError  <  Node>  body  =  parent.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    AssertionFailedError  <  Node>  body  =  parent.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
927	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	72	None	add
928	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(parent));  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(NodeUtil.hasFinally(parent));  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
929	[BUG]  [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(parent));  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(NodeUtil.hasFinally(parent));  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(NodeUtil.hasFinally(parent));  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
930	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
931	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
932	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  return  computeFollowNode(fromNode.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  return  computeFollowNode(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    return  computeFollowNode(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	104	None	add
933	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  fromNode  =  parent.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  fromNode  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  fromNode  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	135	None	replace
934	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  node.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  fromNode  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  fromNode  =  node.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	106	None	add
935	[BUG]  [BUGGY]  Node  nextSibling  =  child.next();  [CE]  cannot  find  symbol  child  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  child.next();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  child.next();	  Node    nextSibling    =    parent.next();    	non-compiled	[CE]  cannot  find  symbol  child	151	None	replace
936	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent.next());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent.next());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent.next());	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
937	[BUG]  [BUGGY]  NodeUtil.redeclareVars(parent,  node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVars(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVars(parent,  node);	  NodeUtil.removeChild(node,    parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
938	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	85	8	add
939	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	85	8	add
940	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  NodeTraversal.traverse(compiler,  node,  finallyMap);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>)	175	None	replace
941	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.SETPROP);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.SETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.SETPROP);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	184	None	add
942	[BUG]  [BUGGY]  NodeUtil.removeChild(child,  node);  [CE]  cannot  find  symbol  child  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(child,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(child,  node);	  NodeUtil.removeChild(node);    	non-compiled	[CE]  cannot  find  symbol  child	230	None	replace
943	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent,  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(parent,  node.getNext());	  return    computeFallThrough(node.getNext());    return    computeFallThrough(fromNode.getNext());    	compilable	  [FE]  RuntimeException  	126	8	replace
944	[BUG]  [BUGGY]  return  computeFollowNode(parent,  node.getNext());  [FE]  RuntimeException  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent,  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent,  node.getNext());	  return    computeFallThrough(node.getNext());    return    computeFallThrough(fromNode.getNext());    	compilable	  [FE]  RuntimeException  	126	8	replace
945	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getNext();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
946	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getNext();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
947	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getParent();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getParent();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
948	[BUG]  [BUGGY]  Node  body  =  node.getParent();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getParent();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getParent();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
949	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(node,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
950	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getParent(),  finallyMap);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	140	None	replace
951	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,int,ControlFlowAnalysis,Node)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  astPositionCounter,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,int,ControlFlowAnalysis,Node)	6	None	replace
952	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  priorityCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,int)  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  priorityCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  fromNode,  priorityCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,int)	6	None	replace
953	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  preconditions.checkState(parent.getType()  ==  Token.FOR);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  preconditions.checkState(parent.getType()  ==  Token.FOR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  preconditions.checkState(parent.getType()  ==  Token.FOR);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
954	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	186	None	add
955	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstMap);  [CE]  cannot  find  symbol  firstMap  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  firstMap);	  NodeTraversal.traverse(compiler,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  firstMap	69	None	replace
956	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext(),  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node.getNext(),  parent);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	94	None	replace
957	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent,  exceptionHandler);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node.getNext(),  parent,  exceptionHandler);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
958	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  body);  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  body);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  cannot  find  symbol  body	30	None	replace
959	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  source);  [CE]  cannot  find  symbol  source  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  source);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  source);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  cannot  find  symbol  source	30	None	replace
960	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	241	8	replace
961	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(parent);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	241	8	replace
962	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(node);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.removeChild(node);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	241	None	replace
963	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
964	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
965	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getParent();  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getParent();  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
966	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	add
967	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  node.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  node.removeChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  node.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	80	None	add
968	[BUG]  [BUGGY]  Node  body  =  node.getNext();  AssertionFailedError  <  Node>  body  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  AssertionFailedError  <  Node>  body  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  AssertionFailedError  <  Node>  body  =  parent.getNext();	          Node    body    =    node.getNext();    AssertionFailedError    <    Node>    body    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
969	[BUG]  [BUGGY]  Node  body  =  toNode.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  toNode.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  toNode.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();	          Node    body    =    node.getNext();    AssertionFailedError    <    Node>    body    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol  toNode	168	None	replace
970	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Node  parent  =  parent.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	add
971	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  fromNode);	  return    computeFallThrough(node,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	217	None	replace
972	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
973	[BUG]  [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getfirstChild();  Node  head  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();  Node  body  =  node.getfirstChild();  Node  head  =  node.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getLastChild();        Node    head    =    node.getLastChild();    Node  body  =  node.getfirstChild();  Node  head  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	61	None	add
974	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,int)	162	None	replace
975	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	192	None	replace
976	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFollowNode(fromNode.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFollowNode(fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    return  computeFollowNode(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	112	None	add
977	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	112	None	add
978	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  this.lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  this.lastJump);	  return    computeFollowNode(fromNode,    parent,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  lastJump	144	None	replace
979	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  Node  head  =  node.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    AssertionFailedError  <  Node>  body  =  node.getNext();  Node  head  =  node.getNext();	  	non-compiled	[CE]  cannot  find  symbol	122	None	add
980	[BUG]  [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  node.getNext();  Node  Head  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    body    =    node.getNext();    Node  head  =  node.getNext();  Node  body  =  node.getNext();  Node  Head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        body        =        node.getNext();        Node    head    =    node.getNext();    Node  body  =  node.getNext();  Node  Head  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	122	None	add
981	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  body);  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  body);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	77	None	replace
982	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,Multimap<Node,Node>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node,Multimap<Node,Node>)	77	None	replace
983	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  node,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	77	None	replace
984	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  fromNode,  parent,  nodePriorities);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node.getNext(),  fromNode,  parent,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node.getNext(),  fromNode,  parent,  nodePriorities);	  return    computeFallThrough(node.getNext(),    fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	93	None	replace
985	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)	103	None	replace
986	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  priorities);  [CE]  cannot  find  symbol  priorities  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  priorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities,  priorities);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  priorities	103	None	replace
987	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode,  this);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node,    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	193	None	replace
988	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  fromNode,  this);	          NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph    <    Node>    nodeTraversal    =    compiler.getNodeTraversal(compiler,    node,    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	193	None	replace
989	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
990	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
991	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getParent());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()!=  node);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	208	None	add
992	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  sourceFile);  [CE]  cannot  find  symbol  sourceFile  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  sourceFile);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  sourceFile);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  sourceFile	237	None	replace
993	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  iter);  [CE]  cannot  find  symbol  iter  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  iter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  iter);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  iter	237	None	replace
994	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(child);  [CE]  cannot  find  symbol  child  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(child);	  	non-compiled	[CE]  cannot  find  symbol  child	231	None	add
995	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(getNode());  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(getNode());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(getNode());	  	non-compiled	[CE]  cannot  find  symbol	231	None	add
996	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  body);  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  body);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  cannot  find  symbol  body	215	None	replace
997	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,int)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,int)	215	None	replace
998	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Map<Node,Integer>)  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode,  astPosition);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  fromNode,  astPosition);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node,Map<Node,Integer>)	5	None	replace
999	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  priorityCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,int)  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  priorityCounter);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition,  priorityCounter);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,int)	5	None	replace
1000	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getParent();  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent);  Node  node  =  parent.getParent();	  return    computeFollowNode(fromNode,    node);    Node    node    =    parent.getParent();    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	134	None	replace
1001	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(parent.getNext(),  node);	  return    computeFallThrough(parent.getNext(),    node);    	compilable	  [FE]  StackOverflowError  	92	8	replace
1002	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext(),  node);  [FE]  StackOverflowError  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext(),  node);	  return    computeFallThrough(parent.getNext(),    node);    	compilable	  [FE]  StackOverflowError  	92	8	replace
1003	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext(),  fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext(),  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext(),  fromNode,  parent);	  return    computeFallThrough(parent.getNext(),    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	92	None	replace
1004	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  child);  [CE]  cannot  find  symbol  child  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  child);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  child	29	None	replace
1005	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  this);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	29	None	replace
1006	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  toNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  toNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  toNode	26	None	replace
1007	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  thenBlock);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	137	None	replace
1008	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  finallyMap);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  finallyMap);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  finallyMap);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	137	None	replace
1009	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	100	None	replace
1010	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  int  priorityCounter);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  int  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  int  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  '.class'  expected	100	None	replace
1011	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  priorityCounter,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  priorityCounter,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  priorityCounter,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,int)	100	None	replace
1012	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	196	8	add
1013	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.GETPROP);	  	compilable	  [FE]  RuntimeException  	196	8	add
1014	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
1015	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  AssertionFailedError  <  Node>  body  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  AssertionFailedError  <  Node>  body  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    AssertionFailedError  <  Node>  body  =  parent.getNext();	  	non-compiled	[CE]  cannot  find  symbol	31	None	add
1016	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
1017	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
1018	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  node);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	31	None	add
1019	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap);	  NodeTraversal.traverse(compiler,    node,    parents);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Node,Node>)	67	None	replace
1020	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parents.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Node  body  =  parents.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Node  body  =  parents.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	33	None	add
1021	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getParent();	          Node    body    =    node.getNext();    Node    body    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	120	3	replace
1022	[BUG]  [BUGGY]  Node  body  =  fromNode.getParent();  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getParent();	          Node    body    =    node.getNext();    Node    body    =    node.getParent();    	compilable	  [FE]  AssertionFailedError  	120	3	replace
1023	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
1024	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getParent();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
1025	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
1026	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
1027	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Node  nextSibling  =  node.getParent();  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	201	None	add
1028	[BUG]  [BUGGY]  return  computeFollowNode(parent,  fromNode,  node.getFirstChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent,  fromNode,  node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent,  fromNode,  node.getFirstChild());	  return    computeFollowNode(fromNode,    node,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	102	None	replace
1029	[BUG]  [BUGGY]  return  computeFollowNode(parent,  fromNode,  parent.getFirstChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent,  fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent,  fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    node,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	102	None	replace
1030	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  root,  parent);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	66	None	replace
1031	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  toNode,  parent);  [CE]  cannot  find  symbol  toNode  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  toNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  toNode,  parent);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol  toNode	66	None	replace
1032	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  cannot  find  symbol  nextSibling  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  cannot  find  symbol  nextSibling	182	None	replace
1033	[BUG]  [BUGGY]  Node  body  =  node.getParent();  this.lastJump  =  node.getLastJump();  [CE]  cannot  find  symbol  lastJump  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getParent();  this.lastJump  =  node.getLastJump();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getParent();  this.lastJump  =  node.getLastJump();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    this.lastJump    =    node.getLastJump();    	non-compiled	[CE]  cannot  find  symbol  lastJump	170	None	replace
1034	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
1035	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,int)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis,int)	242	None	replace
1036	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  body);  [CE]  cannot  find  symbol  body  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  body);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  cannot  find  symbol  body	242	None	replace
1037	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    this);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	242	None	replace
1038	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  return  computeFollowNode(fromNode,  node.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    return  computeFollowNode(fromNode,  node.getNext());	  	non-compiled	[CE]  unreachable  statement	163	None	add
1039	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  NodeTraversal.traverse(compiler,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  NodeTraversal.traverse(compiler,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    NodeTraversal.traverse(compiler,  node,  thenBlock);	  	non-compiled	[CE]  cannot  find  symbol  thenBlock	163	None	add
1040	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  node  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	163	None	add
1041	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getFirstChild()!=  node.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
1042	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getLastChild()!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getLastChild()!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getLastChild()!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
1043	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();	          Node    nextSibling    =    node.getNext();    AssertionFailedError    <    Node>    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1044	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  body,  cfg);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  body,  cfg);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  body,  cfg);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  cannot  find  symbol  body	116	None	replace
1045	[BUG]  [BUGGY]  Node  body  =  node.getlastChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getlastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getlastChild();	  Node    body    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1046	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext());	  	non-compiled	[CE]  unreachable  statement	165	None	add
1047	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent.getNext());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent.getNext());	  	non-compiled	[CE]  unreachable  statement	165	None	add
1048	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getNext());    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  unreachable  statement	165	None	add
1049	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1050	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  Node  body  =  node.getNext();  [FE]  RuntimeException  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1051	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1052	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  body  =  node.getNext();  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1053	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1054	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  body  =  node.getNext();  [FE]  RuntimeException  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1055	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1056	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  body  =  node.getNext();  [FE]  RuntimeException  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  body  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.VAR);  Node  body  =  node.getNext();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    	compilable	  [FE]  RuntimeException  	119	8	replace
1057	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    node.getNext();    	compilable	  [FE]  RuntimeException  	136	8	replace
1058	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);  [FE]  RuntimeException  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  return  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    node.getNext();    	compilable	  [FE]  RuntimeException  	136	8	replace
1059	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	101	None	replace
1060	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  this,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    this);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	215	None	replace
1061	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
1062	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
1063	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
1064	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
1065	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
1066	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.GETPROP));    	compilable	  [FE]  RuntimeException  	185	8	replace
1067	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  body,  nodePriorities);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  body,  nodePriorities);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  body,  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  body	103	None	replace
1068	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  child);  [CE]  cannot  find  symbol  child  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  child);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,    parent);    NodeUtil.removeChild(parent,  child);	  	non-compiled	[CE]  cannot  find  symbol  child	85	None	add
1069	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  body);  [CE]  cannot  find  symbol  body  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  body);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  body	91	None	replace
1070	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  finallyMap);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  finallyMap);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	91	None	replace
1071	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  firstMap);  [CE]  cannot  find  symbol  firstMap  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node,  this,  firstMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this,  firstMap);	  NodeUtil.removeChild(parent,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  firstMap	91	None	replace
1072	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  TraverseTraversal.traverse(compiler,  node,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	TraverseTraversal.traverse(compiler,  node,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	38	None	replace
1073	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
1074	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	14	8	add
1075	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	14	8	add
1076	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	14	8	add
1077	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	14	8	add
1078	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	14	8	add
1079	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	14	8	add
1080	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	14	8	add
1081	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	14	8	add
1082	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    nextSibling    =    node.getNext();    Node    nextSibling    =    node.getNext();    if(nextSibling!=    null)    {    return    computeFallThrough(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	160	None	replace
1083	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode,  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent,  fromNode,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  fromNode,  parent,  node);	  return    computeFallThrough(parent,    fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	147	None	replace
1084	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent,  fromNode,  node,  firstSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  fromNode,  node,  firstSibling);	  return    computeFallThrough(parent,    fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	147	None	replace
1085	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    fromNode,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	3	8	add
1086	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    fromNode,    this);    Preconditions.checkArgument(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  StackOverflowError  	3	8	add
1087	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1088	[BUG]  [BUGGY]  Node  parent  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  parent  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	          Node    nextSibling    =    parent.getNext();    AssertionFailedError    <    Node>    nextSibling    =    parent.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	183	None	replace
1089	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	28	None	add
1090	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
1091	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1092	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(parent!=  null);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1093	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1094	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(node.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1095	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.THIS);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(node.getType()  ==  Token.THIS);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1096	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.THIS);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.THIS);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(node.getType()  ==  Token.THIS);  NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1097	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.NAME);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(node.getType()  ==  Token.NAME);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1098	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.NAME);  parent.replaceChild(fromNode,  node);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  Preconditions.checkState(node.getType()  ==  Token.NAME);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,    parent,    this);    Preconditions.checkState(node.getType()  ==  Token.NAME);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  StackOverflowError  	1	8	add
1099	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  fromNode.getNext();  Node  body  =  fromNode.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    fromNode.getNext();    Node  body  =  fromNode.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	35	None	add
1100	[BUG]  [BUGGY]  Node  body  =  node.getNext();  this.lastJump  =  parent.getLastJump();  [CE]  cannot  find  symbol  lastJump  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  this.lastJump  =  parent.getLastJump();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  this.lastJump  =  parent.getLastJump();	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    this.lastJump    =    node.getLastJump();    	non-compiled	[CE]  cannot  find  symbol  lastJump	170	None	replace
1101	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  nextSibling);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  nextSibling);	  	non-compiled	[CE]  unreachable  statement	106	None	add
1102	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  return  computeFollowNode(fromNode.getParent());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  return  computeFollowNode(fromNode.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    return  computeFollowNode(fromNode.getParent());	  	non-compiled	[CE]  unreachable  statement	106	None	add
1103	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext());  Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(fromNode.getNext());    Node  nextSibling  =  node.getNext();  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	106	None	add
1104	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  parent.getFirstChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  parent.getFirstChild(),  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    node,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	102	None	replace
1105	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkArgument(NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkArgument(NodeUtil.hasFinally(parent));	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
1106	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkArgument(NodeUtil.hasFinally(parent));  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkArgument(NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkArgument(NodeUtil.hasFinally(parent));	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
1107	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
1108	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  NodeUtil.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	25	8	replace
1109	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node,  parent,  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node,  parent,  fromNode);	  return    computeFallThrough(parent,    node,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	218	None	replace
1110	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext(),  fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  fromNode,  parent);	  return    computeFallThrough(node.getNext(),    fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	93	None	replace
1111	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode,  node.getParent());	  return    computeFollowNode(fromNode,    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	236	3	replace
1112	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getParent());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node.getParent());	  return    computeFollowNode(fromNode,    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	236	3	replace
1113	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	162	None	replace
1114	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  body);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap,  body);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  body	162	None	replace
1115	[BUG]  [BUGGY]  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	169	None	replace
1116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	169	3	replace
1117	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body    ==    null)    {    return    computeFollowNode(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	169	3	replace
1118	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getNext();  Node  nextSibling  =  parent.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    fromNode.getNext();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	16	None	add
1119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  body);  [CE]  cannot  find  symbol  body  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  finallyMap,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  finallyMap,  body);	  NodeTraversal.traverse(compiler,    node,    this,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  body	237	None	replace
1120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body,  fromNode);  [CE]  cannot  find  symbol  body  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  body,  fromNode);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  cannot  find  symbol  body	7	None	replace
1121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,Node)  [FE]                  StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition,  fromNode);	  NodeTraversal.traverse(compiler,    node,    this,    fromNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>,Node)	7	None	replace
1122	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  TraverseTraversal  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  TraverseTraversal.traverse(compiler,  parent,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	TraverseTraversal.traverse(compiler,  parent,  this);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  cannot  find  symbol  TraverseTraversal	45	None	replace
1123	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext());  Node  nextSibling  =  parent.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	219	None	replace
1124	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext());  Node  nextSibling  =  node.getFirstChild();	  return    computeFallThrough(node.getNext());    Node    nextSibling    =    parent.getFirstChild();    	non-compiled	[CE]  unreachable  statement	219	None	replace
1125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	171	3	replace
1126	[BUG]  [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	171	3	replace
1127	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  parent  =  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	parent  =  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	131	8	replace
1128	[BUG]  [BUGGY]  parent  =  computeFollowNode(fromNode,  parent);  [FE]  RuntimeException  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  parent  =  computeFollowNode(fromNode,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	parent  =  computeFollowNode(fromNode,  parent);	  return    computeFollowNode(fromNode,    node);    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	131	8	replace
1129	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	70	8	add
1130	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	70	8	add
1131	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	70	8	add
1132	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	70	8	add
1133	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	8	add
1134	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	70	8	add
1135	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    parent.getFirstChild());    Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	206	None	add
1136	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AssertionFailedError  <  Node>  nextSibling  =  node.getNext();	          Node    nextSibling    =    node.getNext();    AssertionFailedError    <    Node>    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	158	None	replace
1137	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode.getNext(),  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  node,  thenBlock);	  return    computeFallThrough(fromNode.getNext(),    fromNode);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	90	None	replace
1138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	189	6	replace
1139	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	189	6	replace
1140	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	189	6	replace
1141	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	189	6	replace
1142	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	182	None	replace
1143	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(nextSibling));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(nextSibling));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(nextSibling));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	182	None	replace
1144	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(node));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(node));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  parent.replaceChild(parent,  NodeUtil.hasFinally(node));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.NAME);    parent.replaceChild(nextSibling,    NodeUtil.hasFinally(parent));    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	182	None	replace
1145	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  thenBlock);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  parent,  thenBlock);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent,  thenBlock);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
1146	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  nextSibling);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  node.getNext(),  nextSibling);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  nextSibling);	  Node    fromNode    =    node.getNext(),    parent);    	non-compiled	[CE]  ';'  expected	97	None	replace
1147	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  body);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getParent(),  body);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  cannot  find  symbol  body	140	None	replace
1148	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getNext(),  body);  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getNext(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getNext(),  body);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  cannot  find  symbol  body	140	None	replace
1149	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  this);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getParent(),  this);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	140	None	replace
1150	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent(),  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getParent(),  thenBlock);	  return    computeFallThrough(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  cannot  find  symbol  thenBlock	140	None	replace
1151	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  else  {  return  computeFallThrough(node.getNext());  }	  return    computeFallThrough(node.getNext());    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	154	3	replace
1152	[BUG]  [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  else  {  return  computeFallThrough(node.getNext());  }  [FE]  AssertionFailedError  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  else  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  else  {  return  computeFallThrough(node.getNext());  }	  return    computeFallThrough(node.getNext());    return    computeFollowNode(fromNode,    parent);    	compilable	  [FE]  AssertionFailedError  	154	3	replace
1153	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getNext(),  fromNode.getNext());	  return    computeFallThrough(node.getNext());    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	125	8	replace
1154	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  fromNode.getNext());  [FE]  RuntimeException  [FE]        RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  fromNode.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext(),  fromNode.getNext());	  return    computeFallThrough(node.getNext());    Node    parent    =    node.getParent();    	compilable	  [FE]  RuntimeException  	125	8	replace
1155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getFirstChild();	  Node    nextSibling    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	3	replace
1156	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getFirstChild();	  Node    nextSibling    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	65	3	replace
1157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  exceptionHandler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Deque<Node>)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  exceptionHandler);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Deque<Node>)	66	None	replace
1158	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(node);  NodeUtil.removeChild(parent,  node);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(node);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(node);  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
1159	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	24	8	add
1160	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);  NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	24	8	add
1161	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(parent,  fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
1162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(parent,  fromNode);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(parent,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(parent,  fromNode);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    	compilable	  [FE]  StackOverflowError  	42	8	replace
1163	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	AssertionFailedError  <  Node>  body  =  node.getFirstChild();	          Node    body    =    node.getFirstChild();    AssertionFailedError    <    Node>    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	188	None	replace
1164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    nextSibling    =    node.getParent();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  AssertionFailedError  	201	3	add
1165	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getParent();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  AssertionFailedError  	201	3	add
1166	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg,  body);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfg,  body);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  cannot  find  symbol  body	116	None	replace
1167	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg,  astPosition);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>,Map<Node,Integer>)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg,  astPosition);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfg,  astPosition);	  return    computeFollowNode(fromNode,    parent,    node,    cfg);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>,Map<Node,Integer>)	116	None	replace
1168	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
1169	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	80	8	add
1170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	80	8	add
1171	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	80	8	add
1172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent  =  node.getParent();	  	compilable	  [FE]  AssertionFailedError  	80	5	add
1173	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent  =  node.getParent();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent  =  node.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent  =  node.getParent();	  	compilable	  [FE]  AssertionFailedError  	80	5	add
1174	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	231	8	add
1175	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(parent,  node);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	231	8	add
1176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  node  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  node  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	231	3	add
1177	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  node  =  parent.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  node  =  parent.getParent();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  node  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	231	3	add
1178	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  body);  [CE]  cannot  find  symbol  body  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);    NodeUtil.redeclareVarsInsideBranch(node);  parent.replaceChild(fromNode,  body);	  	non-compiled	[CE]  cannot  find  symbol  body	231	None	add
1179	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getFirstChild();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
1180	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  Node  head  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  Node  head  =  node.getNext();	          Node    body    =    node.getNext();    Node    head    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	123	3	replace
1181	[BUG]  [BUGGY]  Node  fromNode  =  nextSibling.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  fromNode  =  nextSibling.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  nextSibling.getNext();	  Node    fromNode    =    parent.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	96	None	replace
1182	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  name);  [CE]  cannot  find  symbol  name  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  name);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  name);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    child);    	non-compiled	[CE]  cannot  find  symbol  name	30	None	replace
1183	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
1184	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
1185	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling  ==  null)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
1186	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
1187	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	199	None	add
1188	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  node.getParent();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  node.getParent();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    Node  nextSibling  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	112	None	add
1189	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(node.getNext());  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(node.getNext());    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	112	None	add
1190	[BUG]  [BUGGY]  node.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  node.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	node.removeChild(parent,  node);  parent.removeChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	198	None	replace
1191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]        StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  node);	  NodeTraversal.traverse(compiler,    node,    this,    toNode);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	150	None	replace
1192	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getParent()  ==  node);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
1193	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	210	None	add
1194	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	234	3	replace
1195	[BUG]  [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body    ==    null)    {    return    computeFallThrough(body);    }    	compilable	  [FE]  AssertionFailedError  	234	3	replace
1196	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  body);  [CE]  cannot  find  symbol  body  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  node,  body);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	76	None	replace
1197	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  body);  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  body);	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  body	141	None	replace
1198	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  this);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild(),  this);	  return    computeFallThrough(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	141	None	replace
1199	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	196	8	add
1200	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.EXPR_RESULT);	  	compilable	  [FE]  RuntimeException  	196	8	add
1201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this,  finallyMap);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this,  finallyMap);	  NodeTraversal.traverse(compiler,    fromNode,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)	4	None	replace
1202	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getFirstChild();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
1203	[BUG]  [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        parent.getNext();        Preconditions.checkState(nextSibling    ==    parent.getFirstChild());    Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	204	None	add
1204	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          Node    body    =    node.getLastChild();    Node    body    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	59	8	replace
1205	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	          Node    body    =    node.getLastChild();    Node    body    =    node.getFirstChild();    	compilable	  [FE]  RuntimeException  	59	8	replace
1206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  this.lastJump);  [CE]  cannot  find  symbol  lastJump  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  this.lastJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  node,  this.lastJump);	  return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  lastJump	155	None	replace
1207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]            RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  node,  thenBlock);	  return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	155	None	replace
1208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]              RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  node,  this);	  return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	155	None	replace
1209	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  nextSibling  =  parent.getParent();  return  computeFollowNode(fromNode,  parent.getParent());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  Node  nextSibling  =  parent.getParent();  return  computeFollowNode(fromNode,  parent.getParent());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    parent.getParent());    Node  nextSibling  =  parent.getParent();  return  computeFollowNode(fromNode,  parent.getParent());	  	non-compiled	[CE]  unreachable  statement	235	None	add
1210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	compilable	  [FE]  RuntimeException  	29	8	replace
1211	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  fromNode);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  fromNode);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	compilable	  [FE]  RuntimeException  	29	8	replace
1212	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.replaceChild(parent,  node);  parent.replaceChild(fromNode,  node);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.replaceChild(fromNode,    node);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
1213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  return  computeFallThrough(fromNode,  parent);  [CE]  cannot  find  symbol  body  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  body);  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  body);  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  body	192	None	replace
1214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  return  computeFallThrough(fromNode,  parent);  [CE]  illegal  start  of  expression  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  return  computeFallThrough(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  return  computeFallThrough(fromNode,  parent);	          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,    node,    this);    return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  illegal  start  of  expression	192	None	replace
1215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	209	3	replace
1216	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getParent());	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling    ==    parent.getParent());    	compilable	  [FE]  AssertionFailedError  	209	3	replace
1217	[BUG]  [BUGGY]  Node  body  =  toNode.getLastChild();  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  toNode.getLastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  toNode.getLastChild();	          Node    body    =    node.getLastChild();    Node    body    =    parent.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  toNode	60	None	replace
1218	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nextSibling,  node);  [CE]  cannot  find  symbol  nextSibling  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  nextSibling,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  nextSibling,  node);	  return    computeFollowNode(fromNode,    parent,    node,    toSibling);    	non-compiled	[CE]  cannot  find  symbol  nextSibling	118	None	replace
1219	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
1220	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  parent.replaceChild(parent,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
1221	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
1222	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(node,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
1223	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
1224	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getNext();  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	          Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()    ==    Token.FUNCTION);    parent.replaceChild(nextSibling,    new    Node(Token.FOR));    	compilable	  [FE]  RuntimeException  	187	8	replace
1225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstBlock);  [CE]  cannot  find  symbol  firstBlock  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstBlock);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  firstBlock);	  NodeTraversal.traverse(compiler,    node,    body);    	non-compiled	[CE]  cannot  find  symbol  firstBlock	142	None	replace
1226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	239	8	replace
1227	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);	          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    	compilable	  [FE]  RuntimeException  	239	8	replace
1228	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  return  computeFallThrough(node.getNext());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  return  computeFallThrough(node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    return  computeFallThrough(node.getNext());	  	non-compiled	[CE]  unreachable  statement	104	None	add
1229	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext());    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	104	None	add
1230	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  body);  [CE]  cannot  find  symbol  body  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild(),  body);	  return    computeFollowNode(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  body	79	None	replace
1231	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node.getLastChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node.getLastChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node.getLastChild());	  return    computeFollowNode(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	79	None	replace
1232	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent.getFirstChild());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent.getFirstChild());	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1233	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent,  node.getFirstChild());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFowThrough(fromNode,  parent,  node.getFirstChild());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent,  node.getFirstChild());	  return    computeFowThrough(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1234	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getParent(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getParent(),  parent);	  return    computeFallThrough(node.getNext());    return    computeFallThrough(fromNode.getNext());    	compilable	  [FE]  AssertionFailedError  	126	3	replace
1235	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getParent(),  parent);  [FE]  AssertionFailedError  [FE]          RuntimeException      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getParent(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getParent(),  parent);	  return    computeFallThrough(node.getNext());    return    computeFallThrough(fromNode.getNext());    	compilable	  [FE]  AssertionFailedError  	126	3	replace
1236	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  nextSibling);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  nextSibling);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  nextSibling	137	None	replace
1237	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  body);  [CE]  cannot  find  symbol  body  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node,  body);	  return    computeFallThrough(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  body	137	None	replace
1238	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  fromNode.getNext(),  parent,  exceptionHandler);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  fromNode.getNext(),  parent,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  fromNode.getNext(),  parent,  exceptionHandler);	  return    computeFallThrough(fromNode,    node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	94	None	replace
1239	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling  ==  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling    ==    null);    Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling  ==  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	227	None	add
1240	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node.getNext());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  node.getNext());	  return    computeFollowNode(fromNode,    parent,    node.getNext());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	161	None	replace
1241	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getLastChild());  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getLastChild());  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  nextSibling  =  node.getLastChild());	  	non-compiled	[CE]  ';'  expected	64	None	add
1242	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getlastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  node.getLastChild();  Node  nextSibling  =  node.getlastChild();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    node.getLastChild();    Node  nextSibling  =  node.getlastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	64	None	add
1243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  body,  root);  [CE]  cannot  find  symbol  body  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  body,  root);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  body,  root);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  cannot  find  symbol  body	143	None	replace
1244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  root,  this);	  NodeTraversal.traverse(compiler,    node,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,ControlFlowAnalysis)	143	None	replace
1245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Preconditions.checkState(parent!=  null);	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    }    else    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	22	3	replace
1246	[BUG]  [BUGGY]  Preconditions.checkState(parent!=  null);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Preconditions.checkState(parent!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Preconditions.checkState(parent!=  null);	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    }    else    if(body    ==    null)    {    return    computeFallThrough(fromNode,    parent);    }    	compilable	  [FE]  AssertionFailedError  	22	3	replace
1247	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  child);  [CE]  cannot  find  symbol  child  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  child);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  child);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  cannot  find  symbol  child	77	None	replace
1248	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  body,  node);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  body,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  body,  node);	  return    computeFollowNode(fromNode,    parent,    node.getNext(),    node);    	non-compiled	[CE]  cannot  find  symbol  body	77	None	replace
1249	[BUG]  [BUGGY]  return  calculateFollowNode(fromNode,  parent,  node);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  calculateFollowNode(fromNode,  parent,  node);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  calculateFollowNode(fromNode,  parent,  node);	  return    computeFollowNode(fromNode,    node,    parent);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
1250	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  body  =  node.getLastChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  unreachable  statement	163	None	add
1251	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext());	  	non-compiled	[CE]  unreachable  statement	163	None	add
1252	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	163	None	add
1253	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	163	None	add
1254	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  nextSibling  =  parent.getNext();  return  computeFallThrough(node.getNext());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  Node  nextSibling  =  parent.getNext();  return  computeFallThrough(node.getNext());  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node.getNext());    Node  nextSibling  =  parent.getNext();  return  computeFallThrough(node.getNext());	  	non-compiled	[CE]  unreachable  statement	163	None	add
1255	[BUG]  [BUGGY]  Node  parent  =  node.getParentNode();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  parent  =  node.getParentNode();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  node.getParentNode();	  Node    parent    =    fromNode.getNext();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	10	None	replace
1256	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Deque<Node>)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Deque<Node>)	78	None	replace
1257	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter,  priorityComparator);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  astPositionCounter,  priorityComparator);	  return    computeFollowNode(fromNode,    parent,    node.getParent(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Comparator<DiGraphNode<Node,Branch>>)	78	None	replace
1258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  child  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  child  =  node.getNext();	  Node    nextSibling    =    child.getNext();    	compilable	  [FE]  AssertionFailedError  	195	3	replace
1259	[BUG]  [BUGGY]  Node  child  =  node.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  child  =  node.getNext();  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  child  =  node.getNext();	  Node    nextSibling    =    child.getNext();    	compilable	  [FE]  AssertionFailedError  	195	3	replace
1260	[BUG]  [BUGGY]  nodeTraversal.traverse(compiler,  parent,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  nodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	nodeTraversal.traverse(compiler,  parent,  this);	  return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	132	None	replace
1261	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Deque<Node>)  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int,Deque<Node>)	100	None	replace
1262	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  int  priorityCounter);  [CE]  '.class'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  int  priorityCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter,  int  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    astPositionCounter);    	non-compiled	[CE]  '.class'  expected	100	None	replace
1263	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(parent.getNext(),  fromNode);	  return    computeFollowNode(fromNode.getNext(),    parent);    	compilable	  [FE]  RuntimeException  	153	8	replace
1264	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext(),  fromNode);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(parent.getNext(),  fromNode);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext(),  fromNode);	  return    computeFollowNode(fromNode.getNext(),    parent);    	compilable	  [FE]  RuntimeException  	153	8	replace
1265	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  body);  [CE]  cannot  find  symbol  body  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  body);	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  body	139	None	replace
1266	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild(),  thenBlock);	  return    computeFallThrough(fromNode,    parent,    node.getLastChild());    	non-compiled	[CE]  cannot  find  symbol  thenBlock	139	None	replace
1267	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstJump);  [CE]  cannot  find  symbol  firstJump  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstJump);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstJump);	  return    computeFollowNode(fromNode,    parent,    node,    firstSibling);    	non-compiled	[CE]  cannot  find  symbol  firstJump	115	None	replace
1268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFallThrough(body.getNext());    }    	compilable	  [FE]  AssertionFailedError  	229	3	replace
1269	[BUG]  [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFallThrough(body.getNext());    }    	compilable	  [FE]  AssertionFailedError  	229	3	replace
1270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFallThrough(body.getNext());    }    	compilable	  [FE]  AssertionFailedError  	229	3	replace
1271	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }	          Node    body    =    node.getNext();    Node    body    =    node.getNext();    if(body!=    null)    {    return    computeFallThrough(body.getNext());    }    	compilable	  [FE]  AssertionFailedError  	229	3	replace
1272	[BUG]  [BUGGY]  if(parent!=  null)  {  Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  if(parent!=  null)  {  Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	if(parent!=  null)  {  Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	          Node    body    =    node.getFirstChild();    Node    body    =    node.getFirstChild();    if(body!=    null)    {    return    computeFollowNode(fromNode,    parent);    }    	non-compiled	[CE]  'else'  without  'if'	21	None	replace
1273	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  NodeUtil.addChildToFront(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    NodeUtil.addChildToFront(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	83	None	add
1274	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,    parent);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	83	8	add
1275	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeUtil.removeChild(parent,  parent);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,    parent);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	83	8	add
1276	[BUG]  [BUGGY]  return  computeFallThrough(node,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFallThrough(node,  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node,  parent);	  return    computeFallThrough(parent,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	52	None	replace
1277	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	238	8	add
1278	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	238	8	add
1279	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	238	8	add
1280	[BUG]  [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeUtil.removeChild(parent,        node);        Preconditions.checkState(parent.getType()    ==    Token.BLOCK);    parent.removeChild(node);    NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.replaceChild(parent,  node);	  	compilable	  [FE]  RuntimeException  	238	8	add
1281	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  exceptionHandler,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  exceptionHandler,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  exceptionHandler,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Deque<Node>,int)	114	None	replace
1282	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  init,  astPositionCounter);  [CE]  cannot  find  symbol  init  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  init,  astPositionCounter);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  init,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol  init	114	None	replace
1283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  body);  [CE]  cannot  find  symbol  body  [FE]            StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPosition,  body);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  astPosition,  body);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  cannot  find  symbol  body	5	None	replace
1284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  nextSibling);  [CE]  cannot  find  symbol  nextSibling  [FE]              StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition,  nextSibling);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition,  nextSibling);	  NodeTraversal.traverse(compiler,    node,    this,    astPosition);    	non-compiled	[CE]  cannot  find  symbol  nextSibling	5	None	replace
1285	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	213	None	replace
1286	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  body);  [CE]  cannot  find  symbol  body  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  body);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  body	213	None	replace
1287	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  exceptionHandler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Deque<Node>)  [FE]                    AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  exceptionHandler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap,  exceptionHandler);	  return    computeFollowNode(fromNode,    parent,    node,    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Deque<Node>)	213	None	replace
1288	[BUG]  [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(fromNode,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(fromNode,  this);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                NodeTraversal.traverse(compiler,        node,        this);        NodeTraversal.traverse(compiler,    node,    this);    parent.removeChild(fromNode);    NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.replaceChild(fromNode,  this);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	41	None	add
1289	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	72	None	add
1290	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    nextSibling    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	12	8	add
1291	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getLastChild();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    nextSibling    =    parent.getLastChild();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	12	8	add
1292	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  body);  [CE]  cannot  find  symbol  body  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  body);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  body);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  body	173	None	replace
1293	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  thenBlock);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	173	None	replace
1294	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  astPosition);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<Node,Integer>)  [FE]                AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  astPosition);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  astPosition);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,Map<Node,Integer>)	173	None	replace
1295	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  compiler);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,AbstractCompiler)  [FE]                  AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  compiler);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap,  compiler);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild(),    finallyMap);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>,AbstractCompiler)	173	None	replace
1296	[BUG]  [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling!=  null);  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	                Node        nextSibling        =        node.getNext();        Preconditions.checkState(nextSibling!=    null);    Node  nextSibling  =  node.getParent();  Preconditions.checkState(nextSibling!=  null);	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	225	None	add
1297	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  NodeUtil.removeChild(parent)  {  return  computeFallThrough(fromNode.getNext(),  parent);  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  NodeUtil.removeChild(parent)  {  return  computeFallThrough(fromNode.getNext(),  parent);  }  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    NodeUtil.removeChild(parent)  {  return  computeFallThrough(fromNode.getNext(),  parent);  }	  	non-compiled	[CE]  ';'  expected	152	None	add
1298	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  body  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	152	None	add
1299	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    Node  nextSibling  =  node.getNext();  return  computeFallThrough(nextSibling.getNext(),  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	152	None	add
1300	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  NodeUtil.removeChild(parent)  {  return  computeFallThrough(fromNode.getNext(),  parent);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  NodeUtil.removeChild(parent)  {  return  computeFallThrough(fromNode.getNext(),  parent);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode.getNext(),    parent);    NodeUtil.removeChild(parent)  {  return  computeFallThrough(fromNode.getNext(),  parent);	  	non-compiled	[CE]  ';'  expected	152	None	add
1301	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getNext();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  RuntimeException  	31	8	add
1302	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  Preconditions.checkState(body!=  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getNext();  Preconditions.checkState(body!=  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getNext();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  RuntimeException  	31	8	add
1303	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent);  Preconditions.checkState(parent.getParent()!=  null);  [CE]  unreachable  statement  [FE]                StackOverflowError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  return  computeFollowNode(fromNode,  parent);  Preconditions.checkState(parent.getParent()!=  null);  [BUGGY]      }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent);  Preconditions.checkState(parent.getParent()!=  null);	  return    computeFollowNode(fromNode,    node);    Node    fromNode    =    parent.getParent();    	non-compiled	[CE]  unreachable  statement	135	None	replace
1304	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling    ==    null);    	compilable	  [FE]  RuntimeException  	228	8	replace
1305	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();  Preconditions.checkState(nextSibling  ==  null);	          Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling    ==    null);    	compilable	  [FE]  RuntimeException  	228	8	replace
1306	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	33	8	add
1307	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	33	8	add
1308	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	33	8	add
1309	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  	compilable	  [FE]  RuntimeException  	33	8	add
1310	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	33	8	add
1311	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	33	8	add
1312	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	33	8	add
1313	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.VAR);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.VAR);	  	compilable	  [FE]  RuntimeException  	33	8	add
1314	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	33	8	add
1315	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  Node  body  =  parent.getParent();  Preconditions.checkState(parent.getType()  ==  Token.CATCH);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node    body    =    parent.getParent();    Preconditions.checkState(parent.getType()  ==  Token.CATCH);	  	compilable	  [FE]  RuntimeException  	33	8	add
1316	[BUG]  [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [CE]  cannot  find  symbol  ParentUtil  [FE]            AssertionFailedError      [CONTEXT]      if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {      [BUGGY]  ParentUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [BUGGY]      return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	ParentUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);	          NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,    node);    parent.removeChild(fromNode,    parent);    	non-compiled	[CE]  cannot  find  symbol  ParentUtil	27	None	replace
