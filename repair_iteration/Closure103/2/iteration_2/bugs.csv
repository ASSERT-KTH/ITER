bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	19	8	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	19	8	replace
3	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeTraversal.traverse(compiler,  fromNode,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	19	8	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	19	8	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)	19	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	19	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  fromNode);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Node)	19	None	replace
8	[BUG]  [BUGGY]  Node  parent  =  fromNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  parent  =  fromNode.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  fromNode.getParent();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	replace
9	[BUG]  [BUGGY]  Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  parent  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  node.getNext();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	replace
10	[BUG]  [BUGGY]  Node  parent  =  fromNode.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  parent  =  fromNode.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  fromNode.getNext();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	replace
11	[BUG]  [BUGGY]  Node  parent  =  toNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  parent  =  toNode.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  parent  =  toNode.getParent();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	1	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getLastChild();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
13	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getLastChild();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getParent();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
15	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getParent();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  fromNode.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  fromNode.getNext();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
17	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  fromNode.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  fromNode.getNext();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
18	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
19	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
20	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
21	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
22	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  }  else  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  }  else  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  }  else  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }	  	non-compiled	[CE]  'else'  without  'if'	25	None	add
23	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	5	8	add
25	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	5	8	add
26	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  node);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	add
27	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	add
28	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	5	8	add
29	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	5	8	add
30	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  child);  [CE]  cannot  find  symbol  child  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  child);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode,  child);	  	non-compiled	[CE]  cannot  find  symbol  child	5	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getNext();	      Node    body    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	21	3	replace
32	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getNext();	      Node    body    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	21	3	replace
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getParent();	      Node    body    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	21	3	replace
34	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getParent();	      Node    body    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	21	3	replace
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  fromNode.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getNext();	      Node    body    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	21	3	replace
36	[BUG]  [BUGGY]  Node  body  =  fromNode.getNext();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  fromNode.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getNext();	      Node    body    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	21	3	replace
37	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	18	8	add
38	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	18	8	add
39	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  cfg  =  compiler.getAstControlFlowGraph();	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	18	None	add
40	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  cfg  =  compiler.getDefaultAstControlFlowGraph();	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	18	None	add
41	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	18	8	add
42	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  parent.removeChild(fromNode);	  	compilable	  [FE]  StackOverflowError  	18	8	add
43	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    nodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	18	None	add
44	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	18	8	add
45	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]              StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	18	8	add
46	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
47	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
48	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getPrevious();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getPrevious();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getPrevious();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
49	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
50	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  child.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  child.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  child.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
51	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	15	None	replace
52	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(parent,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	15	None	replace
53	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	add
54	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	add
55	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getPrevious();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getPrevious();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getPrevious();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	add
56	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  node.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	add
57	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  child.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  child.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  child.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	8	None	add
58	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
59	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
60	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	27	3	add
62	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  head  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  head  =  node.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	27	3	add
63	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  child.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  child.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  child.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getLastChild();	      Node    nextSibling    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	3	3	replace
65	[BUG]  [BUGGY]  Node  nextSibling  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getLastChild();	      Node    nextSibling    =    node.getNext();    	compilable	  [FE]  AssertionFailedError  	3	3	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parent);	      NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	17	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parents);  [CE]  cannot  find  symbol  parents  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  parents);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  parents);	      NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  parents	17	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  toNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  toNode);	      NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  toNode	17	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  firstSibling);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  firstSibling);	      NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	17	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getLastChild();	      Node    body    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	28	3	replace
71	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getLastChild();	      Node    body    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	28	3	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  parent.getFirstChild();	      Node    body    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	28	3	replace
73	[BUG]  [BUGGY]  Node  body  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  parent.getFirstChild();	      Node    body    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	28	3	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  fromNode.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getLastChild();	      Node    body    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	28	3	replace
75	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  fromNode.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getLastChild();	      Node    body    =    node.getLastChild();    	compilable	  [FE]  AssertionFailedError  	28	3	replace
76	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	24	None	replace
77	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	24	None	replace
78	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	24	None	replace
79	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getLastChild());	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	24	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  fromNode);	      NodeUtil.removeChild(parent);    	compilable	  [FE]  AssertionFailedError  	4	5	replace
81	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  fromNode);	      NodeUtil.removeChild(parent);    	compilable	  [FE]  AssertionFailedError  	4	5	replace
82	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  n  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  n);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  n	4	None	replace
83	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(parent,  parent);	      NodeUtil.removeChild(parent);    	compilable	  [FE]  RuntimeException  	4	8	replace
84	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  parent);	      NodeUtil.removeChild(parent);    	compilable	  [FE]  RuntimeException  	4	8	replace
85	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.removeChild(node,  parent);	      NodeUtil.removeChild(parent);    	compilable	  [FE]  RuntimeException  	4	8	replace
86	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node,  parent);	      NodeUtil.removeChild(parent);    	compilable	  [FE]  RuntimeException  	4	8	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  fromNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  body  =  fromNode.getFirstChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	26	3	replace
88	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  fromNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  fromNode.getFirstChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	26	3	replace
89	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode.getNext(),  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  parent);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	22	None	replace
90	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode.getNext(),  fromNode);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  fromNode);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	22	None	replace
91	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  this);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  node,  this);	      NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	6	None	replace
92	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(parent.getNext(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext(),  node);	  return    computeFallThrough(node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
93	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext(),  fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext(),  fromNode,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node.getNext(),  fromNode,  parent);	  return    computeFallThrough(node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
94	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  node.getNext(),  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node.getNext(),  parent);	  return    computeFallThrough(node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
95	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode.getNext(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext(),  node);	  return    computeFallThrough(node.getNext(),    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	16	None	replace
96	[BUG]  [BUGGY]  Node  fromNode  =  parent.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  fromNode  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  parent.getNext();	      Node    fromNode    =    node.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
97	[BUG]  [BUGGY]  Node  fromNode  =  node.getNext(),  parent);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  fromNode  =  node.getNext(),  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getNext(),  parent);	      Node    fromNode    =    node.getNext();    	non-compiled	[CE]  ';'  expected	7	None	replace
98	[BUG]  [BUGGY]  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  fromNode  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  parent.getParent();	      Node    fromNode    =    node.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
99	[BUG]  [BUGGY]  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  fromNode  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  parent.getFirstChild();	      Node    fromNode    =    node.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
100	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	23	None	replace
101	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Node)	23	None	replace
102	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node,  parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	23	None	replace
103	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  nodePriorities);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)	23	None	replace
104	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
105	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
106	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFallThrough(fromNode.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
107	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getNext());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
108	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(parent.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFallThrough(parent.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
109	[BUG]  [BUGGY]  return  computeFallThrough(parent.getNext());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(parent.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
110	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(parent.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(parent.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
111	[BUG]  [BUGGY]  return  computeFollowNode(parent.getNext());  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(parent.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(parent.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(node.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(node.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
113	[BUG]  [BUGGY]  return  computeFollowNode(node.getNext());  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(node.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(node.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
114	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	11	None	replace
115	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstSibling);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	11	None	replace
116	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  cfg);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  cfg);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowGraph<Node>)	11	None	replace
117	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node,  parent);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	11	None	replace
118	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  toSibling);  [CE]  cannot  find  symbol  toSibling  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  toSibling);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  toSibling);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  toSibling	11	None	replace
119	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
120	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getParent();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getParent();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
121	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  parent.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  parent.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  head  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    body    =    node.getNext();    Node  head  =  node.getNext();	  	compilable	  [FE]  AssertionFailedError  	20	3	add
123	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  head  =  node.getNext();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  head  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  head  =  node.getNext();	  	compilable	  [FE]  AssertionFailedError  	20	3	add
124	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  child.getNext();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  child.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  child.getNext();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
125	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	12	None	add
126	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  return  computeFallThrough(fromNode.getNext());  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  return  computeFallThrough(fromNode.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    return  computeFallThrough(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	12	None	add
127	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  node.getNext();  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  node.getNext();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    Node  nextSibling  =  node.getNext();	  	non-compiled	[CE]  unreachable  statement	12	None	add
128	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  parent.getNext();  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  parent.getNext();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  unreachable  statement	12	None	add
129	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  return  computeFollowNode(fromNode.getNext());  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  return  computeFollowNode(fromNode.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    return  computeFollowNode(fromNode.getNext());	  	non-compiled	[CE]  unreachable  statement	12	None	add
130	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  parent.getParent();  [CE]  unreachable  statement  [FE]              RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  parent.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  unreachable  statement	12	None	add
131	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
132	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  unreachable  statement	14	None	add
133	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
134	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  node  =  parent.getParent();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
135	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  fromNode  =  parent.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  fromNode  =  parent.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  fromNode  =  parent.getParent();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
136	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  fromNode  =  node.getNext();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  fromNode  =  node.getNext();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  fromNode  =  node.getNext();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	14	None	add
137	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node);	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	10	None	replace
138	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  node,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  node,  parent);	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	10	None	replace
139	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getLastChild());	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	10	None	replace
140	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getParent());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getParent());	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	10	None	replace
141	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(fromNode,  parent,  node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(fromNode,  parent,  node.getFirstChild());	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	10	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  body);  [CE]  cannot  find  symbol  body  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  body);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  body);	      NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  cannot  find  symbol  body	17	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  root);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  root);	      NodeTraversal.traverse(compiler,    node,    thenBlock);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	17	None	replace
144	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  thenBlock);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	11	None	replace
145	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstMap);  [CE]  cannot  find  symbol  firstMap  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstMap);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstMap);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstMap	11	None	replace
146	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  init);  [CE]  cannot  find  symbol  init  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  init);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  init);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  init	11	None	replace
147	[BUG]  [BUGGY]  return  computeFallThrough(parent,  fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(parent,  fromNode,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  fromNode,  node);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	22	None	replace
148	[BUG]  [BUGGY]  return  computeFowThrough(fromNode,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFowThrough(fromNode,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFowThrough(fromNode,  parent);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
149	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(parent,  toNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(parent,  toNode);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  toNode	4	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  toNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  toNode);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  toNode	19	None	replace
151	[BUG]  [BUGGY]  Node  nextSibling  =  parent.next();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.next();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.next();	      Node    nextSibling    =    node.getNext();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode.getNext(),  parent);	  return    computeFallThrough(node.getNext(),    parent);    	compilable	  [FE]  AssertionFailedError  	16	3	replace
153	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode.getNext(),  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode.getNext(),  parent);	  return    computeFallThrough(node.getNext(),    parent);    	compilable	  [FE]  AssertionFailedError  	16	3	replace
154	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  return  computeFollowNode(fromNode,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	12	None	add
155	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  NodeTraversal.traverse(compiler,  parent,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  NodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    NodeTraversal.traverse(compiler,  parent,  node);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	12	None	add
156	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
157	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getNext();  if(nextSibling  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
158	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  AssertionFailedError  <  Node>  nextSibling  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    AssertionFailedError  <  Node>  nextSibling  =  node.getNext();	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
159	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(node.getNext());  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
160	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Node  nextSibling  =  node.getNext();  if(nextSibling!=  null)  {  return  computeFallThrough(fromNode,  parent);  }	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
161	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext());  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getNext());	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	24	None	replace
162	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	24	None	replace
163	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode,  node.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
164	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  node.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode,  parent.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
166	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent.getNext());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent.getNext());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  RuntimeException  	13	8	replace
167	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
168	[BUG]  [BUGGY]      Node  body  =  node.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  AssertionFailedError  <  Node>  body  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    AssertionFailedError  <  Node>  body  =  node.getNext();	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
169	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getNext();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
170	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  this.lastJump  =  node.getLastJump();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  this.lastJump  =  node.getLastJump();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getNext();  this.lastJump  =  node.getLastJump();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
171	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
172	[BUG]  [BUGGY]  Node  fromNode  =  node.getParent();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  fromNode  =  node.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  fromNode  =  node.getParent();	      Node    fromNode    =    node.getNext();    	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	replace
173	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	23	None	replace
174	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  body);  [CE]  cannot  find  symbol  body  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  body);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  cannot  find  symbol  body	23	None	replace
175	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,  node,  thenBlock);	  	non-compiled	[CE]  cannot  find  symbol  thenBlock	14	None	add
176	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  parent,  node);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,  parent,  node);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	14	None	add
177	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild();  if(body!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
178	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild();  if(body  ==  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
179	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  AssertionFailedError  <  Node>  body  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    AssertionFailedError  <  Node>  body  =  node.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
180	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
181	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	8	None	add
182	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.replaceChild(nextSibling,  NodeUtil.hasFinally(parent));	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	8	None	add
183	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	  	compilable	  [FE]  RuntimeException  	8	8	add
185	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.GETPROP));	  	compilable	  [FE]  RuntimeException  	8	8	add
186	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	  	compilable	  [FE]  RuntimeException  	8	8	add
187	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.replaceChild(nextSibling,  new  Node(Token.FOR));	  	compilable	  [FE]  RuntimeException  	8	8	add
188	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  AssertionFailedError  <  Node>  body  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    AssertionFailedError  <  Node>  body  =  node.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
189	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  if(body!=  null)  {  return  computeFallThrough(body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
190	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	18	None	add
191	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal();	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	18	None	add
192	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	18	None	add
193	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node,  this);	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	18	None	add
194	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  nodeTraversal  =  compiler.getNodeTraversal(compiler,  node);	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	18	None	add
195	[BUG]  [BUGGY]  Node  nextSibling  =  child.getNext();  [CE]  cannot  find  symbol  child  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  child.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  child.getNext();	      Node    nextSibling    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol  child	9	None	replace
196	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	5	8	add
197	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	5	8	add
198	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	5	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  parent.getFirstChild();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
200	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  parent.getFirstChild();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  node.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	Node  nextSibling  =  node.getParent();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
202	[BUG]  [BUGGY]  Node  nextSibling  =  node.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  nextSibling  =  node.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  nextSibling  =  node.getParent();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	9	3	replace
203	[BUG]  [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getLastChild();  Node  body  =  node.getLastChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getLastChild();    Node  body  =  node.getLastChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	27	None	add
204	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	compilable	  [FE]  RuntimeException  	8	8	add
205	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());	  	compilable	  [FE]  RuntimeException  	8	8	add
206	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());	  	compilable	  [FE]  AssertionFailedError  	8	3	add
207	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  parent.getFirstChild());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  parent.getFirstChild());	  	compilable	  [FE]  AssertionFailedError  	8	3	add
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());	  	compilable	  [FE]  RuntimeException  	8	8	add
209	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getParent());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getParent());	  	compilable	  [FE]  RuntimeException  	8	8	add
210	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  RuntimeException  	8	8	add
211	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  RuntimeException  	8	8	add
212	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  body);  [CE]  cannot  find  symbol  body  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  body);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  body	11	None	replace
213	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	11	None	replace
214	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  body);  [CE]  cannot  find  symbol  body  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  body);	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  cannot  find  symbol  body	24	None	replace
215	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getParent(),  this);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getParent(),  this);	  return    computeFollowNode(fromNode,    parent,    node.getParent());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	24	None	replace
216	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	18	None	add
217	[BUG]  [BUGGY]  return  computeFallThrough(node,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node,  fromNode);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(node,  fromNode);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	22	None	replace
218	[BUG]  [BUGGY]  return  computeFallThrough(parent,  node,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(parent,  node,  fromNode);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFallThrough(parent,  node,  fromNode);	  return    computeFallThrough(parent,    fromNode);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	22	None	replace
219	[BUG]  [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFallThrough(node.getNext());  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFallThrough(node.getNext());    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	12	None	add
220	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getLastChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  unreachable  statement	14	None	add
221	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getNext();  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getNext();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getNext();	  	non-compiled	[CE]  unreachable  statement	14	None	add
222	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	14	None	add
223	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	14	None	add
224	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getParent();  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getParent();	  	non-compiled	[CE]  unreachable  statement	14	None	add
225	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  RuntimeException  	2	8	add
226	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  RuntimeException  	2	8	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);	  	compilable	  [FE]  AssertionFailedError  	2	3	add
228	[BUG]  [BUGGY]      Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  nextSibling  =  node.getNext();  Preconditions.checkState(nextSibling  ==  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    nextSibling    =    node.getNext();    Preconditions.checkState(nextSibling  ==  null);	  	compilable	  [FE]  AssertionFailedError  	2	3	add
229	[BUG]  [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getNext();  Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getNext();    Node  body  =  node.getNext();  if(body!=  null)  {  return  computeFallThrough(body.getNext());  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	20	None	add
230	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.removeChild(node);	      NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	6	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	NodeUtil.redeclareVarsInsideBranch(node);	      NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  AssertionFailedError  	6	3	replace
232	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeUtil.redeclareVarsInsideBranch(node);	      NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  AssertionFailedError  	6	3	replace
233	[BUG]  [BUGGY]  Node  body  =  toNode.getFirstChild();  [CE]  cannot  find  symbol  toNode  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  Node  body  =  toNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	Node  body  =  toNode.getFirstChild();	      Node    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  toNode	26	None	replace
234	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();  if(body  ==  null)  {  return  computeFallThrough(body);  }	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	25	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	return  computeFollowNode(fromNode,  parent.getParent());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  AssertionFailedError  	13	3	replace
236	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent.getParent());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent.getParent());	  return    computeFallThrough(node.getNext());    	compilable	  [FE]  AssertionFailedError  	13	3	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	NodeTraversal.traverse(compiler,  node,  this,  finallyMap);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)	19	None	replace
238	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	5	8	add
239	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	5	8	add
240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	add	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	5	8	add
241	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	5	8	add
242	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(node.getNext());  }  else  {    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.4364357804719848	737	737	3	replace	return  computeFollowNode(fromNode,  parent,  node.getFirstChild(),  this);	  return    computeFollowNode(fromNode,    parent,    node.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,ControlFlowAnalysis)	23	None	replace
