bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.CATCH:    handleCatch(n);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	11	None	replace
2	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  parent  =  n.getParent();	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.CATCH:    handleCatch(n);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	11	None	replace
3	[BUG]  [BUGGY]  Throwable  m  =  t.getMessage();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t.getMessage();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t.getMessage();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getMessage();    	non-compiled	[CE]  cannot  find  symbol	221	None	replace
4	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getMessage();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getMessage();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getMessage();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getMessage();    	non-compiled	[CE]  cannot  find  symbol	221	None	replace
5	[BUG]  [BUGGY]  Throwable  m  =  n.getMessage();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  n.getMessage();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  n.getMessage();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getMessage();    	non-compiled	[CE]  cannot  find  symbol	221	None	replace
6	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getParent();	  n.removeChild(parent);    Node    n    =    parent.getParent();    n.removeChild(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	128	None	replace
7	[BUG]  [BUGGY]  Node  n  =  parent.getParent();  n.removeChild(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getParent();  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getParent();  n.removeChild(parent);	  n.removeChild(parent);    Node    n    =    parent.getParent();    n.removeChild(parent);    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	128	None	replace
8	[BUG]  [BUGGY]  handleHandler(n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleHandler(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleHandler(n);	  handleKey(n);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
9	[BUG]  [BUGGY]  handleKey(n,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleKey(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleKey(n,  parent);	  handleKey(n);    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
10	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	125	12	add
11	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);  n.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(parent);  n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	125	12	add
12	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(entry);  n.removeChild(entry);  [CE]  cannot  find  symbol  entry  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(entry);  n.removeChild(entry);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(entry);  n.removeChild(entry);	  	non-compiled	[CE]  cannot  find  symbol  entry	125	None	add
13	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(name);  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(name);  n.removeChild(name);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(name);  n.removeChild(name);	  	non-compiled	[CE]  cannot  find  symbol  name	125	None	add
14	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(owner);  n.removeChild(owner);  [CE]  cannot  find  symbol  owner  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(owner);  n.removeChild(owner);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(owner);  n.removeChild(owner);	  	non-compiled	[CE]  cannot  find  symbol  owner	125	None	add
15	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  throw  new  IllegalStateException( "Failed  to  parse:   "  +  n);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  throw  new  IllegalStateException( "Failed  to  parse:   "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    throw  new  IllegalStateException( "Failed  to  parse:   "  +  n);	  	non-compiled	[CE]  unreachable  statement	132	None	add
16	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  Throw  new  IllegalStateException( "Failed  to  parse:   "  +  n);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  Throw  new  IllegalStateException( "Failed  to  parse:   "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    Throw  new  IllegalStateException( "Failed  to  parse:   "  +  n);	  	non-compiled	[CE]  not  a  statement	132	None	add
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  new  AstControlFlowGraph());  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	108	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	108	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleCatch(n,  new  AstControlFlowGraph());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleCatch(n,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleCatch(n,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  ')'  expected	108	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleAstControlFlowGraph());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleAstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleAstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleFunction(n,  new  AstControlFlowGraph());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleFunction(n,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  handleFunction(n,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  ')'  expected	108	None	replace
22	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  t.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  t.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  t.getExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
23	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  n.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  n.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  n.getExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
24	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  exceptionHandler  =  n.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  exceptionHandler  =  n.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  exceptionHandler  =  n.getExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
25	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  exceptionHandler  =  cfg.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  exceptionHandler  =  cfg.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  exceptionHandler  =  cfg.getExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
26	[BUG]  [BUGGY]  handleCatch(n,  parent,  cfg);  [CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  parent,  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent,  cfg);	  handleCatch(n,    parent);    	non-compiled	[CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	63	None	replace
27	[BUG]  [BUGGY]  handleCatch(n,  parent,  t);  [CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  parent,  t);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent,  t);	  handleCatch(n,    parent);    	non-compiled	[CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	63	None	replace
28	[BUG]  [BUGGY]  handleCatch(n,  cfg,  parent);  [CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  cfg,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  cfg,  parent);	  handleCatch(n,    parent);    	non-compiled	[CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	63	None	replace
29	[BUG]  [BUGGY]  handleCatch(n,  parent,  astPositionCounter);  [CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent,  astPositionCounter);	  handleCatch(n,    parent);    	non-compiled	[CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	63	None	replace
30	[BUG]  [BUGGY]  handleCatch(n,  parent,  nodePriorities);  [CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  parent,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent,  nodePriorities);	  handleCatch(n,    parent);    	non-compiled	[CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	63	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>,Comparator<DiGraphNode<Node,Branch>>)  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>,Comparator<DiGraphNode<Node,Branch>>)	13	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter,  priorityComparator);  [CE]  cannot  find  symbol  priorityHandler  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  cannot  find  symbol  priorityHandler	13	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>,Deque<Node>)  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>,Deque<Node>)	13	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>,int,Comparator<DiGraphNode<Node,Branch>>)	13	None	replace
35	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    n.getNext();    n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	116	12	add
36	[BUG]  [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  n  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    n  =  n.getNext();	  	compilable	  [FE]  RuntimeException  	116	12	add
37	[BUG]  [BUGGY]  n  =  n.getNext();  Node  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  Node  n  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    Node  n  =  n.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	116	None	add
38	[BUG]  [BUGGY]  n  =  n.getNext();  int  n  =  n.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  int  n  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    int  n  =  n.getNext();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	116	None	add
39	[BUG]  [BUGGY]  n  =  n.getNext();  n  =  n.getPrevious();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  n  =  n.getPrevious();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    n  =  n.getPrevious();	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
40	[BUG]  [BUGGY]  n  =  n.getNext();  n  =  n.getFirst();  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  n  =  n.getFirst();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    n  =  n.getFirst();	  	non-compiled	[CE]  cannot  find  symbol	116	None	add
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)	17	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)	17	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)	17	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>)  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>)	17	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]                            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Map<DiGraphNode<Node,Branch>,Integer>)	17	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  parent);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	225	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>(),  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>(),  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>(),  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	225	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  null);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  null);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  null);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	225	None	replace
50	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");	  throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    	non-compiled	[CE]  <identifier>  expected	193	None	replace
51	[BUG]  [BUGGY]  handleStatement(n,  parent);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatement(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n,  parent);	  handleStatement(n);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
52	[BUG]  [BUGGY]  handleStatement(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatement(n.getFirstChild());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n.getFirstChild());	  handleStatement(n);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
53	[BUG]  [BUGGY]  handleStatementAnalysis(n);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatementAnalysis(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatementAnalysis(n);	  handleStatement(n);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
54	[BUG]  [BUGGY]  handleStatement(n,  cfg);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatement(n,  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n,  cfg);	  handleStatement(n);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
55	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext();  break;  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext();  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext();  break;	  Context    cfg    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
56	[BUG]  [BUGGY]  Context  cfg  =  context.getCurrentContext();  break;  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  context.getCurrentContext();  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  context.getCurrentContext();  break;	  Context    cfg    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
57	[BUG]  [BUGGY]  Context  cfg  =  parent.getCurrentContext();  break;  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  parent.getCurrentContext();  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  parent.getCurrentContext();  break;	  Context    cfg    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>,int)  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>,int)	14	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>,int,int)  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>,int,int)	14	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)	14	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter);  [CE]  cannot  find  symbol  priorityHandler  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  priorityHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityCounter);    	non-compiled	[CE]  cannot  find  symbol  priorityHandler	14	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	18	3	add
63	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getFirstChild();    n  =  n.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	18	3	add
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    n.getFirstChild();    n  =  n.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	18	3	add
65	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getFirstChild();    n  =  n.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	18	3	add
66	[BUG]  [BUGGY]  n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  Node  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getFirstChild();    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	18	None	add
67	[BUG]  [BUGGY]  n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  int  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getFirstChild();    int  n  =  n.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	18	None	add
68	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getFirstChild());  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getFirstChild());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getFirstChild();    n  =  n.getFirstChild());	  	non-compiled	[CE]  ';'  expected	18	None	add
69	[BUG]  [BUGGY]  handleFallThrough(n);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFallThrough(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFallThrough(n);	  handleFallThrough(n);    return;    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
70	[BUG]  [BUGGY]  handleFunctionThrough(n);  return;  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunctionThrough(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunctionThrough(n);  return;	  handleFallThrough(n);    return;    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
71	[BUG]  [BUGGY]  handleFillThrough(n);  return;  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFillThrough(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFillThrough(n);  return;	  handleFallThrough(n);    return;    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
72	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	44	12	replace
73	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [FE]  RuntimeException  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	44	12	replace
74	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	44	12	replace
75	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [FE]  RuntimeException  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	44	12	replace
76	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
77	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunctions);  [CE]  cannot  find  symbol  handleShouldTraverseFunctions  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunctions);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  handleShouldTraverseFunctions);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  cannot  find  symbol  handleShouldTraverseFunctions	83	None	replace
78	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Context  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.FUNCTION);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.FUNCTION);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  cannot  find  symbol  Context	83	None	replace
79	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  Context  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.GETPROP);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.GETPROP);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  cannot  find  symbol  Context	83	None	replace
80	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.THROW);  [CE]  cannot  find  symbol  Context  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.THROW);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent.getType()  ==  Token.THROW);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  cannot  find  symbol  Context	83	None	replace
81	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  throw  new  IllegalArgumentException( "Failed  to  parse:   "  +  n);  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  throw  new  IllegalArgumentException( "Failed  to  parse:   "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    throw  new  IllegalArgumentException( "Failed  to  parse:   "  +  n);	  	non-compiled	[CE]  unreachable  statement	184	None	add
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  Throw  new  IllegalArgumentException( "Failed  to  parse:   "  +  n);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  Throw  new  IllegalArgumentException( "Failed  to  parse:   "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    Throw  new  IllegalArgumentException( "Failed  to  parse:   "  +  n);	  	non-compiled	[CE]  not  a  statement	184	None	add
83	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  Throwable  m  =  t.getCause();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  Throwable  m  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    Throwable  m  =  t.getCause();	  	non-compiled	[CE]  cannot  find  symbol	184	None	add
84	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  astPositionCounter);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  astPositionCounter);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  astPositionCounter);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	85	None	replace
85	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  parent);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  parent);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	85	None	replace
86	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  this);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  this);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	85	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  parent);	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  this);	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleAstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleAstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  handleAstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  root);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  root);	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  scope);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  scope);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  scope);	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
92	[BUG]  [BUGGY]  Throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throw  new  IllegalStateException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  not  a  statement	198	None	replace
93	[BUG]  [BUGGY]  Throwables.throwableIfNotFound(n);  [CE]  cannot  find  symbol  Throwables  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throwableIfNotFound(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throwableIfNotFound(n);	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	198	None	replace
94	[BUG]  [BUGGY]  Throwables.throwableIfNull(n);  [CE]  cannot  find  symbol  Throwables  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throwableIfNull(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throwableIfNull(n);	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	198	None	replace
95	[BUG]  [BUGGY]  Throwables.wrap(n);  [CE]  cannot  find  symbol  Throwables  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.wrap(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.wrap(n);	  throw    new    IllegalStateException(       "       ");    Throw    new    IllegalStateException(       "       ");    	non-compiled	[CE]  cannot  find  symbol  Throwables	198	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  astPositionCounter);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	197	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  t,  cfg);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  t,  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  t,  cfg);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	197	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  parent);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	197	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph(),  cfg);  [CE]  cannot  find  symbol  handleFunctions  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph(),  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph(),  cfg);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  cannot  find  symbol  handleFunctions	197	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  AstControlFlowGraph(),  n);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  cfg,  new  AstControlFlowGraph(),  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  cfg,  new  AstControlFlowGraph(),  n);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	197	None	replace
101	[BUG]  [BUGGY]  case  Token.CATCH:  handleCatch(n,  parent);  return;  [CE]  duplicate  case  label  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  case  Token.CATCH:  handleCatch(n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	case  Token.CATCH:  handleCatch(n,  parent);  return;	          case    Token.CATCH:    handleCatch(n);    return;    	non-compiled	[CE]  duplicate  case  label	216	None	replace
102	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  handleError(n);  return;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError  <  Node>  handleError(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError  <  Node>  handleError(n);  return;	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleError(n);    return;    	non-compiled	[CE]  ';'  expected	175	None	replace
103	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  handleError(n);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError  <  Node>  handleError(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError  <  Node>  handleError(n);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleError(n);    return;    	non-compiled	[CE]  ';'  expected	175	None	replace
104	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleError(n);    return;    	non-compiled	[CE]  ';'  expected	175	None	replace
105	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  }  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleError(n);    return;    	non-compiled	[CE]  ';'  expected	175	None	replace
106	[BUG]  [BUGGY]  ||!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleError(n);    return;    	non-compiled	[CE]  illegal  start  of  expression	175	None	replace
107	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  exceptionHandler  =  n.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  exceptionHandler  =  n.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");  Throwable  exceptionHandler  =  n.getExceptionHandler();	  throw    new    IllegalStateException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
108	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  exceptionHandler  =  cfg.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  exceptionHandler  =  cfg.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");  Throwable  exceptionHandler  =  cfg.getExceptionHandler();	  throw    new    IllegalStateException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
109	[BUG]  [BUGGY]  handleFunction(n);  return;  handleFunction(n);  return;  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleFunction(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleFunction(n);  return;	  	non-compiled	[CE]  unreachable  statement	141	None	add
110	[BUG]  [BUGGY]  handleFunction(n);  return;  handleStatement(n);  return;  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleStatement(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleStatement(n);  return;	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
111	[BUG]  [BUGGY]  handleFunction(n);  return;  handleFunction(n);  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleFunction(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleFunction(n);	  	non-compiled	[CE]  unreachable  statement	141	None	add
112	[BUG]  [BUGGY]  handleFunction(n);  return;  handleUnexpectedFunction(n);  return;  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleUnexpectedFunction(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleUnexpectedFunction(n);  return;	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
113	[BUG]  [BUGGY]  handleFunction(n);  return;  handleUnknown(n);  return;  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleUnknown(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleUnknown(n);  return;	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
114	[BUG]  [BUGGY]  handleFunction(n);  return;  handleInitialization(n);  return;  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleInitialization(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleInitialization(n);  return;	  	non-compiled	[CE]  cannot  find  symbol	141	None	add
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  [CE]  cannot  find  symbol  value  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  cannot  find  symbol  value	79	None	replace
116	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node,int)  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node,int)	79	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  entry,  parent);  [CE]  cannot  find  symbol  entry  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  entry,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  entry,  parent);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  cannot  find  symbol  entry	79	None	replace
118	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
119	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
120	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
121	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
122	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
123	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
124	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  node.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  cannot  find  symbol  node  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  node.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    node.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  cannot  find  symbol  node	206	None	add
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
126	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	206	12	add
127	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	206	None	add
128	[BUG]  [BUGGY]  int  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  int  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	int  n  =  parent.getParent();	  n    =    parent.getParent();    int    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	196	None	replace
129	[BUG]  [BUGGY]  Integer  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Integer  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Integer  n  =  parent.getParent();	  n    =    parent.getParent();    int    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	196	None	replace
130	[BUG]  [BUGGY]  int  n  =  parent.getNext();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  int  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	int  n  =  parent.getNext();	  n    =    parent.getParent();    int    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	196	None	replace
131	[BUG]  [BUGGY]  int  n  =  parent.getType();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  int  n  =  parent.getType();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	int  n  =  parent.getType();	  n    =    parent.getParent();    int    n    =    parent.getParent();    	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	196	None	replace
132	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  throw  new  IllegalStateException( "Failed  to  parse:   "  +  n.getString());  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  throw  new  IllegalStateException( "Failed  to  parse:   "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    throw  new  IllegalStateException( "Failed  to  parse:   "  +  n.getString());	  	non-compiled	[CE]  unreachable  statement	134	None	add
133	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throwable  m  =  n.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throwable  m  =  n.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    Throwable  m  =  n.getExceptionHandler();	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
134	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throwable  m  =  t.getCause();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throwable  m  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    Throwable  m  =  t.getCause();	  	non-compiled	[CE]  cannot  find  symbol	134	None	add
135	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleThrow(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	handleThrow(n);	          handleCatch(n);    handleChildren(n);    	compilable	  [FE]  RuntimeException  	47	12	replace
136	[BUG]  [BUGGY]  handleThrow(n);  [FE]  RuntimeException  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleThrow(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleThrow(n);	          handleCatch(n);    handleChildren(n);    	compilable	  [FE]  RuntimeException  	47	12	replace
137	[BUG]  [BUGGY]  handleTree(n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleTree(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleTree(n);	          handleCatch(n);    handleChildren(n);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  astPositionCounter);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	111	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  n);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  n);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	111	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  parent);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	111	None	replace
141	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  name));  [CE]  cannot  find  symbol  name  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  name));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  name));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  cannot  find  symbol  name	166	None	replace
142	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  handleName));  [CE]  cannot  find  symbol  handleName  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  handleName));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  handleName));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  cannot  find  symbol  handleName	166	None	replace
143	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t.getModule()));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t.getModule()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t.getModule()));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
144	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t.getSourceName()));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t.getSourceName()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t.getSourceName()));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
145	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n.getMessage());  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n.getMessage());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
146	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  <identifier>  expected	183	None	replace
147	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t,  n.getMessage());  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t,  n.getMessage());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t,  n.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
148	[BUG]  [BUGGY]  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    t.getMessage());    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
149	[BUG]  [BUGGY]  Throwable  m  =  t.getCause();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    m    =    t.getCause();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
150	[BUG]  [BUGGY]  Throwable  m  =  n.getCause();  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  n.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    m    =    t.getCause();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
151	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  m  =  n.getCause();  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  m  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");  Throwable  m  =  n.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    m    =    t.getCause();    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
152	[BUG]  [BUGGY]  Throwable  m  =  t,  n.getCause();  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t,  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t,  n.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    m    =    t.getCause();    	non-compiled	[CE]  ';'  expected	76	None	replace
153	[BUG]  [BUGGY]  handleChild(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleChild(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChild(n);	          handleCatch(n);    handleChild(n);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
154	[BUG]  [BUGGY]  handleChildAfter(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleChildAfter(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChildAfter(n);	          handleCatch(n);    handleChild(n);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
155	[BUG]  [BUGGY]  node.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  node  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  node	157	None	replace
156	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg);  NodeTraversal.traverse(compiler,  n,  parent);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	157	None	replace
157	[BUG]  [BUGGY]  parent.replaceChild(n,  root);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  root);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  root);  NodeTraversal.traverse(compiler,  n,  parent);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	157	None	replace
158	[BUG]  [BUGGY]  handleBreak(n))  {  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleBreak(n))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleBreak(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  ';'  expected	212	None	replace
159	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleBreak(n))  {  return;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  handleBreak(n))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  handleBreak(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  ';'  expected	212	None	replace
160	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  handleBreak(n))  {  return;  }  [CE]  'void'  type  not  allowed  here  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  &&  handleBreak(n))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  &&  handleBreak(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	212	None	replace
161	[BUG]  [BUGGY]  ||  handleBreak(n))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||  handleBreak(n))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||  handleBreak(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	212	None	replace
162	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");	  	non-compiled	[CE]  unreachable  statement	192	None	add
163	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Throwables.throwException( "Catch  is  not  a  valid  Node  type.   ");  [CE]  cannot  find  symbol  Throwables  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Throwables.throwException( "Catch  is  not  a  valid  Node  type.   ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    Throwables.throwException( "Catch  is  not  a  valid  Node  type.   ");	  	non-compiled	[CE]  cannot  find  symbol  Throwables	192	None	add
164	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.. ");  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.. ");	  	non-compiled	[CE]  unreachable  statement	192	None	add
165	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  n.getParent();  n  =  parent.getNext();	  n    =    parent.getParent();    n    =    parent.getNext();    	compilable	  [FE]  RuntimeException  	58	12	replace
166	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  parent.getNext();  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getParent();  n  =  parent.getNext();	  n    =    parent.getParent();    n    =    parent.getNext();    	compilable	  [FE]  RuntimeException  	58	12	replace
167	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  n  =  parent.getNext();	  n    =    parent.getParent();    n    =    parent.getNext();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
168	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(parent,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
169	[BUG]  [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(parent,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
170	[BUG]  [BUGGY]  node.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(parent,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
171	[BUG]  [BUGGY]  Context.checkNotNull(n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkNotNull(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkNotNull(n);	  Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
172	[BUG]  [BUGGY]  Context.checkNotNull(entry);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkNotNull(entry);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkNotNull(entry);	  Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
173	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(n.getType()  ==  Token.FUNCTION);	  Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
174	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(n.getType()  ==  Token.GETPROP);	  Context.checkNotNull(parent);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
175	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
176	[BUG]  [BUGGY]  node.replaceChild(n,  parent);  NodeUtil.replaceChild(parent,  n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  parent);  NodeUtil.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  parent);  NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
177	[BUG]  [BUGGY]  parent.replaceChild(n,  node);  NodeUtil.replaceChild(parent,  n);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  node);  NodeUtil.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  node);  NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
178	[BUG]  [BUGGY]  n.removeChild(root);  n.removeChild(root);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    n.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
179	[BUG]  [BUGGY]  n.removeChild(root);  Node  n  =  parent.getFirstChild();  n.removeChild(root);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  Node  n  =  parent.getFirstChild();  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    Node  n  =  parent.getFirstChild();  n.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
180	[BUG]  [BUGGY]  n.removeChild(root);  Node  n  =  parent.getParent();  n.removeChild(root);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  Node  n  =  parent.getParent();  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    Node  n  =  parent.getParent();  n.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
181	[BUG]  [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(parent,  n);  n.removeChild(root);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(parent,  n);  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    NodeUtil.removeChild(parent,  n);  n.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
182	[BUG]  [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(parent);  n.removeChild(root);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(parent);  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    NodeUtil.removeChild(parent);  n.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
183	[BUG]  [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(root);  n.removeChild(root);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(root);  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    NodeUtil.removeChild(root);  n.removeChild(root);	  	non-compiled	[CE]  cannot  find  symbol	91	None	add
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityCounter,  astPositionCounter);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityCounter,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  priorityComparator);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
187	[BUG]  [BUGGY]  Context  cfg  =  t,  n.getCurrentContext();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t,  n.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t,  n.getCurrentContext();	  Context    cfg    =    t.getCurrentContext();    	non-compiled	[CE]  ';'  expected	1	None	replace
188	[BUG]  [BUGGY]  Context  cfg  =  t,  parent.getCurrentContext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t,  parent.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t,  parent.getCurrentContext();	  Context    cfg    =    t.getCurrentContext();    	non-compiled	[CE]  ';'  expected	1	None	replace
189	[BUG]  [BUGGY]  Context  cfg  =  t.getContext();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getContext();	  Context    cfg    =    t.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  root,  new  AstControlFlowGraph());  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  n,  root,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  t,  n,  root,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  new  AstControlFlowGraph());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	186	None	replace
193	[BUG]  [BUGGY]  node.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
194	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  return;  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
195	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
196	[BUG]  [BUGGY]  int  n  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  int  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	int  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    int    n    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
197	[BUG]  [BUGGY]  Integer  n  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Integer  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Integer  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    int    n    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
198	[BUG]  [BUGGY]  int  n  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  int  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	int  n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    int    n    =    parent.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
199	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  <identifier>  expected	191	None	replace
200	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [CE]  <identifier>  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  <identifier>  expected	191	None	replace
201	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.EXPR_RESULT);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.EXPR_RESULT);	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
202	[BUG]  [BUGGY]  Throwables.throwAstControl( "Catch  is  not  an  ARRAY  but ");  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throwAstControl( "Catch  is  not  an  ARRAY  but ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throwAstControl( "Catch  is  not  an  ARRAY  but ");	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  cannot  find  symbol	191	None	replace
203	[BUG]  [BUGGY]  handleFinally(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFinally(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFinally(n);	  handleFallback(n);    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
204	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  parent);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n,  parent);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
205	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.ACTIVE);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.ACTIVE);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext(n,  Context.ACTIVE);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
206	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.GETPROP);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.GETPROP);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext(n,  Context.GETPROP);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
207	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.DISCONTINUATION);  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.DISCONTINUATION);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext(n,  Context.DISCONTINUATION);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
208	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
209	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
210	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
211	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
212	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  cannot  find  symbol	41	None	add
213	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  Node  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  Node  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    Node  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	41	None	add
214	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleCatch);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleCatch);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleCatch);	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
215	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleFunction(n);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleFunction(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleFunction(n);	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  ')'  expected	70	None	replace
216	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleFunctions);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleFunctions);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleFunctions);	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
217	[BUG]  [BUGGY]  parent.replaceChild(cfg,  n);  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(cfg,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(cfg,  n);	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
218	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleContext);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleContext);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleContext);	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
219	[BUG]  [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
220	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	210	None	replace
221	[BUG]  [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||  t.getModule()  ==  Token.FUNCTION)  {  return;	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
222	[BUG]  [BUGGY]  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	&&  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	210	None	replace
223	[BUG]  [BUGGY]  handleFunction(t,  n);  handleInstance(n);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(t,  n);  handleInstance(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(t,  n);  handleInstance(n);	          handleFunction(n);    handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
224	[BUG]  [BUGGY]  handleFunction(n);  t.reportCodeChange();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  t.reportCodeChange();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  t.reportCodeChange();	          handleFunction(n);    handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
225	[BUG]  [BUGGY]  handleFunction(n);  n.handleInstance(n);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  n.handleInstance(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  n.handleInstance(n);	          handleFunction(n);    handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
226	[BUG]  [BUGGY]  if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.BLOCK)  {  return;  }  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.BLOCK)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  &&  t.getModule()  ==  Token.BLOCK)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
227	[BUG]  [BUGGY]  ||  t.getModule()  ==  Token.BLOCK)  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||  t.getModule()  ==  Token.BLOCK)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||  t.getModule()  ==  Token.BLOCK)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
228	[BUG]  [BUGGY]  &&  t.getModule()  ==  Token.BLOCK)  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  &&  t.getModule()  ==  Token.BLOCK)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	&&  t.getModule()  ==  Token.BLOCK)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
229	[BUG]  [BUGGY]  ||  t.getModule()  ==  Token.BLOCK)  {  return;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||  t.getModule()  ==  Token.BLOCK)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||  t.getModule()  ==  Token.BLOCK)  {  return;	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
230	[BUG]  [BUGGY]  handleStatement(n,  parent);  return;  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatement(n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n,  parent);  return;	  handleStatement(n);    return;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
231	[BUG]  [BUGGY]  handleStatement(parent);  return;  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatement(parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(parent);  return;	  handleStatement(n);    return;    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
232	[BUG]  [BUGGY]  handleCategory(n);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCategory(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCategory(n);	          handleCatch(n);    handleCategory(n);    	non-compiled	[CE]  cannot  find  symbol	219	None	replace
233	[BUG]  [BUGGY]  handleConstructor(n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleConstructor(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleConstructor(n);	          handleCatch(n);    handleCategory(n);    	non-compiled	[CE]  cannot  find  symbol	219	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleAnalysisFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleAnalysisFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  handleAnalysisFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  this);	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  parent);	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  true);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  true);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  true);	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>(),  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>(),  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>(),  parent);	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
239	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.NAME));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.NAME));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
240	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.NAME));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.NAME));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
241	[BUG]  [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.NAME));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.NAME));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
242	[BUG]  [BUGGY]  node.replaceChild(n,  new  Node(Token.NAME));  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  new  Node(Token.NAME));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.NAME));    	non-compiled	[CE]  cannot  find  symbol	205	None	replace
243	[BUG]  [BUGGY]  parent.replaceChild(n,  handleFunction(t,  n));  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleFunction(t,  n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleFunction(t,  n));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
244	[BUG]  [BUGGY]  parent.replaceChild(n,  handleFunction(t));  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleFunction(t));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleFunction(t));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
245	[BUG]  [BUGGY]  parent.replaceChild(n,  handleReturn(n));  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleReturn(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleReturn(n));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
246	[BUG]  [BUGGY]  parent.replaceChild(n,  handleMutator(n));  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleMutator(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleMutator(n));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
247	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    	non-compiled	[CE]  <identifier>  expected	135	None	replace
248	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getMessage());  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getMessage());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getMessage());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
249	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getLineno());  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getLineno());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getLineno());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
250	[BUG]  [BUGGY]  Throwables.log( "Failed  to  parse: "  +  n.getString());  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.log( "Failed  to  parse: "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.log( "Failed  to  parse: "  +  n.getString());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
251	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleFunction(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  handleFunction(n);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
252	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleStatement(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleStatement(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  handleStatement(n);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
253	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleFloat(n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleFloat(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  handleFloat(n);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
254	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleProperty(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleProperty(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  handleProperty(n);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
255	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
256	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleUnknown(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleUnknown(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  handleUnknown(n);	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
257	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(parent);  break;  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(parent);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);  n.removeChild(parent);  break;	  n.removeChild(parent);    n.removeChild(parent);    break;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
258	[BUG]  [BUGGY]  n.removeChild(entry);  n.removeChild(entry);  break;  [CE]  cannot  find  symbol  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(entry);  n.removeChild(entry);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(entry);  n.removeChild(entry);  break;	  n.removeChild(parent);    n.removeChild(parent);    break;    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
259	[BUG]  [BUGGY]  Node  node  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  node  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  node  =  parent.getParent();	  n    =    parent.getParent();    node    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
260	[BUG]  [BUGGY]  node  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node  =  parent.getParent();	  n    =    parent.getParent();    node    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
261	[BUG]  [BUGGY]  parent  =  parent.getParent();  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent  =  parent.getParent();	  n    =    parent.getParent();    node    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	182	None	replace
262	[BUG]  [BUGGY]  handleUnit(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleUnit(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleUnit(n);	          handleFunction(n);    handleUnit(n);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
263	[BUG]  [BUGGY]  handleOthers(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOthers(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOthers(n);	  handleOther(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
264	[BUG]  [BUGGY]  handleOther(n,  parent);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOther(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOther(n,  parent);	  handleOther(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
265	[BUG]  [BUGGY]  handleOtherCatch(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOtherCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOtherCatch(n);	  handleOther(n);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
266	[BUG]  [BUGGY]  handleAstControlFlowGraph(n);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleAstControlFlowGraph(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleAstControlFlowGraph(n);	  throw    new    AstControlFlowGraphException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
267	[BUG]  [BUGGY]  throw  new  AstControlFlowGraphException( "Failed  to  parse: "  +  n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  AstControlFlowGraphException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  AstControlFlowGraphException( "Failed  to  parse: "  +  n);	  throw    new    AstControlFlowGraphException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
268	[BUG]  [BUGGY]  handleAnalysis(n);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleAnalysis(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleAnalysis(n);	  throw    new    AstControlFlowGraphException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
269	[BUG]  [BUGGY]  handleAnalysisFlowGraph(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleAnalysisFlowGraph(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleAnalysisFlowGraph(n);	  throw    new    AstControlFlowGraphException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
270	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    return;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  return;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root,  astPositionCounter);  return;	  NodeTraversal.traverse(compiler,    n,    parent,    root);    return;    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
272	[BUG]  [BUGGY]  handleCount(n,  parent);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCount(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCount(n,  parent);	  handleCount(n);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
273	[BUG]  [BUGGY]  handleCounts(n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCounts(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCounts(n);	  handleCount(n);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
274	[BUG]  [BUGGY]  handleInstance(n,  parent);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleInstance(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstance(n,  parent);	  handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
275	[BUG]  [BUGGY]  handleInstance(n,  t);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleInstance(n,  t);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstance(n,  t);	  handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
276	[BUG]  [BUGGY]  handleInstance(n,  cfg);  [CE]  cannot  find  symbol  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleInstance(n,  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstance(n,  cfg);	  handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
277	[BUG]  [BUGGY]  handleInstance(n.getFirstChild());  [CE]  cannot  find  symbol  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleInstance(n.getFirstChild());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstance(n.getFirstChild());	  handleInstance(n);    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  nodePriorities);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
280	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
281	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
282	[BUG]  [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
283	[BUG]  [BUGGY]  node.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  return;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  return;	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
285	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  return;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  value);  return;	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  cannot  find  symbol	189	None	replace
286	[BUG]  [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(n.getType()  ==  Token.EXPR_RESULT);	  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
288	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleFunctions,  new  AstControlFlowGraph());  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleFunctions,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  handleFunctions,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
291	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleAnalysisFlowGraph());  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleAnalysisFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  handleAnalysisFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
292	[BUG]  [BUGGY]  parent  =  n.getParent();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent  =  n.getParent();	  n    =    parent.getParent();    parent    =    parent.getParent();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
293	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
294	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
295	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  while(!shouldTraverseFunctions)  {  return;  }  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  while(!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  while(!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
296	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  [CE]  orphaned  case  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;	  	non-compiled	[CE]  orphaned  case	64	None	add
297	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  else  if(!shouldTraverseFunctions)  {  return;  }  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  else  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  else  if(!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  cannot  find  symbol	64	None	add
298	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  [CE]  orphaned  case  [FE]              AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {	  	non-compiled	[CE]  orphaned  case	64	None	add
299	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
300	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg);  NodeUtil.removeChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
301	[BUG]  [BUGGY]  parent.replaceChild(n,  1);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  1);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  1);  NodeUtil.removeChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
302	[BUG]  [BUGGY]  parent.replaceChild(n,  1);  NodeUtil.removeChild(parent,  1);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  1);  NodeUtil.removeChild(parent,  1);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  1);  NodeUtil.removeChild(parent,  1);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
303	[BUG]  [BUGGY]  handleUnder(n);  [CE]  cannot  find  symbol  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleUnder(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleUnder(n);	          handleFunction(n);    handleUnder(n);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
304	[BUG]  [BUGGY]  handleFunction(n);  n.removeChild(parent);  [CE]  cannot  find  symbol  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  n.removeChild(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  n.removeChild(parent);	          handleFunction(n);    handleUnder(n);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
305	[BUG]  [BUGGY]  handleFunction(n);  n.handleUnder(n);  [CE]  cannot  find  symbol  [FE]                      RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  n.handleUnder(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  n.handleUnder(n);	          handleFunction(n);    handleUnder(n);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
306	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);  [CE]  cannot  find  symbol  [FE]    StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
307	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);  [CE]  cannot  find  symbol  [FE]      StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
308	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  cannot  find  symbol  [FE]        StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
309	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  cannot  find  symbol  [FE]          StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
310	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  n.removeChild(parent);  [CE]  cannot  find  symbol  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
311	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  astPositionCounter);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n,  astPositionCounter);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  n);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  t,  root,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  t,  root,  n);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  parent);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n,  parent);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  parent,  n);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
316	[BUG]  [BUGGY]  handleOwn(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOwn(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOwn(n);	          handleFunction(n);    handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
317	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
318	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  cannot  find  symbol	5	None	add
319	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
320	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    Node  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
321	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
322	[BUG]  [BUGGY]  handleFall(n);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFall(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFall(n);	  handleFall(n);    return;    	non-compiled	[CE]  illegal  start  of  type	146	None	replace
323	[BUG]  [BUGGY]  handleFunction(t,  n,  parent);  [CE]  illegal  start  of  type  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(t,  n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(t,  n,  parent);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
324	[BUG]  [BUGGY]  handleFunction(n,  parent,  cfg);  [CE]  illegal  start  of  type  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n,  parent,  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n,  parent,  cfg);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
325	[BUG]  [BUGGY]  handleFunction(n,  cfg,  parent);  [CE]  illegal  start  of  type  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n,  cfg,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n,  cfg,  parent);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
326	[BUG]  [BUGGY]  handleFunction(n,  parent,  t);  [CE]  illegal  start  of  type  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n,  parent,  t);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n,  parent,  t);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
327	[BUG]  [BUGGY]  handleFunction(n,  parent,  astPositionCounter);  [CE]  illegal  start  of  type  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n,  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n,  parent,  astPositionCounter);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  type	178	None	replace
328	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  illegal  start  of  type	164	None	add
329	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  illegal  start  of  type	164	None	add
330	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  illegal  start  of  type	164	None	add
331	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  cfg.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  cfg.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  cfg.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  illegal  start  of  type	164	None	add
332	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParentNode();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParentNode();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParentNode();  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  illegal  start  of  type	164	None	add
333	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParentNode();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParentNode();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParentNode();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  illegal  start  of  type	164	None	add
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  exceptionHandler);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  exceptionHandler);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  type	224	None	replace
339	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getParent();  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getParent();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getParent();	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
340	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  Node  n  =  parent.getParent();  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  Node  n  =  parent.getParent();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getParent();    Node  n  =  parent.getParent();  n  =  parent.getParent();	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
341	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getNext();  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getNext();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getParent();    n  =  parent.getNext();  n  =  parent.getParent();	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
342	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  Node  parent  =  n.getParent();  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  Node  parent  =  n.getParent();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getParent();    Node  parent  =  n.getParent();  n  =  parent.getParent();	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
343	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getParent();  n  =  parent.getNext();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  illegal  start  of  type	53	None	add
344	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  n  =  parent.getParent();	  n    =    parent.getParent();    n    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
345	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  parent.getParent();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getParent();  n  =  parent.getParent();	  n    =    parent.getParent();    n    =    parent.getParent();    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
346	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    n  =  parent.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
347	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  Node  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  Node  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    Node  n  =  parent.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
348	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    n  =  parent.getLastChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
349	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  Node  parent  =  n.getFirstChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  Node  parent  =  n.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    Node  parent  =  n.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
350	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  t);  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY),  t);	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
351	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  handleExpr));  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  handleExpr));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  handleExpr));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
352	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  handleMatch(n));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY),  handleMatch(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY),  handleMatch(n));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  type	168	None	replace
353	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FALSE));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FALSE));    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
354	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.FALSE));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FALSE));    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
355	[BUG]  [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  parent.replaceChild(n,  new  Node(Token.FALSE));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FALSE));    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
356	[BUG]  [BUGGY]  node.replaceChild(n,  new  Node(Token.FALSE));  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  new  Node(Token.FALSE));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FALSE));    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
357	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  illegal  start  of  type	203	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  astPositionCounter);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunction(n));  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunction(n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFunction(n));	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleReturn(n));  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleReturn(n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleReturn(n));	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  this);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n),  this);	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  type	172	None	replace
362	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getLastChild();    n  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	22	None	add
363	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getLastChild();  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getLastChild();    n  =  n.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	22	None	add
364	[BUG]  [BUGGY]  n  =  n.getLastChild();  Node  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getLastChild();  Node  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getLastChild();    Node  n  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	22	None	add
365	[BUG]  [BUGGY]  n  =  n.getLastChild();  int  n  =  n.getLastChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getLastChild();  int  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getLastChild();    int  n  =  n.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	22	None	add
366	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  t.getLastChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getLastChild();  n  =  t.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getLastChild();    n  =  t.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	22	None	add
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n,  new  AstControlFlowGraph  <  Node>());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ')'  expected	171	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n),  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  type	171	None	replace
370	[BUG]  [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getLastChild();    n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
371	[BUG]  [BUGGY]  n  =  parent.getLastChild();  Node  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getLastChild();  Node  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getLastChild();    Node  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
372	[BUG]  [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getLastChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getLastChild();    n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
373	[BUG]  [BUGGY]  n  =  parent.getLastChild();  int  n  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getLastChild();  int  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getLastChild();    int  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
374	[BUG]  [BUGGY]  n  =  parent.getLastChild();  node  =  parent.getLastChild();  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getLastChild();  node  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getLastChild();    node  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  type	20	None	add
375	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  type  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
376	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  type  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
377	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  type  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
378	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  cfg.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  type  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  cfg.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  cfg.getParent();  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
379	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParentNode();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  type  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParentNode();  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParentNode();  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  type	167	None	add
380	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParentNode();  parent.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParentNode();  parent.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParentNode();  parent.replaceChild(parent,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  class,  interface,  or  enum  expected	167	None	add
381	[BUG]  [BUGGY]  handleMatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleMatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleMatch(n);	          handleCatch(n);    handleMatch(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
382	[BUG]  [BUGGY]  Node  node  =  parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  node  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  node  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    node    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	181	None	replace
383	[BUG]  [BUGGY]  node  =  parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    node    =    parent.getFirstChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	181	None	replace
384	[BUG]  [BUGGY]  Node  parent  =  n.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  parent  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  parent  =  n.getNext();	  n    =    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
385	[BUG]  [BUGGY]  n  =  parent.getParent();  Node  parent  =  n.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getParent();  Node  parent  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getParent();  Node  parent  =  n.getNext();	  n    =    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
386	[BUG]  [BUGGY]  ||  shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||  shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||  shouldTraverseFunctions)  {  return;  }	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
387	[BUG]  [BUGGY]  While(shouldTraverseFunctions)  {  return;  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  While(shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	While(shouldTraverseFunctions)  {  return;  }	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
388	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  parent.getAstRoot(t);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  parent.getAstRoot(t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  parent.getAstRoot(t);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
389	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  t.getAstRoot(n);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  t.getAstRoot(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  t.getAstRoot(n);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
390	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  n.getAstRoot(parent);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  n.getAstRoot(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  n.getAstRoot(parent);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
391	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  t.getAstRoot(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  t.getAstRoot(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  t.getAstRoot(parent);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
392	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  cfg.getAstRoot(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  cfg.getAstRoot(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  cfg.getAstRoot(parent);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
393	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(n.getString()));  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(n.getString()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  <identifier>  expected	123	None	replace
394	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  <identifier>  expected	123	None	replace
395	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(n.getString());  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(n.getString());	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  <identifier>  expected	123	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator,  astPositionCounter);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler,  astPositionCounter);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  class,  interface,  or  enum  expected	170	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  return;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value);  return;	  NodeTraversal.traverse(compiler,    n,    root,    parent);    return;    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
400	[BUG]  [BUGGY]  n.addChildToFront(parent);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.addChildToFront(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.addChildToFront(parent);	  n.removeChild(root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
401	[BUG]  [BUGGY]  n.addChildToBack(n);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.addChildToBack(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.addChildToBack(n);	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
402	[BUG]  [BUGGY]  n.removeChild(parent);  return;  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  return;	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  nodePriorities);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  nodePriorities);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorityCounter);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
407	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  type);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  type);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  type);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  class,  interface,  or  enum  expected	80	None	replace
408	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleFunction(n);  handleFunction(n);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleFunction(n);  handleFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleFunction(n);  handleFunction(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
409	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleInternal(n);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleInternal(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleInternal(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
410	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleInitializingFunction(n);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleInitializingFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleInitializingFunction(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
411	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleOwner(n);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleOwner(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleOwner(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
412	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleOwn(n);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleOwn(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleOwn(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
413	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleInstance(n);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleInstance(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleInstance(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	add
414	[BUG]  [BUGGY]  n.removeChild(type);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(type);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(type);	  n.removeChild(name);    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
415	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  handleFunction(n));  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  handleFunction(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  handleFunction(n));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
416	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  t);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION),  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION),  t);	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
417	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  t.getModule()));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
418	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  handleFunctions));  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  handleFunctions));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  handleFunctions));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  class,  interface,  or  enum  expected	165	None	replace
419	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(       "       ");    	non-compiled	[CE]  not  a  statement	220	None	replace
420	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getFirstChild();  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.NAME:    handleNumber(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
421	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  case  Token.NAME:  handleNumber(n);  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  case  Token.NAME:  handleNumber(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  case  Token.NAME:  handleNumber(n);	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.NAME:    handleNumber(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
422	[BUG]  [BUGGY]  Node  parent  =  n.getFirstChild();  n  =  parent.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                      RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  parent  =  n.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  parent  =  n.getFirstChild();  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.NAME:    handleNumber(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
423	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch(n),  t);  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleCatch(n),  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch(n),  t);	  parent.replaceChild(n,    handleCatch(n));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
424	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch(n),  cfg);  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleCatch(n),  cfg);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch(n),  cfg);	  parent.replaceChild(n,    handleCatch(n));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
425	[BUG]  [BUGGY]  parent.replaceChild(n,  handleExpr(n));  [CE]  class,  interface,  or  enum  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleExpr(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleExpr(n));	  parent.replaceChild(n,    handleCatch(n));    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
426	[BUG]  [BUGGY]  Context  cfg  =  t.n.getCurrentContext();  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.n.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.n.getCurrentContext();	  Context    cfg    =    parent.getCurrentContext();    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
427	[BUG]  [BUGGY]  handleSatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleSatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleSatch(n);	          handleCatch(n);    handleSatch(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  entry,  root);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  root);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  nodePriorities);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
431	[BUG]  [BUGGY]  handleOwner(n);  return;  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOwner(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOwner(n);  return;	  handleFunction(n);    return;    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
432	[BUG]  [BUGGY]  handleOwn(n);  return;  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOwn(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOwn(n);  return;	  handleFunction(n);    return;    	non-compiled	[CE]  class,  interface,  or  enum  expected	142	None	replace
433	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
434	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  n);	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
435	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(parent,  n);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  parent  =  n.getParent();  parent.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  parent  =  n.getParent();  parent.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
436	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  astPositionCounter);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
437	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  nodePriorities);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
438	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  root);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
439	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  value);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  value);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  value);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
440	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  root);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	84	None	replace
441	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  handleCatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleCatch(n);  handleCatch(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	add
442	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  HandleCatch(n);  handleCatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  HandleCatch(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    HandleCatch(n);  handleCatch(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	add
443	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleCatch(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	add
444	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleSatch(n);  handleSatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleSatch(n);  handleSatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleSatch(n);  handleSatch(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	add
445	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleMatch(n);  handleCatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleMatch(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleMatch(n);  handleCatch(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	add
446	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleSatch(n);  handleCatch(n);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleSatch(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleSatch(n);  handleCatch(n);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	add
447	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalStateException( "Failed  to  parse: "  +  n);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  <identifier>  expected	133	None	replace
448	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  parent);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  parent);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
449	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n,  parent);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
450	[BUG]  [BUGGY]  new  IllegalStateException( "Failed  to  parse: "  +  n);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( "Failed  to  parse: "  +  n);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
451	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	add
452	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  cfg);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  cfg);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  cfg);  parent.replaceChild(n,  cfg);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	add
453	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	add
454	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  FUNCTION);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  FUNCTION);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  FUNCTION);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	add
455	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.removeChild(parent);  parent.replaceChild(n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.removeChild(parent);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.removeChild(parent);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	add
456	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  <identifier>  expected	185	None	replace
457	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  parent);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  parent);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
458	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n,  parent);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n,  parent);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	185	None	replace
459	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalysis();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalysis();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalysis();	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
460	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph(parent);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph(parent);	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
461	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph(n);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph(n);	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
462	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getAnalysisFlowGraph();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getAnalysisFlowGraph();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getAnalysisFlowGraph();	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
463	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  handleExpr(n);  return;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError  <  Node>  handleExpr(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError  <  Node>  handleExpr(n);  return;	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleExpr(n);    return;    	non-compiled	[CE]  ';'  expected	174	None	replace
464	[BUG]  [BUGGY]  AssertionFailedError  <  Node>  handleExpr(n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError  <  Node>  handleExpr(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError  <  Node>  handleExpr(n);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleExpr(n);    return;    	non-compiled	[CE]  ';'  expected	174	None	replace
465	[BUG]  [BUGGY]  n  =  t.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  t.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  t.getLastChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
466	[BUG]  [BUGGY]  handleFloat(n);  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFloat(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFloat(n);	          handleFunction(n);    handleFloat(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
467	[BUG]  [BUGGY]  handleFunction(t,  n);  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(t,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(t,  n);	          handleFunction(n);    handleFloat(n);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
468	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Traverse.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Traverse.traverse(compiler,  n,  parent,  astPositionCounter);	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
469	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  node);	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
470	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME));  [CE]  class,  interface,  or  enum  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  Node.newString(Token.NAME));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
471	[BUG]  [BUGGY]  parent.replaceChild(n,  this);  [CE]  class,  interface,  or  enum  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  this);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  this);	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
472	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleThrows,  new  AstControlFlowGraph());  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleThrows,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleThrows,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleStructureFunctions,  new  AstControlFlowGraph());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleStructureFunctions,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleStructureFunctions,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleNonConstructors,  new  AstControlFlowGraph());  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleNonConstructors,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleNonConstructors,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleRaw,  new  AstControlFlowGraph());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleRaw,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleRaw,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
476	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  value);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
477	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  break;  [CE]  class,  interface,  or  enum  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  break;  [CE]  class,  interface,  or  enum  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  break;  [CE]  class,  interface,  or  enum  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
480	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  break;  [CE]  class,  interface,  or  enum  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
481	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  break;  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  node);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
482	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  class,  interface,  or  enum  expected  [FE]    StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	add
483	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  AstControlFlowGraph  <  Node>  traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  AstControlFlowGraph  <  Node>  traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    AstControlFlowGraph  <  Node>  traverse(compiler,  n,  this);	  	non-compiled	[CE]  ';'  expected	120	None	add
484	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  class,  interface,  or  enum  expected  [FE]        StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    nodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	add
485	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Constructor  <  Node>  traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Constructor  <  Node>  traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    Constructor  <  Node>  traverse(compiler,  n,  this);	  	non-compiled	[CE]  ';'  expected	120	None	add
486	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Context.traverse(compiler,  n,  this);  [CE]  class,  interface,  or  enum  expected  [FE]            StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Context.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    Context.traverse(compiler,  n,  this);	  	non-compiled	[CE]  class,  interface,  or  enum  expected	120	None	add
487	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter,  exceptionHandler);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
488	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  flags,  exceptionHandler);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  flags,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  flags,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  exceptionHandler);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
490	[BUG]  [BUGGY]  ||!shouldTraverseFunctions)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions)  {  throw  new  IllegalStateException( " ");  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
491	[BUG]  [BUGGY]  ||!shouldTraverseFunctions)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions)  {  throw  new  IllegalArgumentException( " ");  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
492	[BUG]  [BUGGY]  ||!shouldTraverseFunctions)  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions)  {  throw  new  IllegalStateException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions)  {  throw  new  IllegalStateException( " ");	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
493	[BUG]  [BUGGY]  Throwable  cause  =  t.getCause();  [CE]  class,  interface,  or  enum  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  cause  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  cause  =  t.getCause();	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
494	[BUG]  [BUGGY]  Throwable  cause  =  n.getCause();  [CE]  class,  interface,  or  enum  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  cause  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  cause  =  n.getCause();	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
495	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  cause  =  n.getCause();  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  cause  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  cause  =  n.getCause();	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  ';'  expected	36	None	replace
496	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  cause  =  cfg.getCause();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  cause  =  cfg.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  cause  =  cfg.getCause();	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  ';'  expected	36	None	replace
497	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getCause();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getCause();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCause();    	non-compiled	[CE]  not  a  statement	33	None	replace
498	[BUG]  [BUGGY]  handleDeep(n);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleDeep(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleDeep(n);	  handleDeep(n);    return;    	non-compiled	[CE]  not  a  statement	145	None	replace
499	[BUG]  [BUGGY]  handleDeeps(n);  return;  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleDeeps(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleDeeps(n);  return;	  handleDeep(n);    return;    	non-compiled	[CE]  not  a  statement	145	None	replace
500	[BUG]  [BUGGY]  handleDeepest(n);  return;  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleDeepest(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleDeepest(n);  return;	  handleDeep(n);    return;    	non-compiled	[CE]  not  a  statement	145	None	replace
501	[BUG]  [BUGGY]  handleStdFunction(n);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStdFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStdFunction(n);	          handleFunction(n);    handleStdFunction(n);    	non-compiled	[CE]  not  a  statement	105	None	replace
502	[BUG]  [BUGGY]  handleFunction(parent);  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(parent);	          handleFunction(n);    handleStdFunction(n);    	non-compiled	[CE]  not  a  statement	105	None	replace
503	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  not  a  statement	158	None	add
504	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    Node  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	158	None	add
505	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  not  a  statement	158	None	add
506	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  not  a  statement	158	None	add
507	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  cfg.getParent();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  cfg.getParent();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    Node  parent  =  cfg.getParent();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  not  a  statement	158	None	add
508	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  n.getFirstChild();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  Node  parent  =  n.getFirstChild();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    Node  parent  =  n.getFirstChild();  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  not  a  statement	158	None	add
509	[BUG]  [BUGGY]  handleBlock(n);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleBlock(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleBlock(n);	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.BLOCK:    handleBlock(n);    	non-compiled	[CE]  not  a  statement	10	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  root);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  root);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  not  a  statement	99	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  astPositionCounter);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  not  a  statement	99	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  nodePriorities);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  not  a  statement	99	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  n,  parent);  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  n,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  not  a  statement	99	None	replace
514	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph  <  Node>(),  n);  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph  <  Node>(),  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph  <  Node>(),  n);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  not  a  statement	99	None	replace
515	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  n  =  parent.getParent();  n  =  parent.getNext();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  n  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    n  =  parent.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	57	None	add
516	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  Node  n  =  parent.getParent();  n  =  parent.getNext();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  Node  n  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    Node  n  =  parent.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	57	None	add
517	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  Node  parent  =  n.getParent();  n  =  parent.getNext();  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  Node  parent  =  n.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    Node  parent  =  n.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	57	None	add
518	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  n  =  parent.getNext();  n  =  parent.getNext();  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  n  =  parent.getNext();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    n  =  parent.getNext();  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	57	None	add
519	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  parent.getParent();  n  =  parent.getNext();  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  parent.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    parent.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	57	None	add
520	[BUG]  [BUGGY]  n.removeChild(n);  Node  n.removeChild(parent);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  Node  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);  Node  n.removeChild(parent);	  n.removeChild(parent);    Node    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	130	None	replace
521	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  parent);  return;  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Traverse.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Traverse.traverse(compiler,  n,  parent);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  not  a  statement	148	None	replace
522	[BUG]  [BUGGY]  TraverseTraversal.traverse(compiler,  n,  parent);  return;  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  TraverseTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	TraverseTraversal.traverse(compiler,  n,  parent);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  not  a  statement	148	None	replace
523	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.removeChild(parent);  NodeUtil.removeChild(parent,  n);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    	non-compiled	[CE]  not  a  statement	194	None	replace
524	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(n,  parent);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.removeChild(parent);  NodeUtil.removeChild(n,  parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    	non-compiled	[CE]  not  a  statement	194	None	replace
525	[BUG]  [BUGGY]  handleObject(n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleObject(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleObject(n);	          handleCatch(n);    handleObject(n);    	non-compiled	[CE]  not  a  statement	52	None	replace
526	[BUG]  [BUGGY]  handleEmbedded(n);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleEmbedded(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleEmbedded(n);	          handleCatch(n);    handleObject(n);    	non-compiled	[CE]  not  a  statement	52	None	replace
527	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  not  a  statement	204	None	add
528	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  not  a  statement	204	None	add
529	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  not  a  statement	204	None	add
530	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  not  a  statement	204	None	add
531	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  not  a  statement	204	None	add
532	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  if(shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  if(shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)    {    return;    }    if(shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  not  a  statement	152	None	add
533	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  If(shouldTraverseFunctions)  {  return;  }  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  If(shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)    {    return;    }    If(shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  ';'  expected	152	None	add
534	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  if(shouldTraverseFunctions)  {  return;  [CE]  orphaned  case  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  if(shouldTraverseFunctions)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)    {    return;    }    if(shouldTraverseFunctions)  {  return;	  	non-compiled	[CE]  orphaned  case	152	None	add
535	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  while(shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  while(shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)    {    return;    }    while(shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  not  a  statement	152	None	add
536	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  cause  =  n.getCause();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  cause  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");  Throwable  cause  =  n.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  not  a  statement	78	None	replace
537	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  cause  =  cfg.getCause();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  cause  =  cfg.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");  Throwable  cause  =  cfg.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  not  a  statement	78	None	replace
538	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getFirstChild();  n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    n    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	8	None	replace
539	[BUG]  [BUGGY]  handleOffset(n);  return;  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOffset(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOffset(n);  return;	          handleOp(n);    return;    	non-compiled	[CE]  not  a  statement	176	None	replace
540	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleRawFlowGraph,  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleRawFlowGraph,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleRawFlowGraph,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	110	None	replace
541	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n),  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	110	None	replace
542	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n,  new  AstControlFlowGraph());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph());    	non-compiled	[CE]  ')'  expected	110	None	replace
543	[BUG]  [BUGGY]  handleOwner(n,  parent);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOwner(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOwner(n,  parent);	  handleOwner(n);    	non-compiled	[CE]  not  a  statement	93	None	replace
544	[BUG]  [BUGGY]  handleEwner(n);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleEwner(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleEwner(n);	  handleOwner(n);    	non-compiled	[CE]  not  a  statement	93	None	replace
545	[BUG]  [BUGGY]  handleReturn(n);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleReturn(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleReturn(n);	  handleOwner(n);    	non-compiled	[CE]  not  a  statement	93	None	replace
546	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg);  Node  parent  =  n.getParent();	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	160	None	replace
547	[BUG]  [BUGGY]  node.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.replaceChild(n,  parent);  Node  parent  =  n.getParent();	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	160	None	replace
548	[BUG]  [BUGGY]  parent.replaceChild(n,  root);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  root);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  root);  Node  parent  =  n.getParent();	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	160	None	replace
549	[BUG]  [BUGGY]  parent.replaceChild(n,  this);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  this);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  this);  Node  parent  =  n.getParent();	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	160	None	replace
550	[BUG]  [BUGGY]  parent.removeChild(n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.removeChild(n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	42	None	replace
551	[BUG]  [BUGGY]  parent!=  null  &&!shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent!=  null  &&!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent!=  null  &&!shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	151	None	replace
552	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( "));  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalStateException( "));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalStateException( "));	  Throwables.throw(new    IllegalStateException(   "   "));    	non-compiled	[CE]  <identifier>  expected	131	None	replace
553	[BUG]  [BUGGY]  Throwables.throw(new  RuntimeException( " "));  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  RuntimeException( " "));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  RuntimeException( " "));	  Throwables.throw(new    IllegalStateException(   "   "));    	non-compiled	[CE]  <identifier>  expected	131	None	replace
554	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( "] "));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalStateException( "] "));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalStateException( "] "));	  Throwables.throw(new    IllegalStateException(   "   "));    	non-compiled	[CE]  <identifier>  expected	131	None	replace
555	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( "Failed  to  parse "));  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalStateException( "Failed  to  parse "));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalStateException( "Failed  to  parse "));	  Throwables.throw(new    IllegalStateException(   "   "));    	non-compiled	[CE]  <identifier>  expected	131	None	replace
556	[BUG]  [BUGGY]  Throwable  t  =  n.getThrowable();  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  n.getThrowable();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  n.getThrowable();	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	32	None	replace
557	[BUG]  [BUGGY]  Node  n  =  parent.getNext();  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getNext();	  n    =    parent.getParent();    Node    n    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	55	None	replace
558	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler,  astPositionCounter);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	226	None	replace
559	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  exceptionHandler);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	226	None	replace
560	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  priorityComparator);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	226	None	replace
561	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  nodePriorities);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	226	None	replace
562	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  parent);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	226	None	replace
563	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	187	None	replace
564	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleFunctions,  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleFunctions,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleFunctions,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	187	None	replace
565	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph,  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	187	None	replace
566	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleAnalysisFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	187	None	replace
567	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  t);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  t);	  parent.replaceChild(n,    t);    	non-compiled	[CE]  not  a  statement	223	None	replace
568	[BUG]  [BUGGY]  parent.replaceChild(t,  n);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(t,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(t,  n);	  parent.replaceChild(n,    t);    	non-compiled	[CE]  not  a  statement	223	None	replace
569	[BUG]  [BUGGY]  parent.replaceChild(n,  t,  cfg);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t,  cfg);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t,  cfg);	  parent.replaceChild(n,    t);    	non-compiled	[CE]  not  a  statement	223	None	replace
570	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch(n,  t);  [CE]  ')'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleCatch(n,  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch(n,  t);	  parent.replaceChild(n,    t);    	non-compiled	[CE]  ')'  expected	223	None	replace
571	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  if(!shouldTraverseFunctions)  {  return;  }  [CE]  orphaned  case  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)  {  if(!shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  orphaned  case	68	None	replace
572	[BUG]  [BUGGY]  &&!shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  &&!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	&&!shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
573	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  m  =  n.getMessage();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( " ");  Throwable  m  =  n.getMessage();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");  Throwable  m  =  n.getMessage();	  throw    new    IllegalStateException(       "       ");    Throwable    m    =    t.getMessage();    	non-compiled	[CE]  not  a  statement	200	None	replace
574	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter,  astPositionCounter);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  not  a  statement	16	None	replace
575	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  nodePriorities,  astPositionCounter);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  not  a  statement	16	None	replace
576	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorities,  astPositionCounter);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorities,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    astPositionCounter);    	non-compiled	[CE]  not  a  statement	16	None	replace
577	[BUG]  [BUGGY]  AssertionFailedError.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError.checkState(n.getType()  ==  Token.EXPR_RESULT);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
578	[BUG]  [BUGGY]  AssertionFailedError.checkState(!shouldTraverseFunctions);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError.checkState(!shouldTraverseFunctions);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError.checkState(!shouldTraverseFunctions);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
579	[BUG]  [BUGGY]  AssertionFailedError  handleExpr(n);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError  handleExpr(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError  handleExpr(n);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
580	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));	  	non-compiled	[CE]  not  a  statement	208	None	add
581	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    parent.replaceChild(n,  new  Node(Token.FALSE));	  	non-compiled	[CE]  not  a  statement	208	None	add
582	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));	  	non-compiled	[CE]  not  a  statement	208	None	add
583	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  not  a  statement	208	None	add
584	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.FALSE));	  	non-compiled	[CE]  not  a  statement	208	None	add
585	[BUG]  [BUGGY]  parent.replaceChild(n,  BREAK);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  BREAK);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  BREAK);	  parent.replaceChild(n,    handleCatch);    	non-compiled	[CE]  not  a  statement	69	None	replace
586	[BUG]  [BUGGY]  parent.replaceChild(n,  handleStatement);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleStatement);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleStatement);	  parent.replaceChild(n,    handleCatch);    	non-compiled	[CE]  not  a  statement	69	None	replace
587	[BUG]  [BUGGY]  n  =  parent.getNext();  n  =  parent.getNext();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	114	None	add
588	[BUG]  [BUGGY]  n  =  parent.getNext();  Node  n  =  parent.getNext();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  Node  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    Node  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	114	None	add
589	[BUG]  [BUGGY]  n  =  parent.getNext();  n  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    n  =  parent.getFirstChild();	  	non-compiled	[CE]  not  a  statement	114	None	add
590	[BUG]  [BUGGY]  n  =  parent.getNext();  n  =  parent.getParent();  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    n  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	114	None	add
591	[BUG]  [BUGGY]  n  =  parent.getNext();  node  =  parent.getNext();  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  node  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    node  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	114	None	add
592	[BUG]  [BUGGY]  n  =  parent.getNext();  Node  n  =  parent.getParent();  [CE]  not  a  statement  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  Node  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    Node  n  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	114	None	add
593	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	188	None	replace
594	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	188	None	replace
595	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	188	None	replace
596	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	188	None	replace
597	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityCounter);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	188	None	replace
598	[BUG]  [BUGGY]  handleOp(n,  parent);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOp(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOp(n,  parent);	  handleOp(n);    	non-compiled	[CE]  not  a  statement	179	None	replace
599	[BUG]  [BUGGY]  handleOps(n);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOps(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOps(n);	  handleOp(n);    	non-compiled	[CE]  not  a  statement	179	None	replace
600	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  not  a  statement	202	None	add
601	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  not  a  statement	202	None	add
602	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    n.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	202	None	add
603	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  node.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  node.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    node.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	202	None	add
604	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParent();  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	202	None	add
605	[BUG]  [BUGGY]  Context  cfg  =  n,  parent.getCurrentContext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  n,  parent.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  n,  parent.getCurrentContext();	  Context    cfg    =    n.getCurrentContext();    	non-compiled	[CE]  ';'  expected	214	None	replace
606	[BUG]  [BUGGY]  handleUnexpectedFunction(n);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleUnexpectedFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleUnexpectedFunction(n);	          handleFunction(n);    handleUnexpectedFunction(n);    	non-compiled	[CE]  ';'  expected	103	None	replace
607	[BUG]  [BUGGY]  handleEscapedFunction(n);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleEscapedFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleEscapedFunction(n);	          handleFunction(n);    handleUnexpectedFunction(n);    	non-compiled	[CE]  ';'  expected	103	None	replace
608	[BUG]  [BUGGY]  handleUnexpectedFunction(t,  n);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleUnexpectedFunction(t,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleUnexpectedFunction(t,  n);	          handleFunction(n);    handleUnexpectedFunction(n);    	non-compiled	[CE]  ';'  expected	103	None	replace
609	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  n.getAstRoot(t);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  n.getAstRoot(t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  n.getAstRoot(t);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(n);    	non-compiled	[CE]  ';'  expected	136	None	replace
610	[BUG]  [BUGGY]  Throwable  n  =  t.getAstRoot(n);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  n  =  t.getAstRoot(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  n  =  t.getAstRoot(n);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(n);    	non-compiled	[CE]  ';'  expected	136	None	replace
611	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  n  =  t.getAstRoot(n);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  n  =  t.getAstRoot(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  n  =  t.getAstRoot(n);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(n);    	non-compiled	[CE]  ';'  expected	136	None	replace
612	[BUG]  [BUGGY]  Throwable  t  =  t.getCause();  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  t.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    t    =    t.getCause();    	non-compiled	[CE]  ';'  expected	77	None	replace
613	[BUG]  [BUGGY]  Throwable  t  =  n.getCause();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  n.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    t    =    t.getCause();    	non-compiled	[CE]  ';'  expected	77	None	replace
614	[BUG]  [BUGGY]  n  =  t.getCause();  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  t.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    t    =    t.getCause();    	non-compiled	[CE]  ';'  expected	77	None	replace
615	[BUG]  [BUGGY]  Node  t  =  t.getCause();  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  t  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  t  =  t.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    t    =    t.getCause();    	non-compiled	[CE]  ';'  expected	77	None	replace
616	[BUG]  [BUGGY]  handleAccuracy(n);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleAccuracy(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleAccuracy(n);	          handleCatch(n);    handleAccuracy(n);    	non-compiled	[CE]  ';'  expected	162	None	replace
617	[BUG]  [BUGGY]  handleCatch(parent);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(parent);	          handleCatch(n);    handleAccuracy(n);    	non-compiled	[CE]  ';'  expected	162	None	replace
618	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(n,  parent);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext(n,  parent);	  Context    cfg    =    Context.getCurrentContext(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
619	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(parent);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext(parent);	  Context    cfg    =    Context.getCurrentContext(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
620	[BUG]  [BUGGY]  Context  cfg  =  ContextUtil.getCurrentContext(n);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  ContextUtil.getCurrentContext(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  ContextUtil.getCurrentContext(n);	  Context    cfg    =    Context.getCurrentContext(n);    	non-compiled	[CE]  ';'  expected	4	None	replace
621	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  return;  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  node);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  node);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	147	None	replace
622	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  return;  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	147	None	replace
623	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalStateException( " ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	122	None	replace
624	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n));  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(n));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	122	None	replace
625	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " "));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	122	None	replace
626	[BUG]  [BUGGY]  n.removeChild(entry);  n.removeChild(entry);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(entry);  n.removeChild(entry);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(entry);  n.removeChild(entry);	  n.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	126	None	replace
627	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(parent);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);  n.removeChild(parent);	  n.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	126	None	replace
628	[BUG]  [BUGGY]  handleChildren(n,  parent);  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleChildren(n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChildren(n,  parent);	  handleChildren(n);    	non-compiled	[CE]  ';'  expected	61	None	replace
629	[BUG]  [BUGGY]  handleChildren(t,  n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleChildren(t,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChildren(t,  n);	  handleChildren(n);    	non-compiled	[CE]  ';'  expected	61	None	replace
630	[BUG]  [BUGGY]  handleChildren(parent);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleChildren(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChildren(parent);	  handleChildren(n);    	non-compiled	[CE]  ';'  expected	61	None	replace
631	[BUG]  [BUGGY]  Traverse.traverse(compiler,  n,  root);  return;  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Traverse.traverse(compiler,  n,  root);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Traverse.traverse(compiler,  n,  root);  return;	  NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  ';'  expected	26	None	replace
632	[BUG]  [BUGGY]  TraverseFunctions.traverse(compiler,  n,  parent);  return;  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  TraverseFunctions.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	TraverseFunctions.traverse(compiler,  n,  parent);  return;	  NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  ';'  expected	26	None	replace
633	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  root);  return;  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Traversal.traverse(compiler,  n,  root);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Traversal.traverse(compiler,  n,  root);  return;	  NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  ';'  expected	26	None	replace
634	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
635	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	9	None	replace
636	[BUG]  [BUGGY]  Context  cfg  =  t.context.getCurrentContext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.context.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.context.getCurrentContext();	  Context    cfg    =    context.getCurrentContext();    	non-compiled	[CE]  ';'  expected	2	None	replace
637	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
638	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  parent.getFirstChild();  n.removeChild(n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  Node  n  =  parent.getFirstChild();  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    Node  n  =  parent.getFirstChild();  n.removeChild(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
639	[BUG]  [BUGGY]  n.removeChild(n);  Node  n  =  parent.getParent();  n.removeChild(n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  Node  n  =  parent.getParent();  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    Node  n  =  parent.getParent();  n.removeChild(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
640	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  break;  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);  break;	  	non-compiled	[CE]  ';'  expected	89	None	add
641	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.BLOCK:  handleBlock(n);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.BLOCK:  handleBlock(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);  case  Token.BLOCK:  handleBlock(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
642	[BUG]  [BUGGY]  n.removeChild(n);  Node  n.removeChild(n);  [CE]  ';'  expected  [FE]              RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  Node  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    Node  n.removeChild(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
643	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  ';'  expected	30	None	replace
644	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  ';'  expected	30	None	replace
645	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  ';'  expected	30	None	replace
646	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ';'  expected	96	None	replace
647	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ';'  expected	96	None	replace
648	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  shouldTraverseFunctions);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  shouldTraverseFunctions);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>(),  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ';'  expected	96	None	replace
649	[BUG]  [BUGGY]  handleUnknown(n);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleUnknown(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleUnknown(n);	          handleFunction(n);    handleUnknown(n);    	non-compiled	[CE]  ';'  expected	104	None	replace
650	[BUG]  [BUGGY]  handleFunction(n);  t.getCompiler().reportCodeChange();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  t.getCompiler().reportCodeChange();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  t.getCompiler().reportCodeChange();	          handleFunction(n);    handleUnknown(n);    	non-compiled	[CE]  ';'  expected	104	None	replace
651	[BUG]  [BUGGY]  handleFunction(n);  t.getCompiler().handleUnknown(n);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  t.getCompiler().handleUnknown(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  t.getCompiler().handleUnknown(n);	          handleFunction(n);    handleUnknown(n);    	non-compiled	[CE]  ';'  expected	104	None	replace
652	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n),  handleRaw(n));  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRaw(n),  handleRaw(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n),  handleRaw(n));	  parent.replaceChild(n,    handleRaw(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
653	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n),  t);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRaw(n),  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n),  t);	  parent.replaceChild(n,    handleRaw(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
654	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n),  cfg);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRaw(n),  cfg);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n),  cfg);	  parent.replaceChild(n,    handleRaw(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
655	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n),  astPositionCounter);  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRaw(n),  astPositionCounter);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n),  astPositionCounter);	  parent.replaceChild(n,    handleRaw(n));    	non-compiled	[CE]  ';'  expected	72	None	replace
656	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(Token.BLOCK));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(Token.BLOCK));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(Token.BLOCK));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
657	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(Token.BLOCK));  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(Token.BLOCK));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(Token.BLOCK));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
658	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(Token.BLOCK);  [CE]  <identifier>  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(Token.BLOCK);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(Token.BLOCK);	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
659	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.BLOCK.equals(n));  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.BLOCK.equals(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  Token.BLOCK.equals(n));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
660	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  n  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getParent();    n  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	112	None	add
661	[BUG]  [BUGGY]  n  =  n.getParent();  Node  n  =  n.getParent();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  Node  n  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getParent();    Node  n  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	112	None	add
662	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getParent();    n  =  n.getLastChild();	  	non-compiled	[CE]  ';'  expected	112	None	add
663	[BUG]  [BUGGY]  n  =  n.getParent();  n  =  n.getNext();  [CE]  ';'  expected  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  n  =  n.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getParent();    n  =  n.getNext();	  	non-compiled	[CE]  ';'  expected	112	None	add
664	[BUG]  [BUGGY]  n  =  n.getParent();  int  n  =  n.getParent();  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  int  n  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getParent();    int  n  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	112	None	add
665	[BUG]  [BUGGY]  new  IllegalStateException( " ");  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ");	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
666	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(Token.EXPR_RESULT));  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ".equals(Token.EXPR_RESULT));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ".equals(Token.EXPR_RESULT));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
667	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(Token.BLOCK));  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ".equals(Token.BLOCK));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ".equals(Token.BLOCK));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
668	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(n.getString()));  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ".equals(n.getString()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ".equals(n.getString()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
669	[BUG]  [BUGGY]  case  Token.CATCH:  handleCatch(n,  parent);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  case  Token.CATCH:  handleCatch(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	case  Token.CATCH:  handleCatch(n,  parent);	          case    Token.CATCH:    handleCatch(n);    	non-compiled	[CE]  ';'  expected	217	None	replace
670	[BUG]  [BUGGY]  Case  Token.CATCH:  handleCatch(n);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Case  Token.CATCH:  handleCatch(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Case  Token.CATCH:  handleCatch(n);	          case    Token.CATCH:    handleCatch(n);    	non-compiled	[CE]  ';'  expected	217	None	replace
671	[BUG]  [BUGGY]  case  Token.CATCH:  handleCatch(parent);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  case  Token.CATCH:  handleCatch(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	case  Token.CATCH:  handleCatch(parent);	          case    Token.CATCH:    handleCatch(n);    	non-compiled	[CE]  ';'  expected	217	None	replace
672	[BUG]  [BUGGY]  parent.replaceChild(n,  r);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  r);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  r);	  parent.replaceChild(n,    handleParent);    	non-compiled	[CE]  ';'  expected	222	None	replace
673	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  return;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent);  return;	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  ';'  expected	29	None	replace
674	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  return;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityCounter);  return;	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  ';'  expected	29	None	replace
675	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  return;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  return;	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  ';'  expected	29	None	replace
676	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getParent();  parent  =  parent.getParent();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getParent();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    n  =  parent.getParent();  parent  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	59	None	add
677	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getNext();  parent  =  parent.getParent();  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getNext();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    n  =  parent.getNext();  parent  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	59	None	add
678	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  Node  n  =  parent.getParent();  parent  =  parent.getParent();  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  Node  n  =  parent.getParent();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    Node  n  =  parent.getParent();  parent  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	59	None	add
679	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getParent();  parent  =  parent.getNext();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getParent();  parent  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    n  =  parent.getParent();  parent  =  parent.getNext();	  	non-compiled	[CE]  ';'  expected	59	None	add
680	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getType();  parent  =  parent.getParent();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getType();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    n  =  parent.getType();  parent  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	59	None	add
681	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getName();  parent  =  parent.getParent();  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getName();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    n  =  parent.getName();  parent  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	59	None	add
682	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  an  ARRAY  but   ");  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but   ");  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  an  ARRAY  but   ");  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but   ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but   ");	  	non-compiled	[CE]  ';'  expected	190	None	add
683	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  an  ARRAY  but   ");  Throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but   ");  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  an  ARRAY  but   ");  Throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but   ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    Throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but   ");	  	non-compiled	[CE]  not  a  statement	190	None	add
684	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException(n);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException(n);	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	215	None	replace
685	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( "Failed  to  parse: "  +  n);	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	215	None	replace
686	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Failed  to  parse: ");  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Failed  to  parse: ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( "Failed  to  parse: ");	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	215	None	replace
687	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Functions  are  not  supported  by: ");  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Functions  are  not  supported  by: ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( "Functions  are  not  supported  by: ");	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	215	None	replace
688	[BUG]  [BUGGY]  n.replaceChild(n,  handleCatch);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.replaceChild(n,  handleCatch);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.replaceChild(n,  handleCatch);	  n.removeChild(n);    	non-compiled	[CE]  ';'  expected	90	None	replace
689	[BUG]  [BUGGY]  n.removeChild(getFunctionName());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(getFunctionName());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(getFunctionName());	  n.removeChild(n);    	non-compiled	[CE]  ';'  expected	90	None	replace
690	[BUG]  [BUGGY]  Throwable  m  =  t.getCatchableExceptionHandler();  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t.getCatchableExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t.getCatchableExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCatchableExceptionHandler();    	non-compiled	[CE]  ';'  expected	35	None	replace
691	[BUG]  [BUGGY]  Throwable  m  =  n.getCatchableExceptionHandler();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  n.getCatchableExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  n.getCatchableExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCatchableExceptionHandler();    	non-compiled	[CE]  ';'  expected	35	None	replace
692	[BUG]  [BUGGY]  Throwable  m  =  t,  n.getCatchableExceptionHandler();  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t,  n.getCatchableExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t,  n.getCatchableExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCatchableExceptionHandler();    	non-compiled	[CE]  ';'  expected	35	None	replace
693	[BUG]  [BUGGY]  Throwable  n  =  t.getCatchableExceptionHandler();  [CE]  ';'  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  n  =  t.getCatchableExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  n  =  t.getCatchableExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCatchableExceptionHandler();    	non-compiled	[CE]  ';'  expected	35	None	replace
694	[BUG]  [BUGGY]  Throwable  m  =  cfg.getCatchableExceptionHandler();  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  cfg.getCatchableExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  cfg.getCatchableExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCatchableExceptionHandler();    	non-compiled	[CE]  ';'  expected	35	None	replace
695	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  n.removeChild(parent);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getFirstChild();  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getFirstChild();  n.removeChild(parent);	  n.removeChild(parent);    Node    n    =    parent.getFirstChild();    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	127	None	replace
696	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  node.removeChild(parent);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getFirstChild();  node.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getFirstChild();  node.removeChild(parent);	  n.removeChild(parent);    Node    n    =    parent.getFirstChild();    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	127	None	replace
697	[BUG]  [BUGGY]  handleCatch(n,  parent,  exceptionHandler);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  parent,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent,  exceptionHandler);	  handleCatch(n,    parent);    	non-compiled	[CE]  ';'  expected	63	None	replace
698	[BUG]  [BUGGY]  handleCatch(n,  root);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  root);	  handleCatch(n,    parent);    	non-compiled	[CE]  ';'  expected	63	None	replace
699	[BUG]  [BUGGY]  Context  cfg  =  n.getCurrentContext();  break;  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  n.getCurrentContext();  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  n.getCurrentContext();  break;	  Context    cfg    =    Context.getCurrentContext();    break;    	non-compiled	[CE]  ';'  expected	25	None	replace
700	[BUG]  [BUGGY]  ||!hasTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!hasTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!hasTraverseFunctions)  {  return;  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
701	[BUG]  [BUGGY]  |!shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  |!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	|!shouldTraverseFunctions)  {  return;  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
702	[BUG]  [BUGGY]  handleDeepStmt(n);  return;  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleDeepStmt(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleDeepStmt(n);  return;	  handleDeep(n);    return;    	non-compiled	[CE]  ';'  expected	145	None	replace
703	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
704	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  >());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  >());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  >());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
705	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
706	[BUG]  [BUGGY]  parent.replaceChild(n,  handleKey);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleKey);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleKey);	  parent.replaceChild(n,    handleCatch);    	non-compiled	[CE]  ';'  expected	69	None	replace
707	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  int  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  int  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    int  n  =  parent.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
708	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()!=  Token.BLOCK)  {  return;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()!=  Token.BLOCK)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  t.getModule()!=  Token.BLOCK)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  ';'  expected	211	None	replace
709	[BUG]  [BUGGY]  &&  t.getModule()  ==  Token.BLOCK)  {  return;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  &&  t.getModule()  ==  Token.BLOCK)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	&&  t.getModule()  ==  Token.BLOCK)  {  return;	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
710	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  n.removeChild(parent);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(n,  parent);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(n,  parent);  n.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	177	None	replace
711	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  ';'  expected	123	None	replace
712	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " "  +  n.getString());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( " "  +  n.getString());	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  ';'  expected	123	None	replace
713	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(n.getString(), " ");  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException(n.getString(), " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException(n.getString(), " ");	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  ';'  expected	123	None	replace
714	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  t.getString()  :  n.getString();  [CE]  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  t.getString()  :  n.getString();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( " ");  t.getString()  :  n.getString();	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  	123	None	replace
715	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  t.report(n.getString(),  n);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  t.report(n.getString(),  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( " ");  t.report(n.getString(),  n);	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  ';'  expected	123	None	replace
716	[BUG]  [BUGGY]  handleEmbeddedBy(n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleEmbeddedBy(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleEmbeddedBy(n);	          handleCatch(n);    handleMatch(n);    	non-compiled	[CE]  ';'  expected	163	None	replace
717	[BUG]  [BUGGY]  Context  cfg  =  node.getCurrentContext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  node.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  node.getCurrentContext();	  Context    cfg    =    n.getCurrentContext();    	non-compiled	[CE]  ';'  expected	214	None	replace
718	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  node.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  node.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    node.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	158	None	add
719	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	158	None	add
720	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  ';'  expected	158	None	add
721	[BUG]  [BUGGY]  handleFallback(n);  return;  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFallback(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFallback(n);  return;	  handleFunction(n);    return;    	non-compiled	[CE]  ';'  expected	142	None	replace
722	[BUG]  [BUGGY]  handleTransient(n);  return;  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleTransient(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleTransient(n);  return;	  handleFunction(n);    return;    	non-compiled	[CE]  ';'  expected	142	None	replace
723	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleBreak(n)||  parent!=  null)  {  return;  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  handleBreak(n)||  parent!=  null)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  handleBreak(n)||  parent!=  null)  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  ';'  expected	212	None	replace
724	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleBreak(n)||  parent  ==  null)  {  return;  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  handleBreak(n)||  parent  ==  null)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  handleBreak(n)||  parent  ==  null)  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  ';'  expected	212	None	replace
725	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  node  =  parent.getParent();  n  =  parent.getNext();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  node  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    node  =  parent.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  ';'  expected	57	None	add
726	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  ';'  expected	159	None	replace
727	[BUG]  [BUGGY]  parent.replaceChild(n,  node);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  node);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  node);  NodeUtil.removeChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  ';'  expected	159	None	replace
728	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME));  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME));	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  ';'  expected	159	None	replace
729	[BUG]  [BUGGY]  Context  cfg  =  _tvContext.getCurrentContext();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  _tvContext.getCurrentContext();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  _tvContext.getCurrentContext();	  Context    cfg    =    context.getCurrentContext();    	non-compiled	[CE]  ';'  expected	2	None	replace
730	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    Throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");	  	non-compiled	[CE]  not  a  statement	192	None	add
731	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Throwable  exceptionHandler  =  t.getExceptionHandler();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Throwable  exceptionHandler  =  t.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    Throwable  exceptionHandler  =  t.getExceptionHandler();	  	non-compiled	[CE]  ';'  expected	192	None	add
732	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentScope();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentScope();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentScope();	  Context    cfg    =    t.getCurrentContext();    	non-compiled	[CE]  ';'  expected	1	None	replace
733	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext(n);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext(n);	  Context    cfg    =    t.getCurrentContext();    	non-compiled	[CE]  ';'  expected	1	None	replace
734	[BUG]  [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild());  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getLastChild();  n  =  n.getLastChild());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getLastChild();    n  =  n.getLastChild());	  	non-compiled	[CE]  ';'  expected	22	None	add
735	[BUG]  [BUGGY]  Preconditions.checkState(!shouldTraverseFunctions);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Preconditions.checkState(!shouldTraverseFunctions);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Preconditions.checkState(!shouldTraverseFunctions);	  if(!shouldTraverseFunctions)    {    return;    }    ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
736	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities,  parent);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  ';'  expected	79	None	replace
737	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  n.getControlFlowGraph();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  n.getControlFlowGraph();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  n.getControlFlowGraph();	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  ';'  expected	154	None	replace
738	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalyzer();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalyzer();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalyzer();	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  ';'  expected	154	None	replace
739	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalysis(n);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalysis(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowAnalysis(n);	  AstControlFlowGraph    <    Node>    cfg    =    t.getControlFlowGraph();    	non-compiled	[CE]  ';'  expected	154	None	replace
740	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleMatch(n);  handleFunction(n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleMatch(n);  handleFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleMatch(n);  handleFunction(n);	  	non-compiled	[CE]  ';'  expected	48	None	add
741	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleStatement(n);  handleFunction(n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleStatement(n);  handleFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleStatement(n);  handleFunction(n);	  	non-compiled	[CE]  ';'  expected	48	None	add
742	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleUnit(n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  handleUnit(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  handleUnit(n);	  	non-compiled	[CE]  ';'  expected	48	None	add
743	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  astPositionCounter);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  ';'  expected	169	None	replace
744	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root,  astPositionCounter);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  ';'  expected	169	None	replace
745	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph  <  Node>());  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph  <  Node>());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph  <  Node>());	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FALSE));    	non-compiled	[CE]  ';'  expected	209	None	replace
746	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleThrow(n));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleThrow(n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleThrow(n));	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  ';'  expected	172	None	replace
747	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCompiler(n));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCompiler(n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCompiler(n));	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  ';'  expected	172	None	replace
748	[BUG]  [BUGGY]  case  Token.CATCH:  handleCatch(parent);  return;  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  case  Token.CATCH:  handleCatch(parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	case  Token.CATCH:  handleCatch(parent);  return;	          case    Token.CATCH:    handleCatch(n);    return;    	non-compiled	[CE]  ';'  expected	216	None	replace
749	[BUG]  [BUGGY]  Case.CATCH:  handleCatch(n);  return;  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Case.CATCH:  handleCatch(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Case.CATCH:  handleCatch(n);  return;	          case    Token.CATCH:    handleCatch(n);    return;    	non-compiled	[CE]  not  a  statement	216	None	replace
750	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleCatch(n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleCatch(n);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  ')'  expected	187	None	replace
751	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n.removeChild(parent);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  n.removeChild(parent);	  n.removeChild(parent);    Node    n    =    parent.getFirstChild();    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	127	None	replace
752	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  n.removeChild(n);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.getFirstChild();  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.getFirstChild();  n.removeChild(n);	  n.removeChild(parent);    Node    n    =    parent.getFirstChild();    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	127	None	replace
753	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph());  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  ControlFlowGraph());	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  ';'  expected	207	None	replace
754	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  Node.EMPTY);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  Node.EMPTY);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  Node.EMPTY);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  ';'  expected	206	None	add
755	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	206	None	add
756	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.exceptionHandler,  astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	108	None	replace
757	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	108	None	replace
758	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  flags,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  flags,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  flags,  astPositionCounter,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	108	None	replace
759	[BUG]  [BUGGY]  handleUse(n);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleUse(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleUse(n);	          handleFunction(n);    handleUnit(n);    	non-compiled	[CE]  ';'  expected	139	None	replace
760	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler,  priorityCounter);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  ';'  expected	226	None	replace
761	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  ';'  expected	226	None	replace
762	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  ';'  expected	226	None	replace
763	[BUG]  [BUGGY]  Preconditions.checkState(!shouldTraverseFunctions)  {  return;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Preconditions.checkState(!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Preconditions.checkState(!shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	65	None	replace
764	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  key));  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  key));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  key));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  ';'  expected	166	None	replace
765	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  value));  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  value));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  value));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  ';'  expected	166	None	replace
766	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  n),  t);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  n),  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  n),  t);	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  ';'  expected	166	None	replace
767	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlowGraph,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlowGraph,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFlowGraph,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	110	None	replace
768	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleStatementGraph,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleStatementGraph,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleStatementGraph,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	110	None	replace
769	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	110	None	replace
770	[BUG]  [BUGGY]  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(parent,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  ';'  expected	43	None	replace
771	[BUG]  [BUGGY]  handleStatement(n.getLastChild());  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleStatement(n.getLastChild());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n.getLastChild());	  handleStatement(n);    	non-compiled	[CE]  ';'  expected	95	None	replace
772	[BUG]  [BUGGY]  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");	  throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    	non-compiled	[CE]  ';'  expected	193	None	replace
773	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  scope);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  scope);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  scope);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  ';'  expected	118	None	replace
774	[BUG]  [BUGGY]  parent.replaceChild(n,  handleKey(n));  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleKey(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleKey(n));	  parent.replaceChild(n,    handleCatch(n));    	non-compiled	[CE]  ';'  expected	73	None	replace
775	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph  <  Node>());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ';'  expected	96	None	replace
776	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleCatch(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  handleCatch(n);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ')'  expected	96	None	replace
777	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleCatch(n));  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  handleCatch(n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  handleCatch(n));	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ';'  expected	96	None	replace
778	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  t.getModule()));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  t.getModule()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  t.getModule()));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  ';'  expected	168	None	replace
779	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  handleMatch(n)));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY,  handleMatch(n)));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY,  handleMatch(n)));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  ';'  expected	168	None	replace
780	[BUG]  [BUGGY]  handleChildren(n);  return;  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleChildren(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChildren(n);  return;	          handleCatch(n);    return;    	non-compiled	[CE]  ';'  expected	218	None	replace
781	[BUG]  [BUGGY]  handleFollow(n);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFollow(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFollow(n);	  handleFallback(n);    	non-compiled	[CE]  ';'  expected	228	None	replace
782	[BUG]  [BUGGY]  handleNumber(n);  [CE]  ';'  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleNumber(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleNumber(n);	          handleFunction(n);    handleUnknown(n);    	non-compiled	[CE]  ';'  expected	104	None	replace
783	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  ||  handleShouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  ||  handleShouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)    {    return;    }    ||  handleShouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	152	None	add
784	[BUG]  [BUGGY]  node  =  parent.getParent();  Node  n  =  parent.getParent();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node  =  parent.getParent();  Node  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node  =  parent.getParent();  Node  n  =  parent.getParent();	  n    =    parent.getParent();    Node    n    =    parent.getParent();    	non-compiled	[CE]  ';'  expected	55	None	replace
785	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  Node.NAME);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  Node.NAME);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    parent.replaceChild(n,  Node.NAME);  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  ';'  expected	204	None	add
786	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	204	None	add
787	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  ';'  expected	30	None	replace
788	[BUG]  [BUGGY]  handleInstance(n,  t.getModule());  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleInstance(n,  t.getModule());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstance(n,  t.getModule());	  handleInstance(n);    	non-compiled	[CE]  ';'  expected	227	None	replace
789	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	186	None	replace
790	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph,  astPositionCounter());  [CE]  '('  or  '['  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph,  astPositionCounter());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph,  astPositionCounter());	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  '('  or  '['  expected	186	None	replace
791	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent,  n);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  parent,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  parent,  n);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  ';'  expected	31	None	replace
792	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  root);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  root);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  ';'  expected	31	None	replace
793	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.CATCH:  handleCatch(n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.CATCH:  handleCatch(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);  case  Token.CATCH:  handleCatch(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
794	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.NAME:  handleNAME(n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.NAME:  handleNAME(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);  case  Token.NAME:  handleNAME(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
795	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.NAME:  handleName(n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  case  Token.NAME:  handleName(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);  case  Token.NAME:  handleName(n);	  	non-compiled	[CE]  ';'  expected	89	None	add
796	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root);  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	121	None	replace
797	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  value);  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  value);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  value);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  ';'  expected	121	None	replace
798	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  Throwable  m  =  t.getCause();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  Throwable  m  =  t.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    Throwable  m  =  t.getCause();	  	non-compiled	[CE]  ';'  expected	132	None	add
799	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  scope);  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  scope);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  scope);	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  ';'  expected	149	None	replace
800	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.shouldTraverseFunctions);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.shouldTraverseFunctions);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  ';'  expected	17	None	replace
801	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this.astPositionCounter);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this.astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  ';'  expected	17	None	replace
802	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.priorityComparator);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  ';'  expected	17	None	replace
803	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>(),  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>(),  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>(),  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
804	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  parent);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n),  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  ';'  expected	99	None	replace
805	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	164	None	add
806	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeUtil.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeUtil.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    NodeUtil.replaceChild(parent,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	164	None	add
807	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	164	None	add
808	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  return;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  return;	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    return;    	non-compiled	[CE]  ';'  expected	29	None	replace
809	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.THROW);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.THROW);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.THROW);	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  ';'  expected	191	None	replace
810	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  getClass());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  getClass());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  getClass());	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  ';'  expected	191	None	replace
811	[BUG]  [BUGGY]  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  ';'  expected	191	None	replace
812	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  parent.replaceChild(n,  parent);  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent);  parent.replaceChild(n,  parent);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  ';'  expected	44	None	replace
813	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleHandler,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleHandler,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleHandler,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	109	None	replace
814	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlows,  new  AstControlFlowGraph());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlows,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFlows,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	109	None	replace
815	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent  =  n.getParent();	  	non-compiled	[CE]  ';'  expected	167	None	add
816	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.replaceChild(parent,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  ';'  expected	167	None	add
817	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	167	None	add
818	[BUG]  [BUGGY]  handleOps(n);  return;  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOps(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOps(n);  return;	          handleOp(n);    return;    	non-compiled	[CE]  ';'  expected	176	None	replace
819	[BUG]  [BUGGY]  handleOpt(n);  return;  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOpt(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOpt(n);  return;	          handleOp(n);    return;    	non-compiled	[CE]  ';'  expected	176	None	replace
820	[BUG]  [BUGGY]  new  IllegalStateException(n);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException(n);	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
821	[BUG]  [BUGGY]  new  IllegalStateException( " ".equals(parent));  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ".equals(parent));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ".equals(parent));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
822	[BUG]  [BUGGY]  nodePriorities.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  nodePriorities.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	nodePriorities.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	161	None	replace
823	[BUG]  [BUGGY]  parent.replaceChild(n,  root);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  ';'  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  root);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  root);  NodeTraversal.traverse(compiler,  n,  parent);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	161	None	replace
824	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeTraversal.traverse(compiler,  n,  root);  return;  [CE]  ')'  expected  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeTraversal.traverse(compiler,  n,  root);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeTraversal.traverse(compiler,  n,  root);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ')'  expected	161	None	replace
825	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  ';'  expected  [FE]                      RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t);  NodeTraversal.traverse(compiler,  n,  parent);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	161	None	replace
826	[BUG]  [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  ';'  expected	91	None	add
827	[BUG]  [BUGGY]  n.removeChild(root);  NodeTraversal.traverse(compiler,  n,  root);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  NodeTraversal.traverse(compiler,  n,  root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    NodeTraversal.traverse(compiler,  n,  root);	  	non-compiled	[CE]  ';'  expected	91	None	add
828	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Node  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Node  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    Node  n  =  n.getFirstChild();	  	non-compiled	[CE]  ';'  expected	134	None	add
829	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  frumoase);  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  frumoase);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  frumoase);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  ')'  expected	83	None	replace
830	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent  ==  null);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent  ==  null);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent  ==  null);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  ';'  expected	83	None	replace
831	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent!=  null);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  parent!=  null);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  parent!=  null);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  ';'  expected	83	None	replace
832	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions,  t);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions,  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions,  t);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  ';'  expected	83	None	replace
833	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.replaceChild(parent,  n);  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  n);  NodeUtil.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  n);  NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  ';'  expected	156	None	replace
834	[BUG]  [BUGGY]  Context.checkNotNull(value);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkNotNull(value);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkNotNull(value);	  Context.checkNotNull(parent);    	non-compiled	[CE]  ';'  expected	86	None	replace
835	[BUG]  [BUGGY]  Context.checkNotNull(root);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkNotNull(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkNotNull(root);	  Context.checkNotNull(parent);    	non-compiled	[CE]  not  a  statement	86	None	replace
836	[BUG]  [BUGGY]  AssertionFailedError  handleError(n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError  handleError(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError  handleError(n);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
837	[BUG]  [BUGGY]  AssertionFailedError.checkNotNull(parent);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AssertionFailedError.checkNotNull(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AssertionFailedError.checkNotNull(parent);	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
838	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newNumber(0));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  Node.newNumber(0));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  Node.newNumber(0));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	38	None	replace
839	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  not  a  statement	13	None	replace
840	[BUG]  [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  return;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.mayHaveSideEffects(n))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.mayHaveSideEffects(n))  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	151	None	replace
841	[BUG]  [BUGGY]  node  ==  null  &&!shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node  ==  null  &&!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node  ==  null  &&!shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	151	None	replace
842	[BUG]  [BUGGY]  n  =  parent.getNext();  int  n  =  parent.getNext();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  int  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getNext();    int  n  =  parent.getNext();	  	non-compiled	[CE]  not  a  statement	114	None	add
843	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.GETPROP));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.GETPROP));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.GETPROP));	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	42	None	replace
844	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException( " "));  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalArgumentException( " "));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalArgumentException( " "));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
845	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException(Token.BLOCK,  n));  [CE]  <identifier>  expected  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalArgumentException(Token.BLOCK,  n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalArgumentException(Token.BLOCK,  n));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
846	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  token: "  +  Token.BLOCK.equals(n));  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "Unexpected  token: "  +  Token.BLOCK.equals(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Unexpected  token: "  +  Token.BLOCK.equals(n));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  not  a  statement	124	None	replace
847	[BUG]  [BUGGY]  Throwables.throw(new  IllegalArgumentException(Token.BLOCK));  [CE]  <identifier>  expected  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalArgumentException(Token.BLOCK));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalArgumentException(Token.BLOCK));	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
848	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "The  Token.BLOCK  must  not  be  null. ");  [CE]  not  a  statement  [FE]                    RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "The  Token.BLOCK  must  not  be  null. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "The  Token.BLOCK  must  not  be  null. ");	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  not  a  statement	124	None	replace
849	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities,  parent);  return;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities,  parent);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities,  parent);  return;	  NodeTraversal.traverse(compiler,    n,    root,    parent);    return;    	non-compiled	[CE]  not  a  statement	28	None	replace
850	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  entry,  parent);  return;  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  entry,  parent);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  entry,  parent);  return;	  NodeTraversal.traverse(compiler,    n,    root,    parent);    return;    	non-compiled	[CE]  not  a  statement	28	None	replace
851	[BUG]  [BUGGY]  handleOpt(n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOpt(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOpt(n);	          handleFunction(n);    handleFunction(n);    	non-compiled	[CE]  not  a  statement	101	None	replace
852	[BUG]  [BUGGY]  parent.replaceChild(n,  t,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    t);    	non-compiled	[CE]  not  a  statement	223	None	replace
853	[BUG]  [BUGGY]  parent.replaceChild(n,  t,  null);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t,  null);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t,  null);	  parent.replaceChild(n,    t);    	non-compiled	[CE]  not  a  statement	223	None	replace
854	[BUG]  [BUGGY]  parent.replaceChild(n,  t,  new  Node(Token.EMPTY));  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    t);    	non-compiled	[CE]  not  a  statement	223	None	replace
855	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  not  a  statement	111	None	replace
856	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root,  parent);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  root,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  not  a  statement	111	None	replace
857	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  parent);  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    parent);    	non-compiled	[CE]  not  a  statement	111	None	replace
858	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  astPositionCounter);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	188	None	replace
859	[BUG]  [BUGGY]  n.removeChild(value);  n.removeChild(parent);  break;  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(value);  n.removeChild(parent);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(value);  n.removeChild(parent);  break;	  n.removeChild(parent);    n.removeChild(parent);    break;    	non-compiled	[CE]  not  a  statement	129	None	replace
860	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(value);  break;  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  n.removeChild(value);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  n.removeChild(value);  break;	  n.removeChild(parent);    n.removeChild(parent);    break;    	non-compiled	[CE]  not  a  statement	129	None	replace
861	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  parent  =  parent.getParent();	  n    =    parent.getParent();    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	60	None	replace
862	[BUG]  [BUGGY]  n  =  parent.getNext();  parent  =  parent.getParent();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getNext();  parent  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getNext();  parent  =  parent.getParent();	  n    =    parent.getParent();    parent    =    parent.getParent();    	non-compiled	[CE]  not  a  statement	60	None	replace
863	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  n);  parent.replaceChild(n,  n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  n);  parent.replaceChild(n,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  n);  parent.replaceChild(n,  n);	  	non-compiled	[CE]  not  a  statement	37	None	add
864	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  not  a  statement	37	None	add
865	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  not  a  statement	37	None	add
866	[BUG]  [BUGGY]  parent  ==  null  &&  shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent  ==  null  &&  shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent  ==  null  &&  shouldTraverseFunctions)  {  return;  }	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	153	None	replace
867	[BUG]  [BUGGY]  handleShouldTraverseFunction(n);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleShouldTraverseFunction(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleShouldTraverseFunction(n);	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	153	None	replace
868	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions)  {  return;  }  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions)  {  return;  }	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  ';'  expected	153	None	replace
869	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  >());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  >());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  >());	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
870	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleExpr(n);    return;    	non-compiled	[CE]  ';'  expected	174	None	replace
871	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleExpr(n);    return;    	non-compiled	[CE]  ';'  expected	174	None	replace
872	[BUG]  [BUGGY]  Context  cfg  =  Context.current().getCurrentContext(n);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  Context.current().getCurrentContext(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.current().getCurrentContext(n);	  Context    cfg    =    Context.getCurrentContext(n);    	non-compiled	[CE]  not  a  statement	4	None	replace
873	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(value);  n.removeChild(value);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(value);  n.removeChild(value);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(value);  n.removeChild(value);	  	non-compiled	[CE]  not  a  statement	125	None	add
874	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(root);  n.removeChild(root);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(root);  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(root);  n.removeChild(root);	  	non-compiled	[CE]  not  a  statement	125	None	add
875	[BUG]  [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(key);  n.removeChild(key);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);    n.removeChild(parent);  n.removeChild(key);  n.removeChild(key);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);        n.removeChild(parent);    n.removeChild(key);  n.removeChild(key);	  	non-compiled	[CE]  not  a  statement	125	None	add
876	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Context  cfg  =  Context.getCurrentContext();  NodeTraversal.traverse(compiler,  n,  this);  [CE]  not  a  statement  [FE]    StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Context  cfg  =  Context.getCurrentContext();  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    Context  cfg  =  Context.getCurrentContext();  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  not  a  statement	120	None	add
877	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  not  a  statement  [FE]      StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  not  a  statement	120	None	add
878	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  nodePriorities.traverse(compiler,  n,  this);  [CE]  not  a  statement  [FE]        StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  nodePriorities.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  nodePriorities.traverse(compiler,  n,  this);	  	non-compiled	[CE]  not  a  statement	120	None	add
879	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  not  a  statement	119	None	replace
880	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  [CE]  orphaned  case  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)        {        return;        }        if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;	  	non-compiled	[CE]  orphaned  case	64	None	add
881	[BUG]  [BUGGY]  handleFollow(n);  return;  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFollow(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFollow(n);  return;	  handleFallThrough(n);    return;    	non-compiled	[CE]  not  a  statement	144	None	replace
882	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlowGraph,  new  AstControlFlowGraph  <  Node>());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlowGraph,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFlowGraph,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  not  a  statement	171	None	replace
883	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch,  new  AstControlFlowGraph  <  Node>());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  not  a  statement	171	None	replace
884	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleStatementGraph,  new  AstControlFlowGraph  <  Node>());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleStatementGraph,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleStatementGraph,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  not  a  statement	171	None	replace
885	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleStatement(n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleStatement(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleStatement(n);	  	non-compiled	[CE]  not  a  statement	100	None	add
886	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleInitialize(n);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleInitialize(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleInitialize(n);	  	non-compiled	[CE]  not  a  statement	100	None	add
887	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleStatement(n);  handleStatement(n);  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleStatement(n);  handleStatement(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleStatement(n);  handleStatement(n);	  	non-compiled	[CE]  not  a  statement	100	None	add
888	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleUnknown(n);  [CE]  not  a  statement  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleUnknown(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleUnknown(n);	  	non-compiled	[CE]  not  a  statement	100	None	add
889	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleOp(n);  [CE]  not  a  statement  [FE]            RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleOp(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleOp(n);	  	non-compiled	[CE]  not  a  statement	100	None	add
890	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  t);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  t);	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  not  a  statement	133	None	replace
891	[BUG]  [BUGGY]  n.removeChild(parent,  n);  NodeUtil.removeChild(parent);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent,  n);  NodeUtil.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent,  n);  NodeUtil.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    	non-compiled	[CE]  not  a  statement	194	None	replace
892	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeUtil.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    	non-compiled	[CE]  not  a  statement	194	None	replace
893	[BUG]  [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(parent);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.removeChild(parent);  NodeUtil.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.removeChild(parent);  NodeUtil.removeChild(parent);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    	non-compiled	[CE]  not  a  statement	194	None	replace
894	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  t.getModule()!=  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  not  a  statement	210	None	replace
895	[BUG]  [BUGGY]  ShouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ShouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	ShouldTraverseFunctions  &&  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  not  a  statement	210	None	replace
896	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  return;  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n);  return;	  NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  not  a  statement	26	None	replace
897	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  return;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  return;  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  return;	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  not  a  statement	189	None	replace
898	[BUG]  [BUGGY]  nodePriorities.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  nodePriorities.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	nodePriorities.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  not  a  statement	157	None	replace
899	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeTraversal.traverse(compiler,  n,  root);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeTraversal.traverse(compiler,  n,  root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeTraversal.traverse(compiler,  n,  root);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  ')'  expected	157	None	replace
900	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleMatch(n);  handleMatch(n);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleMatch(n);  handleMatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleMatch(n);  handleMatch(n);	  	non-compiled	[CE]  not  a  statement	45	None	add
901	[BUG]  [BUGGY]  Node  n  =  parent.removeChild(parent);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n  =  parent.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n  =  parent.removeChild(parent);	  n.removeChild(parent);    Node    n.removeChild(parent);    	non-compiled	[CE]  not  a  statement	130	None	replace
902	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  astPositionCounter);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  not  a  statement	225	None	replace
903	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>(),  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>(),  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>(),  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  illegal  start  of  expression	225	None	replace
904	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  nodePriorities);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    this);    	non-compiled	[CE]  not  a  statement	225	None	replace
905	[BUG]  [BUGGY]  handleOpaque(n);  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOpaque(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOpaque(n);	  handleOp(n);    	non-compiled	[CE]  not  a  statement	179	None	replace
906	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  nodePriorities);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n,  nodePriorities);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  not  a  statement	173	None	replace
907	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  value);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  value);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n,  value);	  NodeTraversal.traverse(compiler,    root,    n);    	non-compiled	[CE]  not  a  statement	173	None	replace
908	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  flags,  priorityComparator,  astPositionCounter);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  flags,  priorityComparator,  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  flags,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  not  a  statement	170	None	replace
909	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  cfg.getAstRoot(n);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  cfg.getAstRoot(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  cfg.getAstRoot(n);	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getAstRoot(n);    	non-compiled	[CE]  not  a  statement	136	None	replace
910	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Failed  to  handleFunctions. ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "Failed  to  handleFunctions. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( "Failed  to  handleFunctions. ");	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  not  a  statement	215	None	replace
911	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  scope);  return;  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  scope);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  scope);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  not  a  statement	147	None	replace
912	[BUG]  [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    ||  n!=  parent.getParent())  {  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
913	[BUG]  [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  throw  new  IllegalStateException( " ");  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  throw  new  IllegalStateException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    ||  n!=  parent.getParent())  {  throw  new  IllegalStateException( " ");	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
914	[BUG]  [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  handleExpr(n);  return;  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  handleExpr(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    ||  n!=  parent.getParent())  {  handleExpr(n);  return;	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
915	[BUG]  [BUGGY]  n  =  parent.getParent();  n.removeChild(parent);  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getParent();  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getParent();  n.removeChild(parent);	  n.removeChild(parent);    Node    n    =    parent.getParent();    n.removeChild(parent);    	non-compiled	[CE]  not  a  statement	128	None	replace
916	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRange(n));  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRange(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRange(n));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  not  a  statement	71	None	replace
917	[BUG]  [BUGGY]  parent.replaceChild(n,  handleStatement(n));  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleStatement(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleStatement(n));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  not  a  statement	71	None	replace
918	[BUG]  [BUGGY]  nodePriorities.traverse(compiler,  n);  return;  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  nodePriorities.traverse(compiler,  n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	nodePriorities.traverse(compiler,  n);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  not  a  statement	148	None	replace
919	[BUG]  [BUGGY]  n.addChildToBack(parent);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.addChildToBack(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.addChildToBack(parent);	  n.removeChild(n);    	non-compiled	[CE]  not  a  statement	90	None	replace
920	[BUG]  [BUGGY]  handleFunction(n);  return;  handleProperty(n);  return;  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleProperty(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleProperty(n);  return;	  	non-compiled	[CE]  not  a  statement	141	None	add
921	[BUG]  [BUGGY]  handleFunction(n);  return;  handleUnit(n);  return;  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleUnit(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleUnit(n);  return;	  	non-compiled	[CE]  not  a  statement	141	None	add
922	[BUG]  [BUGGY]  parent.replaceChild(n,  handleNext);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleNext);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleNext);	  parent.replaceChild(n,    handleParent);    	non-compiled	[CE]  not  a  statement	222	None	replace
923	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  break;  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  not  a  statement	24	None	replace
924	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t);	  throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    	non-compiled	[CE]  not  a  statement	185	None	replace
925	[BUG]  [BUGGY]  n  =  n.getFirstChild();  n  =  n.getNextChild();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getFirstChild();  n  =  n.getNextChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getFirstChild();    n  =  n.getNextChild();	  	non-compiled	[CE]  not  a  statement	18	None	add
926	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleFunction(n));  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleFunction(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleFunction(n));	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  not  a  statement	70	None	replace
927	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleReturn(n);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleReturn(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleReturn(n);	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  ')'  expected	70	None	replace
928	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleRange(n));  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleRange(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleRange(n));	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  not  a  statement	70	None	replace
929	[BUG]  [BUGGY]  n  =  n.getParent();  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getParent();  Node  parent  =  n.getParent();	  n    =    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
930	[BUG]  [BUGGY]  node  =  n.getParent();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node  =  n.getParent();	  n    =    parent.getParent();    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	56	None	replace
931	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(n,  t);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  Context.getCurrentContext(n,  t);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext(n,  t);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  not  a  statement	213	None	replace
932	[BUG]  [BUGGY]  Context  cfg  =  ContextUtil.getCurrentContext(t,  n);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  ContextUtil.getCurrentContext(t,  n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  ContextUtil.getCurrentContext(t,  n);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  not  a  statement	213	None	replace
933	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException(n));  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw(new  IllegalStateException(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalStateException(n));	  Throwables.throw(new    IllegalStateException(   "   "));    	non-compiled	[CE]  <identifier>  expected	131	None	replace
934	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  exceptionHandler);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  not  a  statement	15	None	replace
935	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  shouldTraverseFunctions);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  shouldTraverseFunctions);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  not  a  statement	197	None	replace
936	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  nodePriorities);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  not  a  statement	197	None	replace
937	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  cfg);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  cfg);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  not  a  statement	197	None	replace
938	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  n));  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  n));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(parent,    n);    	non-compiled	[CE]  not  a  statement	40	None	replace
939	[BUG]  [BUGGY]  nodePriorities  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  nodePriorities  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	nodePriorities  =  n.getFirstChild();  Node  n  =  parent.getFirstChild();	  n    =    parent.getFirstChild();    Node    n    =    parent.getFirstChild();    	non-compiled	[CE]  not  a  statement	9	None	replace
940	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [CE]  not  a  statement  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.NAME:    handleNumber(n);    	non-compiled	[CE]  not  a  statement	12	None	replace
941	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ")  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ")	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	122	None	replace
942	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException(n);  [CE]  <identifier>  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException(n);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	122	None	replace
943	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    parent.replaceChild(n,  n);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  not  a  statement	202	None	add
944	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParent();	  	non-compiled	[CE]  not  a  statement	202	None	add
945	[BUG]  [BUGGY]  handleObj(n);  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleObj(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleObj(n);	  handleOwner(n);    	non-compiled	[CE]  not  a  statement	93	None	replace
946	[BUG]  [BUGGY]  n  =  node.getLastChild();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  node.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  node.getLastChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  not  a  statement	21	None	replace
947	[BUG]  [BUGGY]  n.removeChild(value);  n.removeChild(value);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(value);  n.removeChild(value);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(value);  n.removeChild(value);	  n.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  not  a  statement	126	None	replace
948	[BUG]  [BUGGY]  node.removeChild(parent);  n.removeChild(parent);  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  node.removeChild(parent);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	node.removeChild(parent);  n.removeChild(parent);	  n.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  not  a  statement	126	None	replace
949	[BUG]  [BUGGY]  n  =  n.removeFirstChild();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.removeFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.removeFirstChild();	  n    =    n.getLastChild();    	non-compiled	[CE]  not  a  statement	23	None	replace
950	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getAstControlFlowGraph();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getAstControlFlowGraph();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getAstControlFlowGraph();	  if(!shouldTraverseFunctions)    {    return;    }    If(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
951	[BUG]  [BUGGY]  throw  new  AstControlFlowGraphException( "Failed  to  parse: ");  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  AstControlFlowGraphException( "Failed  to  parse: ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  AstControlFlowGraphException( "Failed  to  parse: ");	  throw    new    AstControlFlowGraphException(   "   ");    	non-compiled	[CE]  not  a  statement	150	None	replace
952	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n),  value);  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRaw(n),  value);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n),  value);	  parent.replaceChild(n,    handleRaw(n));    	non-compiled	[CE]  not  a  statement	72	None	replace
953	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n),  this);  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleRaw(n),  this);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n),  this);	  parent.replaceChild(n,    handleRaw(n));    	non-compiled	[CE]  not  a  statement	72	None	replace
954	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  this);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent,  this);	  NeighborTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  not  a  statement	84	None	replace
955	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  this);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    astPositionCounter);    	non-compiled	[CE]  not  a  statement	226	None	replace
956	[BUG]  [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  getFunctionAnalysis();  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleFunction(n);  handleCatch(n);  getFunctionAnalysis();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleFunction(n);    handleCatch(n);  getFunctionAnalysis();	  	non-compiled	[CE]  not  a  statement	48	None	add
957	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  cfg);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  cfg);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	107	None	replace
958	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  this);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  this);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	107	None	replace
959	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  t.getSourceName()));  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  t.getSourceName()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  t.getSourceName()));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	39	None	replace
960	[BUG]  [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  t.getModule()));  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  Node.newString(Token.NAME,  t.getModule()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  Node.newString(Token.NAME,  t.getModule()));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(n,    parent);    	non-compiled	[CE]  not  a  statement	39	None	replace
961	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.FUNCTION)    {    return;    }    	non-compiled	[CE]  not  a  statement	210	None	replace
962	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleCatch(n))  {  return;  }  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  handleCatch(n))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  handleCatch(n))  {  return;  }	  if(shouldTraverseFunctions    ||    handleBreak(n))    {    return;    }    	non-compiled	[CE]  not  a  statement	212	None	replace
963	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.BREAK));  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.BREAK));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.BREAK));	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	153	None	replace
964	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.BLOCK));  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.BLOCK));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.BLOCK));	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	153	None	replace
965	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.CATCH));  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.CATCH));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.CATCH));	  if(shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	153	None	replace
966	[BUG]  [BUGGY]  Throwable  exceptionHandler  =  t,  n.getExceptionHandler();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  exceptionHandler  =  t,  n.getExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  exceptionHandler  =  t,  n.getExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    exceptionHandler    =    t.getExceptionHandler();    	non-compiled	[CE]  ';'  expected	34	None	replace
967	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions,  t.getModule());  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions,  t.getModule());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions,  t.getModule());	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  not  a  statement	83	None	replace
968	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()!=  n);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()!=  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions  ||  t.getCompiler()!=  n);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  not  a  statement	83	None	replace
969	[BUG]  [BUGGY]  Context.checkState(n.shouldTraverseFunctions);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context.checkState(n.shouldTraverseFunctions);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(n.shouldTraverseFunctions);	  Context.checkState(shouldTraverseFunctions);    	non-compiled	[CE]  not  a  statement	83	None	replace
970	[BUG]  [BUGGY]  n  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    parent.replaceChild(parent,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  not  a  statement	43	None	replace
971	[BUG]  [BUGGY]  parent.replaceChild(n,  handleNonEmpty(n));  [CE]  not  a  statement  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleNonEmpty(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleNonEmpty(n));	  parent.replaceChild(n,    handleCatch);    	non-compiled	[CE]  not  a  statement	69	None	replace
972	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  exceptionHandler);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    root);    	non-compiled	[CE]  not  a  statement	31	None	replace
973	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  n);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  n);  Node  parent  =  n.getParent();	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	160	None	replace
974	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  Node  parent  =  n.getParent();  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t);  Node  parent  =  n.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t);  Node  parent  =  n.getParent();	  parent.replaceChild(n,    parent);    Node    parent    =    n.getParent();    	non-compiled	[CE]  not  a  statement	160	None	replace
975	[BUG]  [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getParent();  parents  =  parent.getParent();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    parent  =  parent.getParent();  n  =  parent.getParent();  parents  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        parent    =    parent.getParent();    n  =  parent.getParent();  parents  =  parent.getParent();	  	non-compiled	[CE]  not  a  statement	59	None	add
976	[BUG]  [BUGGY]  Node  n.removeChild(parent);  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Node  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Node  n.removeChild(parent);	  n.removeChild(parent);    Node    n.removeChild(parent);    	non-compiled	[CE]  ';'  expected	130	None	replace
977	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  cfg);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  cfg);	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	186	None	replace
978	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  this);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph(),  this);	  NodeTraversal.traverse(compiler,    n,    root,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	186	None	replace
979	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	108	None	replace
980	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph,  exceptionHandler);  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  '('  or  '['  expected	108	None	replace
981	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  graph,  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  graph,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  graph,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	108	None	replace
982	[BUG]  [BUGGY]  Throwable  cause  =  t,  n.getCause();  [CE]  ';'  expected  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  cause  =  t,  n.getCause();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  cause  =  t,  n.getCause();	  throw    new    IllegalStateException(       "       ");    Throwable    cause    =    t.getCause();    	non-compiled	[CE]  ';'  expected	78	None	replace
983	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    new  IllegalStateException( "Catch  is  not  a  valid  Node  type.   ");	  	non-compiled	[CE]  not  a  statement	192	None	add
984	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Node  type  =  n.getFirstChild();  [CE]  not  a  statement  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Catch  is  not  a  valid  Node  type.   ");  Node  type  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Catch    is    not    a    valid    Node    type.   ");    Node  type  =  n.getFirstChild();	  	non-compiled	[CE]  not  a  statement	192	None	add
985	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  exceptionHandler);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>(),    parent);    	non-compiled	[CE]  not  a  statement	99	None	replace
986	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleInstances,  new  AstControlFlowGraph());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleInstances,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleInstances,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    handleFunctions,    new    AstControlFlowGraph());    	non-compiled	[CE]  not  a  statement	109	None	replace
987	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  key);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  key);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  key);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  not  a  statement	79	None	replace
988	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "Failed    to    parse:   "    +    n);    new  IllegalArgumentException(   "Failed  to  parse:   "  +  n);	  	non-compiled	[CE]  not  a  statement	184	None	add
989	[BUG]  [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  handleFunction(n);  return;  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  handleFunction(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    ||  n!=  parent.getParent())  {  handleFunction(n);  return;	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
990	[BUG]  [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  handleExpr(n);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getNext();  ||  n!=  parent.getParent())  {  handleExpr(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    n.getNext();    ||  n!=  parent.getParent())  {  handleExpr(n);	  	non-compiled	[CE]  illegal  start  of  expression	116	None	add
991	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t));  [CE]  not  a  statement  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  t));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  not  a  statement	166	None	replace
992	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  type));  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  type));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  type));	  parent.replaceChild(n,    NodeUtil.newString(Token.NAME,    n));    	non-compiled	[CE]  not  a  statement	166	None	replace
993	[BUG]  [BUGGY]  parent.replaceChild(n,  handleSwitchCatch(n));  [CE]  not  a  statement  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleSwitchCatch(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleSwitchCatch(n));	  parent.replaceChild(n,    handleFunction(n));    	non-compiled	[CE]  not  a  statement	71	None	replace
994	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  break;  [CE]  not  a  statement  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  break;	  n    =    parent.getFirstChild();    n    =    parent.getFirstChild();    case    Token.CATCH:    handleCatch(n);    	non-compiled	[CE]  not  a  statement	11	None	replace
995	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  not  a  statement	17	None	replace
996	[BUG]  [BUGGY]  NeighborTraversal.traverse(t,  n,  parent);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(t,  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(t,  n,  parent);	  if(!shouldTraverseFunctions)    {    return;    }    If(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
997	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getCfg();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getCfg();	  if(!shouldTraverseFunctions)    {    return;    }    If(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	67	None	replace
998	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  child.getFirstChild();  n  =  parent.getLastChild();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  child.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    n  =  child.getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
999	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  getFirstChild();  n  =  parent.getLastChild();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getLastChild();  n  =  getFirstChild();  n  =  parent.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getLastChild();    n  =  getFirstChild();  n  =  parent.getLastChild();	  	non-compiled	[CE]  not  a  statement	7	None	add
1000	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	164	None	add
1001	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeTraversal.traverse(compiler,  n,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeTraversal.traverse(compiler,  n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    NodeTraversal.traverse(compiler,  n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	164	None	add
1002	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeUtil.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  not  a  statement  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  NodeUtil.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.FUNCTION));    NodeUtil.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  not  a  statement	164	None	add
1003	[BUG]  [BUGGY]  handleAccuracy(parent);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleAccuracy(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleAccuracy(parent);	          handleCatch(n);    handleAccuracy(n);    	non-compiled	[CE]  not  a  statement	162	None	replace
1004	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  entry);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    return;    	non-compiled	[CE]  ';'  expected	28	None	replace
1005	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.EMPTY));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.replaceChild(parent,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.replaceChild(parent,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  ';'  expected	207	None	replace
1006	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	202	None	add
1007	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FUNCTION));    Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  ';'  expected	202	None	add
1008	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t);  NodeTraversal.traverse(compiler,  n,  parent);	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  ';'  expected	157	None	replace
1009	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throw  new  IllegalStateException( "Failed  to  parse:   "  +  n.getString());  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throw  new  IllegalStateException( "Failed  to  parse:   "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    Throw  new  IllegalStateException( "Failed  to  parse:   "  +  n.getString());	  	non-compiled	[CE]  not  a  statement	134	None	add
1010	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throwable  m  =  t.getCatchableException( "Failed  to  parse:   "  +  n.getString());  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n.getString());  Throwable  m  =  t.getCatchableException( "Failed  to  parse:   "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    Throwable  m  =  t.getCatchableException( "Failed  to  parse:   "  +  n.getString());	  	non-compiled	[CE]  ';'  expected	134	None	add
1011	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  NodeUtil.removeChild(parent,  n);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t);  NodeUtil.removeChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  ';'  expected	159	None	replace
1012	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newExpr(parent),  n);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newExpr(parent),  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newExpr(parent),  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  ';'  expected	159	None	replace
1013	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  ';'  expected	41	None	add
1014	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [CE]  ';'  expected  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  ';'  expected	41	None	add
1015	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getFirstChild();  n  =  parent.getParent();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getParent();  n  =  parent.getFirstChild();  n  =  parent.getParent();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getParent();    n  =  parent.getFirstChild();  n  =  parent.getParent();	  	non-compiled	[CE]  ';'  expected	53	None	add
1016	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg,  handleFunction(t,  n));  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg,  handleFunction(t,  n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg,  handleFunction(t,  n));	  parent.replaceChild(n,    cfg);    	non-compiled	[CE]  ';'  expected	70	None	replace
1017	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlows,  new  AstControlFlowGraph  <  Node>());  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFlows,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFlows,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  ';'  expected	171	None	replace
1018	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  this);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  ';'  expected	118	None	replace
1019	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  return;  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	147	None	replace
1020	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  return;  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);  return;	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  ';'  expected	147	None	replace
1021	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  n.getString());  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " "  +  n.getString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " "  +  n.getString());	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  ';'  expected	123	None	replace
1022	[BUG]  [BUGGY]  Throwable  m  =  n.getString();  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  n.getString();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  n.getString();	  throw    new    IllegalArgumentException(   "   ".equals(n.getString()));    	non-compiled	[CE]  ';'  expected	123	None	replace
1023	[BUG]  [BUGGY]  handCount(n);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handCount(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handCount(n);	  handleCount(n);    	non-compiled	[CE]  ';'  expected	62	None	replace
1024	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "The  Token  is  not  a  valid  Node. ");  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "The  Token  is  not  a  valid  Node. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( "The  Token  is  not  a  valid  Node. ");	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	215	None	replace
1025	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "The  Token  is  not  a  valid  Node  type. ");  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  new  IllegalArgumentException( "The  Token  is  not  a  valid  Node  type. ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( "The  Token  is  not  a  valid  Node  type. ");	  Throwable    t    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  ';'  expected	215	None	replace
1026	[BUG]  [BUGGY]  throw  new  AstControlFlowGraphException( "Catch  is  not  implemented  by "  +  Token.name(n));  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  AstControlFlowGraphException( "Catch  is  not  implemented  by "  +  Token.name(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  AstControlFlowGraphException( "Catch  is  not  implemented  by "  +  Token.name(n));	  throw    new    AstControlFlowGraphException(   "   ");    	non-compiled	[CE]  ';'  expected	150	None	replace
1027	[BUG]  [BUGGY]  new  IllegalStateException( " ".equalsIgnoreCase(t.getSourceName()));  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ".equalsIgnoreCase(t.getSourceName()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ".equalsIgnoreCase(t.getSourceName()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
1028	[BUG]  [BUGGY]  new  IllegalStateException( " ".equalsIgnoreCase(n.getString()));  [CE]  ';'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  new  IllegalStateException( " ".equalsIgnoreCase(n.getString()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	new  IllegalStateException( " ".equalsIgnoreCase(n.getString()));	  throw    new    IllegalStateException(       "       ");    new    IllegalStateException(       "       ");    	non-compiled	[CE]  ';'  expected	199	None	replace
1029	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	187	None	replace
1030	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  cfg);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  cfg);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  cfg);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  ';'  expected	187	None	replace
1031	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleCatch(n,  new  AstControlFlowGraph());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  handleCatch(n,  new  AstControlFlowGraph());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  handleCatch(n,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  ')'  expected	187	None	replace
1032	[BUG]  [BUGGY]  n  =  n.getfirstChild();  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  n.getfirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getfirstChild();	  n    =    parent.getLastChild();    	non-compiled	[CE]  ';'  expected	21	None	replace
1033	[BUG]  [BUGGY]  handleFallbacks(n);  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFallbacks(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFallbacks(n);	  handleFallback(n);    	non-compiled	[CE]  ';'  expected	228	None	replace
1034	[BUG]  [BUGGY]  int  n  =  n.getFirstChild();  [CE]  ';'  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  int  n  =  n.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	int  n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    int    n    =    parent.getFirstChild();    	non-compiled	[CE]  ';'  expected	180	None	replace
1035	[BUG]  [BUGGY]  Throwable  m  =  t,  n.getMessage();  [CE]  ';'  expected  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t,  n.getMessage();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t,  n.getMessage();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getMessage();    	non-compiled	[CE]  ';'  expected	221	None	replace
1036	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorities);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  priorities);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  ';'  expected	80	None	replace
1037	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  nodePriorities);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  nodePriorities);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  ';'  expected	80	None	replace
1038	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]    StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  ';'  expected	120	None	add
1039	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  AstControlFlowGraph  <  Node>  traverse  =  compiler.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]      StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  AstControlFlowGraph  <  Node>  traverse  =  compiler.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    AstControlFlowGraph  <  Node>  traverse  =  compiler.traverse(compiler,  n,  this);	  	non-compiled	[CE]  ';'  expected	120	None	add
1040	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  [CE]  'else'  without  'if'  [FE]        StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  NodeTraversal.traverse(compiler,  n,  this);  }  else  {  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    NodeTraversal.traverse(compiler,  n,  this);  }  else  {  NodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  'else'  without  'if'	120	None	add
1041	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  nodeTraversal.traverse(compiler,  n,  this);  [CE]  ';'  expected  [FE]          StackOverflowError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  Preconditions.checkState(n.getType()  ==  Token.NAME);  nodeTraversal.traverse(compiler,  n,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,    n,    this);    Preconditions.checkState(n.getType()  ==  Token.NAME);  nodeTraversal.traverse(compiler,  n,  this);	  	non-compiled	[CE]  ';'  expected	120	None	add
1042	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  =  parent.getFirstChild();  n  =  n.getLastChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();  n  =  n.getLastChild();	  n    =    parent.getFirstChild();    n    =    parent.getLastChild();    	non-compiled	[CE]  ';'  expected	8	None	replace
1043	[BUG]  [BUGGY]  ||!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions  &&  NodeUtil.isExpressionNode(parent))  {  return;  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1044	[BUG]  [BUGGY]  ||!shouldTraverseFunctions  &&!t.getSource().equals(n.getSource()))  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions  &&!t.getSource().equals(n.getSource()))  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions  &&!t.getSource().equals(n.getSource()))  {  return;  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1045	[BUG]  [BUGGY]  ||!shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions  &&  n!=  parent.getFirstChild())  {  return;  }	  ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
1046	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.ACTIVITY);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.ACTIVITY);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext(n,  Context.ACTIVITY);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  ';'  expected	213	None	replace
1047	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.DISCONTINUE);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContext(n,  Context.DISCONTINUE);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext(n,  Context.DISCONTINUE);	  Context    cfg    =    Context.getCurrentContext(t,    n);    	non-compiled	[CE]  ';'  expected	213	None	replace
1048	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  handleChildren(n);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  handleChildren(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleCatch(n);  handleChildren(n);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
1049	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleChildren(n);  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleChildren(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleChildren(n);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
1050	[BUG]  [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  getCatch(n);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleCatch(n);    handleCatch(n);  handleCatch(n);  getCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleCatch(n);        handleCatch(n);    handleCatch(n);  getCatch(n);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
1051	[BUG]  [BUGGY]  n.replaceChild(n,  handleCatch(n));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.replaceChild(n,  handleCatch(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.replaceChild(n,  handleCatch(n));	  n.removeChild(n);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
1052	[BUG]  [BUGGY]  handleFunction(n);  return;  handleFloat(n);  return;  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleFloat(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleFloat(n);  return;	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1053	[BUG]  [BUGGY]  handleFunction(n);  return;  handleInstance(n);  return;  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n);  return;  handleInstance(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);    return;    handleInstance(n);  return;	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1054	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	188	None	replace
1055	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  int  priorityCounter);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  int  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  int  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  '.class'  expected	188	None	replace
1056	[BUG]  [BUGGY]  parent.replaceChild(n,  handlePosition);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handlePosition);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handlePosition);	  parent.replaceChild(n,    handleParent);    	non-compiled	[CE]  illegal  start  of  expression	222	None	replace
1057	[BUG]  [BUGGY]  Throwable  t  =  t.getCatchableException( " ");  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  t.getCatchableException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  t.getCatchableException( " ");	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1058	[BUG]  [BUGGY]  Throwable  t  =  t.getCatchableException();  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  t.getCatchableException();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  t.getCatchableException();	  throw    new    IllegalStateException(       "       ");    throw    new    IllegalStateException(   "       ");    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
1059	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getMessage()));  [CE]  <identifier>  expected  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(t.getMessage()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(t.getMessage()));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	122	None	replace
1060	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPosition,  root);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPosition,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPosition,  root);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1061	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionHandler,  root);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionHandler,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionHandler,  root);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	169	None	replace
1062	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  action);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  action);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>,  action);	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1063	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.handleAnalysisFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.handleAnalysisFlowGraph  <  Node>());  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.handleAnalysisFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    handleAnalysisFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
1064	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  this);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  this);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    cfg);    	non-compiled	[CE]  illegal  start  of  expression	197	None	replace
1065	[BUG]  [BUGGY]  handleEmbeddedObject(n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleEmbeddedObject(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleEmbeddedObject(n);	          handleCatch(n);    handleObject(n);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
1066	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch(t,  n));  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleCatch(t,  n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch(t,  n));	  parent.replaceChild(n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1067	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch(n),  handleCatch(n));  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  handleCatch(n),  handleCatch(n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch(n),  handleCatch(n));	  parent.replaceChild(n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
1068	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.replaceChild(parent,  n));  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.replaceChild(parent,  n));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.replaceChild(parent,  n));	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1069	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  NodeUtil.replaceChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t);  NodeUtil.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t);  NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
1070	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.replaceChild(parent,  n);  [CE]  ')'  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.replaceChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.replaceChild(parent,  n);	  parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,    n);    	non-compiled	[CE]  ')'  expected	156	None	replace
1071	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  if(shouldTraverseFunctions)  ==  return;  }  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  if(shouldTraverseFunctions)  ==  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)    {    return;    }    if(shouldTraverseFunctions)  ==  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	152	None	add
1072	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newExpr(n),  n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newExpr(n),  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newExpr(n),  n);	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
1073	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFallThrough(n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFallThrough(n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFallThrough(n));	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1074	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(t,  n));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(t,  n));  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(t,  n));	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1075	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  t);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n),  t);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n),  t);	  NodeTraversal.traverse(compiler,    n,    handleCatch(n));    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1076	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleCatch(n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleCatch(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleCatch(n);	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
1077	[BUG]  [BUGGY]          handleFunction(n);    handleFunction(n);  handleInit(n);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]          handleFunction(n);    handleFunction(n);  handleInit(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	                handleFunction(n);        handleFunction(n);    handleInit(n);	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
1078	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  handleFunction(n)));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  handleFunction(n)));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  handleFunction(n)));	  parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1079	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter);  return;  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter);  return;	  NodeTraversal.traverse(compiler,    n);    return;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
1080	[BUG]  [BUGGY]  Throwable  m  =  t.getCatchableException( " ");  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  t.getCatchableException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  t.getCatchableException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1081	[BUG]  [BUGGY]  Throwable  t  =  t.getCatchableDeclaration();  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  t  =  t.getCatchableDeclaration();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  t.getCatchableDeclaration();	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
1082	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY  |  Token.NAME));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY  |  Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY  |  Token.NAME));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1083	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY  |  Token.CATCH));  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY  |  Token.CATCH));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY  |  Token.CATCH));	  parent.replaceChild(n,    new    Node(Token.EMPTY));    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
1084	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  cfg);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg);  NodeTraversal.traverse(compiler,  n,  parent);  return;	  parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  illegal  start  of  expression	161	None	replace
1085	[BUG]  [BUGGY]  n.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);	  n.removeChild(parent);    NodeUtil.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1086	[BUG]  [BUGGY]  n.removeChild(first);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(first);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(first);	  n.removeChild(parent);    n.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
1087	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  break;  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  break;	  NodeTraversal.traverse(compiler,    n,    parent);    break;    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1088	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  loop);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  loop);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>,  loop);	  NodeTraversal.traverse(compiler,    n,    handleAstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1089	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	  throw    new    IllegalStateException(       "       ");    NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
1090	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
1091	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  ';'  expected  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  Node  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    Node  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  ';'  expected	167	None	add
1092	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  NodeTraversal.traverse(compiler,  n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  NodeTraversal.traverse(compiler,  n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    new    Node(Token.EMPTY));    NodeTraversal.traverse(compiler,  n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  expression	167	None	add
1093	[BUG]  [BUGGY]  n.removeChild(n);  parent.removeChild(n);  n.removeChild(n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  parent.removeChild(n);  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    parent.removeChild(n);  n.removeChild(n);	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
1094	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n).removeChild(n);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n).removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n).removeChild(n);	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
1095	[BUG]  [BUGGY]  n.removeChild(n);  n.removeChild(n);  }  else  {  n.removeChild(n);  [CE]  'else'  without  'if'  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  n.removeChild(n);  }  else  {  n.removeChild(n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    n.removeChild(n);  }  else  {  n.removeChild(n);	  	non-compiled	[CE]  'else'  without  'if'	89	None	add
1096	[BUG]  [BUGGY]  n.removeChild(n);  parent.removeChild(n);  n.removeChild(parent);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(n);  parent.removeChild(n);  n.removeChild(parent);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);    parent.removeChild(n);  n.removeChild(parent);	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
1097	[BUG]  [BUGGY]  n  ==  null  &&!shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n  ==  null  &&!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  ==  null  &&!shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	151	None	replace
1098	[BUG]  [BUGGY]  parent  ==  null  ||!shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent  ==  null  ||!shouldTraverseFunctions)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent  ==  null  ||!shouldTraverseFunctions)  {  return;  }	  parent    ==    null    &&!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	151	None	replace
1099	[BUG]  [BUGGY]  handleMatch(n);  return;  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleMatch(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleMatch(n);  return;	  handleStatement(n);    return;    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1100	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.BLOCK)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.BLOCK)  {  return;  }  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  n.getModule()  ==  Token.BLOCK)  {  return;  }	  if(shouldTraverseFunctions    ||    t.getModule()    ==    Token.BLOCK)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	211	None	replace
1101	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.FALSE));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.replaceChild(parent,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.replaceChild(parent,  new  Node(Token.FALSE));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FALSE));    	non-compiled	[CE]  illegal  start  of  expression	209	None	replace
1102	[BUG]  [BUGGY]  parent.replaceChild(n,  charAt);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  charAt);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  charAt);	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
1103	[BUG]  [BUGGY]  handleCategory(parent);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCategory(parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCategory(parent);	          handleCatch(n);    handleCategory(n);    	non-compiled	[CE]  illegal  start  of  expression	219	None	replace
1104	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  old);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  old);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    parent.replaceChild(n,  old);  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1105	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.NAME));  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.NAME));    parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.NAME));	  	non-compiled	[CE]  illegal  start  of  expression	204	None	add
1106	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.BLOCK);  [CE]  <identifier>  expected  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  Token.BLOCK);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " "  +  Token.BLOCK);	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
1107	[BUG]  [BUGGY]  Throwable  m  =  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Throwable  m  =  new  IllegalArgumentException( " ");  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  m  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ".equals(Token.BLOCK));    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
1108	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getCatchableExceptionHandler();  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getCatchableExceptionHandler();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");  Throwable  m  =  n.getCatchableExceptionHandler();	  throw    new    IllegalArgumentException(       "       ");    Throwable    m    =    t.getCatchableExceptionHandler();    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1109	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  t);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  t);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
1110	[BUG]  [BUGGY]  NeighborTraversal.traverse(t,  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(t,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(t,  n);	  NeighborTraversal.traverse(compiler,    n);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
1111	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.replaceChild(parent,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.FUNCTION));    	non-compiled	[CE]  illegal  start  of  expression	203	None	replace
1112	[BUG]  [BUGGY]  handleInstanceFunction(n);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleInstanceFunction(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstanceFunction(n);	          handleFunction(n);    handleInstance(n);    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
1113	[BUG]  [BUGGY]  handleOutput(n);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleOutput(n);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOutput(n);	          handleFunction(n);    handleInstance(n);    	non-compiled	[CE]  illegal  start  of  expression	201	None	replace
1114	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  cfg);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  cfg);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  cfg);	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
1115	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  t);  parent.replaceChild(n,  t);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  t);  parent.replaceChild(n,  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  t);  parent.replaceChild(n,  t);	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
1116	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  Node.newString(Token.NAME,  t.getSourceName()));  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  Node.newString(Token.NAME,  t.getSourceName()));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  Node.newString(Token.NAME,  t.getSourceName()));	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
1117	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  t);  [CE]  illegal  start  of  expression  [FE]          RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);  parent.replaceChild(n,  t);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    parent);    parent.replaceChild(n,  t);	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
1118	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.toString());  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.toString());  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n.toString());	  throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n.getString());    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1119	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleExpr(n);    return;    	non-compiled	[CE]  ';'  expected	174	None	replace
1120	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  child.getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  child.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    n  =  child.getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1121	[BUG]  [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  getFirstChild();  n  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  n  =  getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getFirstChild();        n    =    parent.getFirstChild();    n  =  getFirstChild();  n  =  parent.getFirstChild();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
1122	[BUG]  [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  parent  =  parent.getParent();  n  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n    =    parent.getParent();    n  =  parent.getNext();  parent  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n        =        parent.getParent();        n    =    parent.getNext();    parent  =  parent.getParent();  n  =  parent.getNext();	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1123	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.FALSE));	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
1124	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  Node.newNumber(0));  parent.replaceChild(n,  new  Node(Token.FALSE));  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));  parent.replaceChild(n,  Node.newNumber(0));  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.FALSE));    parent.replaceChild(n,  Node.newNumber(0));  parent.replaceChild(n,  new  Node(Token.FALSE));	  	non-compiled	[CE]  illegal  start  of  expression	208	None	add
1125	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
1126	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  n.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  n.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    n.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
1127	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        NodeUtil.removeChild(parent,    n);    parent.replaceChild(n,  n);  NodeUtil.removeChild(parent,  n);	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
1128	[BUG]  [BUGGY]  handleCatch(t,  n,  parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(t,  n,  parent);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(t,  n,  parent);	  handleCatch(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1129	[BUG]  [BUGGY]  handleCatch(n,  parent,  root);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleCatch(n,  parent,  root);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent,  root);	  handleCatch(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1130	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  new  IllegalStateException(   "Failed  to  parse:   "  +  n);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "Failed    to    parse:   "    +    n);    new  IllegalStateException(   "Failed  to  parse:   "  +  n);	  	non-compiled	[CE]  illegal  start  of  expression	132	None	add
1131	[BUG]  [BUGGY]  n.removeChild(root);  n.removeChild(root);  break;  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  n.removeChild(root);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);  n.removeChild(root);  break;	  n.removeChild(parent);    n.removeChild(parent);    break;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1132	[BUG]  [BUGGY]  n.removeChild(parent);  break;  [CE]  illegal  start  of  expression  [FE]                RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(parent);  break;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);  break;	  n.removeChild(parent);    n.removeChild(parent);    break;    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1133	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContextReference();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  Context  cfg  =  t.getCurrentContextReference();  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContextReference();	  Context    cfg    =    t.getCurrentContext();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
1134	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;	  if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError    <    Node>    handleError(n);    return;    	non-compiled	[CE]  ';'  expected	175	None	replace
1135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPosition,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPosition,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPosition,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionHandler,  priorityComparator);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	170	None	replace
1137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  null);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  null);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  null);	  NodeTraversal.traverse(compiler,    n,    root);    return;    	non-compiled	[CE]  illegal  start  of  expression	189	None	replace
1138	[BUG]  [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));  parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,        parent);        parent.replaceChild(n,    new    Node(Token.EMPTY));    parent.replaceChild(n,  cfg);  parent.replaceChild(n,  new  Node(Token.EMPTY));	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1139	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.ASSIGN);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.ASSIGN);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.ASSIGN);	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1140	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.BLOCK);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.BLOCK);	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1141	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.CR);  [CE]  illegal  start  of  expression  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.CR);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but "  +  Token.CR);	  throw    new    IllegalStateException(   "Catch    is    not    an    ARRAY    but   ");    	non-compiled	[CE]  illegal  start  of  expression	191	None	replace
1142	[BUG]  [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(n);  n.removeChild(root);  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  NodeUtil.removeChild(n);  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    NodeUtil.removeChild(n);  n.removeChild(root);	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
1143	[BUG]  [BUGGY]  n.removeChild(root);  n.removeChild(root).removeChild(root);  [CE]  illegal  start  of  expression  [FE]      RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  n.removeChild(root).removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    n.removeChild(root).removeChild(root);	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
1144	[BUG]  [BUGGY]  n.removeChild(root);  Node  n.removeChild(root);  [CE]  ';'  expected  [FE]        RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.removeChild(root);  Node  n.removeChild(root);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);    Node  n.removeChild(root);	  	non-compiled	[CE]  ';'  expected	91	None	add
1145	[BUG]  [BUGGY]  parent.replaceChild(n,  t,  handleCatch);  [CE]  illegal  start  of  expression  [FE]          RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  t,  handleCatch);  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t,  handleCatch);	  parent.replaceChild(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1146	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t));  [CE]  illegal  start  of  expression  [FE]            RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION,  t));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION,  t));	  parent.replaceChild(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1147	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.CATCH,  t));  [CE]  illegal  start  of  expression  [FE]              RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  new  Node(Token.CATCH,  t));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.CATCH,  t));	  parent.replaceChild(n,    t);    	non-compiled	[CE]  illegal  start  of  expression	223	None	replace
1148	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent);  return;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent);  return;	  if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
1149	[BUG]  [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME));  [CE]  illegal  start  of  expression  [FE]    RuntimeException    [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  n.replaceChild(parent,  new  Node(Token.NAME));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.replaceChild(parent,  new  Node(Token.NAME));	  parent.replaceChild(n,    parent);    parent.replaceChild(n,    new    Node(Token.NAME));    	non-compiled	[CE]  illegal  start  of  expression	205	None	replace
1150	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newNumber(parent));  [CE]  illegal  start  of  expression  [FE]                  RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  parent.replaceChild(n,  NodeUtil.newNumber(parent));  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newNumber(parent));	  parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);    parent.replaceChild(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1151	[BUG]  [BUGGY]  ||!shouldTraverseFunctions)  {  return;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  ||!shouldTraverseFunctions)  {  return;  [BUGGY]      case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions)  {  return;	  if(!shouldTraverseFunctions)    {    return;    }    ||!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
1152	[BUG]  [BUGGY]  handleFunction(n,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]        RuntimeException      [CONTEXT]      handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);      [BUGGY]  handleFunction(n,  parent,  exceptionHandler);  [BUGGY]      return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n,  parent,  exceptionHandler);	  handleFunction(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	178	None	replace
