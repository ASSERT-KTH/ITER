bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context  cfg  =  t.getCurrentContext();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  t.getCurrentContext();  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  t.getCurrentContext();	      Context    cfg    =    Context.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  Context  cfg  =  context.getCurrentContext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  context.getCurrentContext();  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  context.getCurrentContext();	      Context    cfg    =    Context.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  Context  cfg  =  parent.getCurrentContext();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  parent.getCurrentContext();  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  parent.getCurrentContext();	      Context    cfg    =    Context.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
4	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(n);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  Context.getCurrentContext(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext(n);	      Context    cfg    =    Context.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	23	3	add
6	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	23	3	add
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    parent.getFirstChild();    n  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	23	3	add
8	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getLastChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    n  =  parent.getLastChild();	  	compilable	  [FE]  AssertionFailedError  	23	3	add
9	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  Node  n  =  parent.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    Node  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	23	None	add
10	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  case  Token.BLOCK:  handleBlock(n);  [CE]  duplicate  case  label  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  case  Token.BLOCK:  handleBlock(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  case  Token.BLOCK:  handleBlock(n);	  	non-compiled	[CE]  duplicate  case  label	23	None	add
11	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  case  Token.CATCH:  handleCatch(n);  [CE]  duplicate  case  label  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  case  Token.CATCH:  handleCatch(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  case  Token.CATCH:  handleCatch(n);	  	non-compiled	[CE]  duplicate  case  label	23	None	add
12	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  case  Token.NAME:  handleNumber(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  n  =  parent.getFirstChild();  case  Token.NAME:  handleNumber(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    n  =  parent.getFirstChild();  case  Token.NAME:  handleNumber(n);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Comparator<DiGraphNode<Node,Branch>>)	27	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)	27	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>)  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Deque<Node>)	27	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)	27	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]                AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	27	None	replace
18	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	24	11	replace
19	[BUG]  [BUGGY]  n  =  n.getFirstChild();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getFirstChild();	  n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	24	11	replace
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	24	12	replace
21	[BUG]  [BUGGY]  n  =  parent.getLastChild();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getLastChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getLastChild();	  n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	24	12	replace
22	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getLastChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  n.getLastChild();	  n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	24	11	replace
23	[BUG]  [BUGGY]  n  =  n.getLastChild();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getLastChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getLastChild();	  n    =    parent.getFirstChild();    	compilable	  [FE]  RuntimeException  	24	11	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  break;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  break;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent);  break;	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	12	None	replace
25	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext();  break;  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  Context.getCurrentContext();  break;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext();  break;	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n);  return;	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	12	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  return;  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root);  return;	      NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	16	None	replace
28	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  return;  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent);  return;	      NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	16	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]                  AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  return;  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  return;	      NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	16	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]                    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	16	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root);	      NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	16	None	replace
32	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	1	None	add
33	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  t.getCause();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  t.getCause();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  m  =  t.getCause();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
34	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  exceptionHandler  =  t.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  exceptionHandler  =  t.getExceptionHandler();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  exceptionHandler  =  t.getExceptionHandler();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
35	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  t.getCatchableExceptionHandler();  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  t.getCatchableExceptionHandler();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  m  =  t.getCatchableExceptionHandler();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
36	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  t.getCause();  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  t.getCause();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  cause  =  t.getCause();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
37	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);	  	compilable	  [FE]  RuntimeException  	25	12	add
38	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    parent.replaceChild(n,  parent);	  	compilable	  [FE]  RuntimeException  	25	12	add
39	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    Node  parent  =  n.getParent();  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	25	None	add
40	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  parent.replaceChild(parent,  n);  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  parent.replaceChild(parent,  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    Node  parent  =  n.getParent();  parent.replaceChild(parent,  n);	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	25	None	add
41	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  	compilable	  [FE]  RuntimeException  	25	12	add
42	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);  parent.replaceChild(n,  parent);	  	compilable	  [FE]  RuntimeException  	25	12	add
43	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    Node  parent  =  n.getParent();  parent.replaceChild(parent,  new  Node(Token.FUNCTION));	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	25	None	add
44	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent);  parent.replaceChild(n,  parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]              RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent);  parent.replaceChild(n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent);  parent.replaceChild(n,  parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleCatch(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	        handleCatch(n);    handleCatch(n);	  	compilable	  [FE]  AssertionFailedError  	17	3	add
46	[BUG]  [BUGGY]      handleCatch(n);  handleCatch(n);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleCatch(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleCatch(n);	  	compilable	  [FE]  AssertionFailedError  	17	3	add
47	[BUG]  [BUGGY]      handleCatch(n);  handleChildren(n);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleChildren(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleChildren(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
48	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleFunction(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	        handleCatch(n);    handleFunction(n);	  	compilable	  [FE]  RuntimeException  	17	12	add
49	[BUG]  [BUGGY]      handleCatch(n);  handleFunction(n);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleFunction(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleFunction(n);	  	compilable	  [FE]  RuntimeException  	17	12	add
50	[BUG]  [BUGGY]      handleCatch(n);  handleChild(n);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleChild(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleChild(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
51	[BUG]  [BUGGY]      handleCatch(n);  handleSatch(n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleSatch(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleSatch(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
52	[BUG]  [BUGGY]      handleCatch(n);  handleObject(n);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleObject(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleObject(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  n  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    parent.getParent();    n  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	9	3	add
54	[BUG]  [BUGGY]  n  =  parent.getParent();  n  =  parent.getParent();  [FE]  AssertionFailedError  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  n  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    n  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	9	3	add
55	[BUG]  [BUGGY]  n  =  parent.getParent();  Node  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  Node  n  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    Node  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	9	None	add
56	[BUG]  [BUGGY]  n  =  parent.getParent();  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  Node  parent  =  n.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	9	None	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    parent.getParent();    n  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	9	3	add
58	[BUG]  [BUGGY]  n  =  parent.getParent();  n  =  parent.getNext();  [FE]  AssertionFailedError  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  n  =  parent.getNext();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    n  =  parent.getNext();	  	compilable	  [FE]  AssertionFailedError  	9	3	add
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  parent  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n    =    parent.getParent();    parent  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	9	3	add
60	[BUG]  [BUGGY]  n  =  parent.getParent();  parent  =  parent.getParent();  [FE]  AssertionFailedError  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  parent  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    parent  =  parent.getParent();	  	compilable	  [FE]  AssertionFailedError  	9	3	add
61	[BUG]  [BUGGY]  handleChildren(n);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleChildren(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleChildren(n);	      handleCatch(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
62	[BUG]  [BUGGY]  handleCount(n);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleCount(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCount(n);	      handleCatch(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
63	[BUG]  [BUGGY]  handleCatch(n,  parent);  [CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleCatch(n,  parent);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleCatch(n,  parent);	      handleCatch(n);    	non-compiled	[CE]  method  handleCatch  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	18	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
65	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)    {    return;    }    if(!shouldTraverseFunctions)  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	3	3	add
66	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  if(!shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError  if(!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  not  a  statement	3	None	add
67	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  If(!shouldTraverseFunctions)  {  return;  }  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  If(!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)    {    return;    }    If(!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  ';'  expected	3	None	add
68	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  ||!shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  ||!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)    {    return;    }    ||!shouldTraverseFunctions)  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
69	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch);  [CE]  cannot  find  symbol  handleCatch  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  handleCatch);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  handleCatch	26	None	replace
70	[BUG]  [BUGGY]  parent.replaceChild(n,  cfg);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  cfg);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  cfg);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	26	None	replace
71	[BUG]  [BUGGY]  parent.replaceChild(n,  handleFunction(n));  [CE]  'void'  type  not  allowed  here  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  handleFunction(n));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleFunction(n));	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  'void'  type  not  allowed  here	26	None	replace
72	[BUG]  [BUGGY]  parent.replaceChild(n,  handleRaw(n));  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  handleRaw(n));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleRaw(n));	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
73	[BUG]  [BUGGY]  parent.replaceChild(n,  handleCatch(n));  [CE]  'void'  type  not  allowed  here  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  handleCatch(n));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleCatch(n));	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  'void'  type  not  allowed  here	26	None	replace
74	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
75	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  exceptionHandler  =  t.getExceptionHandler();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  exceptionHandler  =  t.getExceptionHandler();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    Throwable  exceptionHandler  =  t.getExceptionHandler();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
76	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  m  =  t.getCause();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  m  =  t.getCause();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    Throwable  m  =  t.getCause();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
77	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  t  =  t.getCause();  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  t  =  t.getCause();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    Throwable  t  =  t.getCause();	  	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	7	None	add
78	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  cause  =  t.getCause();  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  cause  =  t.getCause();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    Throwable  cause  =  t.getCause();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Node)	13	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Map<DiGraphNode<Node,Branch>,Integer>)	13	None	replace
81	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameNode);  [CE]  cannot  find  symbol  nameNode  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nameNode);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nameNode);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  cannot  find  symbol  nameNode	13	None	replace
82	[BUG]  [BUGGY]  ||!shouldTraverseFunctions)  {  return;  }  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  ||!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	||!shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
83	[BUG]  [BUGGY]  Context.checkState(shouldTraverseFunctions);  [CE]  cannot  find  symbol  Context  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context.checkState(shouldTraverseFunctions);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkState(shouldTraverseFunctions);	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  Context	4	None	replace
84	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NeighborTraversal.traverse(compiler,  n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n,  parent);	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	4	None	replace
85	[BUG]  [BUGGY]  NeighborTraversal.traverse(compiler,  n);  [CE]  cannot  find  symbol  NeighborTraversal  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NeighborTraversal.traverse(compiler,  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NeighborTraversal.traverse(compiler,  n);	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  NeighborTraversal	4	None	replace
86	[BUG]  [BUGGY]  Context.checkNotNull(parent);  [CE]  cannot  find  symbol  Context  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context.checkNotNull(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context.checkNotNull(parent);	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  cannot  find  symbol  Context	4	None	replace
87	[BUG]  [BUGGY]  n.removeChild(entry);  [CE]  cannot  find  symbol  entry  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(entry);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(entry);	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  entry	6	None	replace
88	[BUG]  [BUGGY]  n.removeChild(name);  [CE]  cannot  find  symbol  name  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(name);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(name);	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  name	6	None	replace
89	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n.removeChild(n);	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	6	12	replace
90	[BUG]  [BUGGY]  n.removeChild(n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(n);	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	6	12	replace
91	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(root);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n.removeChild(root);	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	6	12	replace
92	[BUG]  [BUGGY]  n.removeChild(root);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(root);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(root);	  n.removeChild(parent);    	compilable	  [FE]  RuntimeException  	6	12	replace
93	[BUG]  [BUGGY]  handleOwner(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleOwner(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOwner(n);	      handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
94	[BUG]  [BUGGY]  handleOther(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleOther(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOther(n);	      handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
95	[BUG]  [BUGGY]  handleStatement(n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleStatement(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n);	      handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>());  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	22	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAstControlFlowGraph  <  Node>());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph  <  Node>());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]                  AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  parent);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	22	None	replace
100	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleFunction(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	        handleFunction(n);    handleFunction(n);	  	compilable	  [FE]  RuntimeException  	20	12	add
101	[BUG]  [BUGGY]      handleFunction(n);  handleFunction(n);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleFunction(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleFunction(n);	  	compilable	  [FE]  RuntimeException  	20	12	add
102	[BUG]  [BUGGY]      handleFunction(n);  handleStatement(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleStatement(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleStatement(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
103	[BUG]  [BUGGY]      handleFunction(n);  handleUnexpectedFunction(n);  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleUnexpectedFunction(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleUnexpectedFunction(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
104	[BUG]  [BUGGY]      handleFunction(n);  handleUnknown(n);  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleUnknown(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleUnknown(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
105	[BUG]  [BUGGY]      handleFunction(n);  handleStdFunction(n);  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleStdFunction(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleStdFunction(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
106	[BUG]  [BUGGY]      handleFunction(n);  handleUnder(n);  [CE]  cannot  find  symbol  [FE]              RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleUnder(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleUnder(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph());  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph());  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph());  [CE]  cannot  find  symbol  handleFunctions  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleFunctions,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol  handleFunctions	19	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph,  new  AstControlFlowGraph());  [CE]  cannot  find  symbol  handleAnalysisFlowGraph  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph,  new  AstControlFlowGraph());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  cannot  find  symbol  handleAnalysisFlowGraph	19	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  parent);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
112	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  n.getParent();	  n    =    parent.getParent();    	compilable	  [FE]  RuntimeException  	10	12	replace
113	[BUG]  [BUGGY]  n  =  n.getParent();  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getParent();	  n    =    parent.getParent();    	compilable	  [FE]  RuntimeException  	10	12	replace
114	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getNext();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  parent.getNext();	  n    =    parent.getParent();    	compilable	  [FE]  RuntimeException  	10	12	replace
115	[BUG]  [BUGGY]  n  =  parent.getNext();  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getNext();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getNext();	  n    =    parent.getParent();    	compilable	  [FE]  RuntimeException  	10	12	replace
116	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getNext();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  n.getNext();	  n    =    parent.getParent();    	compilable	  [FE]  RuntimeException  	10	12	replace
117	[BUG]  [BUGGY]  n  =  n.getNext();  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  n.getNext();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  n.getNext();	  n    =    parent.getParent();    	compilable	  [FE]  RuntimeException  	10	12	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root);	      NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	14	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>)  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities);	      NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Map<DiGraphNode<Node,Branch>,Integer>)	14	None	replace
120	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	NodeTraversal.traverse(compiler,  n,  this);	      NodeTraversal.traverse(compiler,    n);    	compilable	  [FE]  StackOverflowError  	14	12	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [FE]  StackOverflowError  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this);	      NodeTraversal.traverse(compiler,    n);    	compilable	  [FE]  StackOverflowError  	14	12	replace
122	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
123	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(n.getString()));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ".equals(n.getString()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	2	None	replace
124	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(Token.BLOCK));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(Token.BLOCK));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ".equals(Token.BLOCK));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	2	None	replace
125	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n.removeChild(parent);    n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	5	12	add
126	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    n.removeChild(parent);	  	compilable	  [FE]  RuntimeException  	5	12	add
127	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  n.removeChild(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getFirstChild();  n.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    Node  n  =  parent.getFirstChild();  n.removeChild(parent);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	5	None	add
128	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getParent();  n.removeChild(parent);  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  Node  n  =  parent.getParent();  n.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    Node  n  =  parent.getParent();  n.removeChild(parent);	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	5	None	add
129	[BUG]  [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  break;  [CE]  unreachable  statement  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  n.removeChild(parent);  break;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    n.removeChild(parent);  break;	  	non-compiled	[CE]  unreachable  statement	5	None	add
130	[BUG]  [BUGGY]  n.removeChild(parent);  Node  n.removeChild(parent);  [CE]  ';'  expected  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  Node  n.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    Node  n.removeChild(parent);	  	non-compiled	[CE]  ';'  expected	5	None	add
131	[BUG]  [BUGGY]  Throwables.throw(new  IllegalStateException( " "));  [CE]  <identifier>  expected  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Throwables.throw(new  IllegalStateException( " "));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwables.throw(new  IllegalStateException( " "));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
132	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalStateException( "Failed  to  parse: "  +  n);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
133	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n);	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
134	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
135	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Failed  to  parse: "  +  n.getString());	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
136	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  exceptionHandler  =  t.getAstRoot(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  exceptionHandler  =  t.getAstRoot(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  exceptionHandler  =  t.getAstRoot(n);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
137	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  exceptionHandler  =  t.getAstRoot(parent);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  exceptionHandler  =  t.getAstRoot(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  exceptionHandler  =  t.getAstRoot(parent);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
138	[BUG]  [BUGGY]      handleFunction(n);  handleFloat(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleFloat(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleFloat(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
139	[BUG]  [BUGGY]      handleFunction(n);  handleUnit(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleUnit(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleUnit(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
140	[BUG]  [BUGGY]  n.removeChild(value);  [CE]  cannot  find  symbol  value  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(value);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(value);	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  value	6	None	replace
141	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleFunction(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	handleFunction(n);  return;	      	compilable	  [FE]  RuntimeException  	12	12	replace
142	[BUG]  [BUGGY]  handleFunction(n);  return;  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleFunction(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n);  return;	      	compilable	  [FE]  RuntimeException  	12	12	replace
143	[BUG]  [BUGGY]  handleStatement(n);  return;  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleStatement(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleStatement(n);  return;	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
144	[BUG]  [BUGGY]  handleFallThrough(n);  return;  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleFallThrough(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFallThrough(n);  return;	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
145	[BUG]  [BUGGY]  handleDeep(n);  return;  [CE]  cannot  find  symbol  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleDeep(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleDeep(n);  return;	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
146	[BUG]  [BUGGY]  handleFall(n);  return;  [CE]  cannot  find  symbol  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleFall(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFall(n);  return;	      	non-compiled	[CE]  cannot  find  symbol	12	None	replace
147	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    NodeTraversal.traverse(compiler,  n,  parent);  return;	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	7	None	add
148	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  NodeTraversal.traverse(compiler,  n);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  NodeTraversal.traverse(compiler,  n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    NodeTraversal.traverse(compiler,  n);  return;	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	7	None	add
149	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	7	None	add
150	[BUG]  [BUGGY]  throw  new  AstControlFlowGraphException( " ");  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  AstControlFlowGraphException( " ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  AstControlFlowGraphException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
151	[BUG]  [BUGGY]  parent  ==  null  &&!shouldTraverseFunctions)  {  return;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent  ==  null  &&!shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent  ==  null  &&!shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  not  a  statement	4	None	replace
152	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	if(shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	compilable	  [FE]  RuntimeException  	4	5	replace
153	[BUG]  [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(shouldTraverseFunctions)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	compilable	  [FE]  RuntimeException  	4	5	replace
154	[BUG]  [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	AstControlFlowGraph  <  Node>  cfg  =  t.getControlFlowGraph();	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	4	None	replace
155	[BUG]  [BUGGY]  handleKey(n);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleKey(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleKey(n);	      handleCatch(n);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
156	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.replaceChild(parent,  n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.replaceChild(parent,  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    NodeUtil.replaceChild(parent,  n);	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
157	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,  n,  parent);	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	25	None	add
158	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	25	12	add
159	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeUtil.removeChild(parent,  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    NodeUtil.removeChild(parent,  n);	  	compilable	  [FE]  RuntimeException  	25	12	add
160	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  Node  parent  =  n.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    Node  parent  =  n.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	25	None	add
161	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]            RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    NodeTraversal.traverse(compiler,  n,  parent);  return;	  	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	25	None	add
162	[BUG]  [BUGGY]      handleCatch(n);  handleAccuracy(n);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleAccuracy(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleAccuracy(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
163	[BUG]  [BUGGY]      handleCatch(n);  handleMatch(n);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleMatch(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleMatch(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
164	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	26	12	replace
165	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.FUNCTION));	  parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	26	12	replace
166	[BUG]  [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  n));  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  n));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  NodeUtil.newString(Token.NAME,  n));	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
167	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	26	12	replace
168	[BUG]  [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  new  Node(Token.EMPTY));	  parent.replaceChild(n,    parent);    	compilable	  [FE]  RuntimeException  	26	12	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,int)	27	None	replace
170	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Comparator<DiGraphNode<Node,Branch>>,int)  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Comparator<DiGraphNode<Node,Branch>>,int)	27	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph,  new  AstControlFlowGraph  <  Node>());  [CE]  cannot  find  symbol  handleAnalysisFlowGraph  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph,  new  AstControlFlowGraph  <  Node>());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleAnalysisFlowGraph,  new  AstControlFlowGraph  <  Node>());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  cannot  find  symbol  handleAnalysisFlowGraph	22	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n));  [CE]  'void'  type  not  allowed  here  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  handleCatch(n));  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  handleCatch(n));	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  'void'  type  not  allowed  here	22	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  root,  n);	      NodeTraversal.traverse(compiler,    n);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	14	None	replace
174	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleExpr(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError  <  Node>  handleExpr(n);  return;	  	non-compiled	[CE]  ';'  expected	3	None	add
175	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  AssertionFailedError  <  Node>  handleError(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)    {    return;    }    AssertionFailedError  <  Node>  handleError(n);  return;	  	non-compiled	[CE]  ';'  expected	3	None	add
176	[BUG]  [BUGGY]      handleOp(n);  return;  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleOp(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleOp(n);  return;	  	non-compiled	[CE]  cannot  find  symbol	11	None	add
177	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  n.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  n.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    NodeUtil.removeChild(parent);  n.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	5	None	add
178	[BUG]  [BUGGY]  handleFunction(n,  parent);  [CE]  method  handleFunction  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleFunction(n,  parent);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFunction(n,  parent);	      handleFunction(n);    	non-compiled	[CE]  method  handleFunction  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	21	None	replace
179	[BUG]  [BUGGY]  handleOp(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleOp(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleOp(n);	      handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
180	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  int  n  =  parent.getFirstChild();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  int  n  =  parent.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    int  n  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	23	None	add
181	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  node  =  parent.getFirstChild();  [CE]  cannot  find  symbol  node  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getFirstChild();  node  =  parent.getFirstChild();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getFirstChild();    node  =  parent.getFirstChild();	  	non-compiled	[CE]  cannot  find  symbol  node	23	None	add
182	[BUG]  [BUGGY]  n  =  parent.getParent();  node  =  parent.getParent();  [CE]  cannot  find  symbol  node  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  node  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    node  =  parent.getParent();	  	non-compiled	[CE]  cannot  find  symbol  node	9	None	add
183	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  t.getMessage());	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
184	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  RuntimeException  	2	12	replace
185	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( "Failed  to  parse: "  +  n);	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  RuntimeException  	2	12	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph());  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph());  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  return;  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  root);  return;	      NodeTraversal.traverse(compiler,    n,    parent);    return;    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	16	None	replace
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
191	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  an  ARRAY  but ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
192	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
193	[BUG]  [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( "Catch  is  not  a  valid  Node  type. ");	  throw    new    IllegalStateException(   "   ");    	compilable	  [FE]  RuntimeException  	8	12	replace
194	[BUG]  [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(parent);  NodeUtil.removeChild(parent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);    NodeUtil.removeChild(parent);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	5	None	add
195	[BUG]  [BUGGY]  n.removeChild(key);  [CE]  cannot  find  symbol  key  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n.removeChild(key);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(key);	  n.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  key	6	None	replace
196	[BUG]  [BUGGY]  n  =  parent.getParent();  int  n  =  parent.getParent();  [CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  n  =  parent.getParent();  int  n  =  parent.getParent();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n    =    parent.getParent();    int  n  =  parent.getParent();	  	non-compiled	[CE]  variable  n  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	9	None	add
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg);  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  cfg);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	19	None	replace
198	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException(   "   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException(   "   ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    Throw  new  IllegalStateException(   "   ");	  	non-compiled	[CE]  not  a  statement	7	None	add
199	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException(   "   ");  [CE]  unreachable  statement  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  new  IllegalStateException(   "   ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    new  IllegalStateException(   "   ");	  	non-compiled	[CE]  unreachable  statement	7	None	add
200	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  m  =  t.getMessage();  [CE]  cannot  find  symbol  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  m  =  t.getMessage();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalStateException(   "   ");    Throwable  m  =  t.getMessage();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
201	[BUG]  [BUGGY]      handleFunction(n);  handleInstance(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleFunction(n);  handleInstance(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleFunction(n);    handleInstance(n);	  	non-compiled	[CE]  cannot  find  symbol	20	None	add
202	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	25	12	add
203	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FUNCTION));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FUNCTION));	  	compilable	  [FE]  RuntimeException  	25	12	add
204	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));	  	compilable	  [FE]  RuntimeException  	25	12	add
205	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.NAME));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.NAME));	  	compilable	  [FE]  RuntimeException  	25	12	add
206	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	25	12	add
207	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.EMPTY));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.EMPTY));	  	compilable	  [FE]  RuntimeException  	25	12	add
208	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));	  	compilable	  [FE]  RuntimeException  	25	12	add
209	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  parent);  parent.replaceChild(n,  new  Node(Token.FALSE));  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,    parent);    parent.replaceChild(n,  new  Node(Token.FALSE));	  	compilable	  [FE]  RuntimeException  	25	12	add
210	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [CE]  incomparable  types:  JSModule  and  int  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  t.getModule()  ==  Token.FUNCTION)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  incomparable  types:  JSModule  and  int	4	None	replace
211	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()  ==  Token.BLOCK)  {  return;  }  [CE]  incomparable  types:  JSModule  and  int  [FE]      AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(shouldTraverseFunctions  ||  t.getModule()  ==  Token.BLOCK)  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  t.getModule()  ==  Token.BLOCK)  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  incomparable  types:  JSModule  and  int	4	None	replace
212	[BUG]  [BUGGY]  if(shouldTraverseFunctions  ||  handleBreak(n))  {  return;  }  [CE]  'void'  type  not  allowed  here  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  if(shouldTraverseFunctions  ||  handleBreak(n))  {  return;  }  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(shouldTraverseFunctions  ||  handleBreak(n))  {  return;  }	  if(!shouldTraverseFunctions)    {    return;    }    	non-compiled	[CE]  'void'  type  not  allowed  here	4	None	replace
213	[BUG]  [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  Context.getCurrentContext(t,  n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  Context.getCurrentContext(t,  n);	      Context    cfg    =    Context.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
214	[BUG]  [BUGGY]  Context  cfg  =  n.getCurrentContext();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Context  cfg  =  n.getCurrentContext();  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Context  cfg  =  n.getCurrentContext();	      Context    cfg    =    Context.getCurrentContext();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
215	[BUG]  [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  [CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  Throwable  t  =  new  IllegalArgumentException( " ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	Throwable  t  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  variable  t  is  already  defined  in  method  visit(NodeTraversal,Node,Node)	2	None	replace
216	[BUG]  [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  [CE]  duplicate  case  label  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      case  Token.CATCH:  handleCatch(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        case  Token.CATCH:  handleCatch(n);  return;	  	non-compiled	[CE]  duplicate  case  label	11	None	add
217	[BUG]  [BUGGY]      case  Token.CATCH:  handleCatch(n);  [CE]  duplicate  case  label  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      case  Token.CATCH:  handleCatch(n);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        case  Token.CATCH:  handleCatch(n);	  	non-compiled	[CE]  duplicate  case  label	11	None	add
218	[BUG]  [BUGGY]      handleCatch(n);  return;  [CE]  unreachable  statement  [FE]        RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  return;  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);  return;	  	non-compiled	[CE]  unreachable  statement	11	None	add
219	[BUG]  [BUGGY]      handleCatch(n);  handleCategory(n);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]      handleCatch(n);  handleCategory(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	        handleCatch(n);    handleCategory(n);	  	non-compiled	[CE]  cannot  find  symbol	17	None	add
220	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [CE]  not  a  statement  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  not  a  statement	1	None	add
221	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  t.getMessage();  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  m  =  t.getMessage();  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  m  =  t.getMessage();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
222	[BUG]  [BUGGY]  parent.replaceChild(n,  handleParent);  [CE]  cannot  find  symbol  handleParent  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  handleParent);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  handleParent);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  cannot  find  symbol  handleParent	26	None	replace
223	[BUG]  [BUGGY]  parent.replaceChild(n,  t);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  parent.replaceChild(n,  t);  [BUGGY]    case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  t);	  parent.replaceChild(n,    parent);    	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	26	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Deque<Node>)  [FE]        AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Deque<Node>)	13	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]            AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  this);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	22	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]              AssertionFailedError    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	22	None	replace
227	[BUG]  [BUGGY]  handleInstance(n);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleInstance(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleInstance(n);	      handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
228	[BUG]  [BUGGY]  handleFallback(n);  [CE]  cannot  find  symbol  [FE]      RuntimeException    [CONTEXT]    handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);    [BUGGY]  handleFallback(n);  [BUGGY]    return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	handleFallback(n);	      handleFunction(n);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
