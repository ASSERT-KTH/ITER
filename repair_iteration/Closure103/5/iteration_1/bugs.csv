bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalArgumentException( " ");	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
2	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalArgumentException( " ");	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	if(!shouldTraverseFunctions)  {  return;  }	return;  	compilable	  [FE]  AssertionFailedError  	9	10	replace
4	[BUG]  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  if(!shouldTraverseFunctions)  {  return;  }  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	if(!shouldTraverseFunctions)  {  return;  }	return;  	compilable	  [FE]  AssertionFailedError  	9	10	replace
5	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  n.removeChild(parent);  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n.removeChild(parent);	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
6	[BUG]  [BUGGY]  n.removeChild(parent);  [FE]  RuntimeException  [FE]        AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  n.removeChild(parent);  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n.removeChild(parent);	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
7	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	throw  new  IllegalStateException( " ");	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
8	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  RuntimeException  [FE]          AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	throw  new  IllegalStateException( " ");	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
9	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  n  =  parent.getParent();  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  parent.getParent();	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
10	[BUG]  [BUGGY]  n  =  parent.getParent();  [FE]  RuntimeException  [FE]            AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  n  =  parent.getParent();  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getParent();	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
11	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	  	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
12	[BUG]  [BUGGY]    [FE]  RuntimeException  [FE]              AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	  	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
13	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    NodeTraversal.traverse(compiler,  n,  parent);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	10	None	add
14	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    NodeTraversal.traverse(compiler,  n);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node)	10	None	add
15	[BUG]  [BUGGY]    Context  cfg  =  Context.getCurrentContext();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    Context  cfg  =  Context.getCurrentContext();  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    Context  cfg  =  Context.getCurrentContext();		non-compiled	[CE]  cannot  find  symbol	10	None	add
16	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  return;  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]          AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  parent);  return;  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    NodeTraversal.traverse(compiler,  n,  parent);  return;		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	10	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    handleCatch(n);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	    handleCatch(n);		compilable	  [FE]  AssertionFailedError  	10	3	add
18	[BUG]  [BUGGY]    handleCatch(n);  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    handleCatch(n);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    handleCatch(n);		compilable	  [FE]  AssertionFailedError  	10	3	add
19	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph());  [CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph());  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph());		non-compiled	[CE]  constructor  AstControlFlowGraph  in  class  AstControlFlowGraph  cannot  be  applied  to  given  types;	10	None	add
20	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    handleFunction(n);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	    handleFunction(n);		compilable	  [FE]  RuntimeException  	10	12	add
21	[BUG]  [BUGGY]    handleFunction(n);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    handleFunction(n);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    handleFunction(n);		compilable	  [FE]  RuntimeException  	10	12	add
22	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]        AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());		non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	10	None	add
23	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	n  =  parent.getFirstChild();	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
24	[BUG]  [BUGGY]  n  =  parent.getFirstChild();  [FE]  RuntimeException  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  n  =  parent.getFirstChild();  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	n  =  parent.getFirstChild();	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
25	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  parent.replaceChild(n,  parent);  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	add	parent.replaceChild(n,  parent);	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
26	[BUG]  [BUGGY]  parent.replaceChild(n,  parent);  [FE]  RuntimeException  [FE]      AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]  parent.replaceChild(n,  parent);  [BUGGY]  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	parent.replaceChild(n,  parent);	return;  	compilable	  [FE]  RuntimeException  	9	12	replace
27	[BUG]  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]    AssertionFailedError  [CONTEXT]  handleExpr(n);  return;  case  Token.THROW:  handleThrow(n);  return;  case  Token.TRY:  handleTry(n);  return;  case  Token.CATCH:  handleCatch(n);  [BUGGY]    NodeTraversal.traverse(compiler,  n,  astPositionCounter);  [BUGGY]  return;  case  Token.BREAK:  handleBreak(n);  return;  case  Token.CONTINUE:  handleContinue(n);  return;  case  Token.RETURN:  handleReturn(n);  return;  case  Token.WITH:  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  visit  [RETURN_TYPE]  void  NodeTraversal  t  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  t  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.3481553119113957	332	332	3	replace	    NodeTraversal.traverse(compiler,  n,  astPositionCounter);		non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	10	None	add
