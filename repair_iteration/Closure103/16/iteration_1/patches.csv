bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
5	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
6	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  value));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  value));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  value));	  exceptionHandler.push(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  name));	  exceptionHandler.push(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
8	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY),  n);	  exceptionHandler.push(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
9	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  true));	  exceptionHandler.push(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
10	[BUG]  [BUGGY]  Node  entry  =  parent.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  parent.getFirstChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  parent.getFirstChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
11	[BUG]  [BUGGY]  Node  entry  =  n.getNext();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  n.getNext();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  n.getNext();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
12	[BUG]  [BUGGY]  Node  entry  =  parent.getLastChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  parent.getLastChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  parent.getLastChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  n);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
17	[BUG]  [BUGGY]  Node  entry  =  node.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  node.getLastChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  node.getLastChild();	      Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
18	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  astPositionCounter));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  astPositionCounter));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  astPositionCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
20	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nodePriorities));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nodePriorities));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nodePriorities));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
21	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
22	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  n));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  n));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent,  n));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
23	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(n,  parent);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent);	  exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
24	[BUG]  [BUGGY]  exceptionHandler.push(parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(parent);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(parent);	  exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
25	[BUG]  [BUGGY]  exceptionHandler.push(n,  true);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(n,  true);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  true);	  exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
26	[BUG]  [BUGGY]  exceptionHandler.push(n  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(n  +  1);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n  +  1);	  exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
27	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  parent);	  exceptionHandler.push(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.peek(new  Node(Token.TRY,  n));	  exceptionHandler.push(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  priorityComparator);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  exceptionHandler.clear();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.clear();  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.clear();	  exceptionHandler.peek();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n);	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  exceptionHandler);	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getFirstChild().getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getFirstChild().getNext());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent.getFirstChild().getNext());	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getFirstChild());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent.getFirstChild());	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getLastChild());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent.getLastChild());	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
52	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
53	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext()));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext()));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getLastChild().getNext()));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()  +  1));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()  +  1));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext()  +  1));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  0));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  0));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  0));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
56	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY));	  exceptionHandler.push(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  astPositionCounter);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
61	[BUG]  [BUGGY]  Node  entry  =  exceptionHandler.getLastChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  exceptionHandler.getLastChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  exceptionHandler.getLastChild();	      Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
62	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.addChildToFront(n);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(n);	  exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
63	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.addChildToBack(n);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(n);	  exceptionHandler.push(n);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
64	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  n));	  exceptionHandler.push(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  n));	  exceptionHandler.push(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
66	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.peek());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.peek());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent.peek());	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  root));	  exceptionHandler.push(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value);	      NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
71	[BUG]  [BUGGY]  Node  entry  =  exceptionHandler.getFirstChild();  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  exceptionHandler.getFirstChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  exceptionHandler.getFirstChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
72	[BUG]  [BUGGY]  Node  entry  =  node.getFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  node.getFirstChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  node.getFirstChild();	      Node    entry    =    n.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
73	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  n);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  n);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
78	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  exceptionHandler);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
79	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent));    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
81	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  this));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  this));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  this));	  exceptionHandler.push(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
82	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n);	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
83	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  parent);	      NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
85	[BUG]  [BUGGY]  Node  entry  =  n.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Node  entry  =  n.removeFirstChild();  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  n.removeFirstChild();	      Node    entry    =    n.getLastChild();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
86	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  exceptionHandler);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
87	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  this);  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  this);	  exceptionHandler.push(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
88	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>());	      NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
90	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n));  [BUGGY]    }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n));	  exceptionHandler.peek();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek());  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek());	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  parent);	      Preconditions.checkState(exceptionHandler.peek()    ==    parent);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  edge);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root);  [BUGGY]    exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root);	      NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
