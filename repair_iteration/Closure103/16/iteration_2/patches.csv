bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n,  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  n,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  n,  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  n,  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler,  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  exceptionHandler,  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  parent,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  parent,  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  parent,  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph(),  nodePriorities);	  NodeTraversal.traverse(compiler,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  node);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  node);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  node);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter,    parent);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
16	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorityCounter));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorityCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorityCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nodePriorities));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
17	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nodePriorities,  priorityCounter));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nodePriorities,  priorityCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nodePriorities,  priorityCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nodePriorities));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
18	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorities));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorities));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorities));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nodePriorities));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    this,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  nodePriorities,  parent);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities,  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  nodePriorities,  n);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
28	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(parent);	  exceptionHandler.addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
29	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(n,  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(n,  parent);	  exceptionHandler.addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
30	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  cfg);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(n,  cfg);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(n,  cfg);	  exceptionHandler.addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
31	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(n,  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(n,  nodePriorities);	  exceptionHandler.addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
32	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  nodePriorities));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  nodePriorities));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  nodePriorities));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameNode));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
33	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  value));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  value));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  value));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameNode));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
34	[BUG]  [BUGGY]  exceptionHandler.removeChild(parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.removeChild(parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.removeChild(parent);	  exceptionHandler.clear();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
35	[BUG]  [BUGGY]  exceptionHandler.removeChild(n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.removeChild(n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.removeChild(n);	  exceptionHandler.clear();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
36	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(parent.getLastChild().getNext()));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(parent.getLastChild().getNext()));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(parent.getLastChild().getNext()));	  exceptionHandler.push(new    Integer(n.getLastChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
37	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext()  +  1));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext()  +  1));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getLastChild().getNext()  +  1));	  exceptionHandler.push(new    Integer(n.getLastChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  parent,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityCounter,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    parent);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityComparator,  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityComparator,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  priorityComparator,  n);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    parent);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator,  parent);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator,  parent);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    parent);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
45	[BUG]  [BUGGY]  exceptionHandler.push(n,  false);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  false);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  false);	  exceptionHandler.push(n,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
46	[BUG]  [BUGGY]  exceptionHandler.push(parent,  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(parent,  true);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(parent,  true);	  exceptionHandler.push(n,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
47	[BUG]  [BUGGY]  exceptionHandler.push(n,  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  null);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  null);	  exceptionHandler.push(n,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
49	[BUG]  [BUGGY]  exceptionHandler.push(n,  n  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  n  +  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  n  +  1);	  exceptionHandler.push(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
50	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  parent  +  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent  +  1);	  exceptionHandler.push(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
51	[BUG]  [BUGGY]  exceptionHandler.push(n,  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  1);	  exceptionHandler.push(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
52	[BUG]  [BUGGY]  exceptionHandler.push(parent  +  1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(parent  +  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(parent  +  1);	  exceptionHandler.push(n    +    1);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
53	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  false));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  false));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  false));	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
54	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  true);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  true);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  true);	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
55	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true,  parent));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  true,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
56	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  true));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  true));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  true));	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
57	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  parent.getLastChild());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent.getLastChild());	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
58	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  parent.getFirstChild());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent.getFirstChild());	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
59	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getNext());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  parent.getNext());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent.getNext());	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
60	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent.getParent());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  parent.getParent());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent.getParent());	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  n);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  nodePriorities);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  exceptionHandler);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()  ==  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  n);	  Preconditions.checkState(parent.peek()    ==    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  exceptionHandler.peek());	  Preconditions.checkState(parent.peek()    ==    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  exceptionHandler);	  Preconditions.checkState(parent.peek()    ==    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    this,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
77	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  astPositionCounter));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  astPositionCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  astPositionCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameEnd));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
78	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  value));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  value));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  value));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameEnd));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
79	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  nodePriorities));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  nodePriorities));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd,  nodePriorities));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameEnd));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
80	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  n);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter,    n);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
81	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n,  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY),  n,  parent);	  exceptionHandler.push(new    Node(Token.TRY),    n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n,  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY),  n,  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY),    n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
83	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent),  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent),  n);	  exceptionHandler.push(new    Node(Token.TRY),    n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
84	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  1);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  1);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
86	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
88	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent),  exceptionHandler);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  AstControlFlowGraph(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  AstControlFlowGraph(),  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  new  AstControlFlowGraph(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.peek());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.peek());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.peek());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  parent.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.peek());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.peek());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  parent.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.peek());    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.getFirstChild().getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.getFirstChild().getNext());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n.getFirstChild().getNext());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild().getNext());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.getFirstChild().getNext());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.getFirstChild().getNext());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  exceptionHandler.getFirstChild().getNext());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild().getNext());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.getFirstChild().getNext());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.getFirstChild().getNext());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  parent.getFirstChild().getNext());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild().getNext());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getFirstChild().getNext());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getFirstChild().getNext());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getFirstChild().getNext());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild().getNext());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.getLastChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  exceptionHandler.getLastChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.getLastChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n.getLastChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getLastChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getLastChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.getLastChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  parent.getLastChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
104	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
105	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
107	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  name));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  name));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  name));	  exceptionHandler.addChildToBack(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
108	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY),  n);	  exceptionHandler.addChildToBack(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
109	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  new  Node(Token.TRY));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(n,  new  Node(Token.TRY));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(n,  new  Node(Token.TRY));	  exceptionHandler.addChildToBack(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
112	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  astPositionCounter));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  astPositionCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  astPositionCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    exceptionHandler));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
113	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  nodePriorities));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  nodePriorities));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  nodePriorities));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    exceptionHandler));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
114	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
115	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
116	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext(),  0));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext(),  0));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(parent.getFirstChild().getNext(),  0));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext(),    0));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
117	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext(),  0));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext(),  0));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getLastChild().getNext(),  0));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext(),    0));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
118	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  1));  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  1));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  1));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext(),    0));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
119	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  2));  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  2));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext(),  2));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext(),    0));    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
120	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    value));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
121	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  name));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  name));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  name));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    value));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  priorityCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  priorityCounter);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  n,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  node,  astPositionCounter);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
126	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(n,  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(n,  parent);	  exceptionHandler.addChildToBack(n);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
127	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(parent);	  exceptionHandler.addChildToBack(n);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
128	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  cfg);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(n,  cfg);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(n,  cfg);	  exceptionHandler.addChildToBack(n);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
129	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(n,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(n,  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(n,  nodePriorities);	  exceptionHandler.addChildToBack(n);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  shouldTraverseFunctions);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  null);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  priorityComparator,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  edge,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  edge);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  edge);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  edge);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  edge,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  edge);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  edge);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  edge);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(),  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
143	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  this,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  nodePriorities,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
146	[BUG]  [BUGGY]  Node  entry  =  parent.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  parent.removeFirstChild();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  parent.removeFirstChild();	  Node    entry    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  n);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
149	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter,  priorityComparator);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter,  priorityComparator);	  exceptionHandler.push(new    Node(Token.TRY,    n),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
150	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter  +  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter  +  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  astPositionCounter  +  1);	  exceptionHandler.push(new    Node(Token.TRY,    n),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
151	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  priorityCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  priorityCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
152	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()  +  1));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()  +  1));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()  +  1));	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
153	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n.getLastChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n.getLastChild());  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n.getLastChild());	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()    +    1));    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  exceptionHandler,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  root,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  root);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
161	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n,  parent));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n,  parent));	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
162	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
163	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  this);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  this);	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
164	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  parent);	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
165	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
166	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  root);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  root);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
167	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  root,  n);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  root);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  root);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()  ==  exceptionHandler.getFirstChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()  ==  exceptionHandler.getFirstChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n.getFirstChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n.getFirstChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getFirstChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent.getFirstChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  parent.getFirstChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  parent.getFirstChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild());    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
173	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n,  parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  n,  parent));	  exceptionHandler.addChildToFront(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
174	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  parent));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  parent));	  exceptionHandler.addChildToFront(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
175	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  parent);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  parent);	  exceptionHandler.addChildToFront(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
176	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  astPositionCounter);	  exceptionHandler.addChildToFront(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
177	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  nodePriorities);	  exceptionHandler.addChildToFront(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  n);	  Preconditions.checkState(exceptionHandler.peek()!=    parent);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(parent.peek()!=  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(parent.peek()!=  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(parent.peek()!=  exceptionHandler);	  Preconditions.checkState(exceptionHandler.peek()!=    parent);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  node);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  node);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  n);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  root,  n);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  root,  n);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  root,  n);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
183	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()),  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(parent.getFirstChild().getNext()),  n);	  exceptionHandler.push(new    Integer(parent.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  exceptionHandler,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  exceptionHandler,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  exceptionHandler,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
185	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  n,  astPositionCounter));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  n,  astPositionCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent,  n,  astPositionCounter));	  exceptionHandler.push(new    Node(Token.TRY,    parent,    n));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
186	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  n),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  n),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent,  n),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    parent,    n));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
187	[BUG]  [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n,  parent));  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.peek(new  Node(Token.TRY,  n,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    parent,    n));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
188	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n),    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
189	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  nodePriorities);	  exceptionHandler.push(new    Node(Token.TRY,    n),    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
190	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  value);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  parent,  value);	  exceptionHandler.push(new    Node(Token.TRY,    n),    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
191	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name,  n));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name,  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  name,  n));	  exceptionHandler.push(new    Node(Token.TRY,    name));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
192	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  name);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  name);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  name);	  exceptionHandler.push(new    Node(Token.TRY,    name));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
193	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name,  parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  name,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    name));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  parent);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
197	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  getFunctionName()));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  getFunctionName()));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  getFunctionName()));	  exceptionHandler.push(new    Node(Token.TRY,    this));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
198	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  this,  parent));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  this,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  this,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    this));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
199	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
200	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this.astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this.astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  this.astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
207	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
210	[BUG]  [BUGGY]  Node  entry  =  parent.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  parent.getNext();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  parent.getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
211	[BUG]  [BUGGY]  Node  entry  =  node.getNext();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  node.getNext();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  node.getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
212	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root,  value));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root,  value));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  root,  value));	  exceptionHandler.push(new    Node(Token.TRY,    n,    root));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
213	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  root));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent,  root));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent,  root));	  exceptionHandler.push(new    Node(Token.TRY,    n,    root));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
216	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent),  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  parent),  this);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  parent),  this);	  exceptionHandler.push(new    Node(Token.TRY,    n),    this);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  priorityCounter);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
222	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  value),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  value),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  value),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n,    value));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
223	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  value,  n));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  value,  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  value,  n));	  exceptionHandler.push(new    Node(Token.TRY,    n,    value));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
224	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  value);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  value);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  value);	  exceptionHandler.push(new    Node(Token.TRY,    n,    value));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
225	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext()),  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getLastChild().getNext()),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getLastChild().getNext()),  n);	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()),    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
226	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  0);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  0);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  0);	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()),    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
227	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()  +  1),  n);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()  +  1),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext()  +  1),  n);	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()),    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
228	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n,  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(n.getFirstChild().getNext()),  n,  astPositionCounter);	  exceptionHandler.push(new    Integer(n.getFirstChild().getNext()),    n);    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityCounter,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  nodePriorities,  n,  astPositionCounter,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  value,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  value,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
234	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  astPositionCounter,  parent));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  astPositionCounter,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  astPositionCounter,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    astPositionCounter));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
235	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorityComparator));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorityComparator));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  priorityComparator));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    astPositionCounter));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
236	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  astPositionCounter,  priorityComparator));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  astPositionCounter,  priorityComparator));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  astPositionCounter,  priorityComparator));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    astPositionCounter));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  root);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  this,  root);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(n.peek()  ==  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(n.peek()  ==  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(n.peek()  ==  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
240	[BUG]  [BUGGY]  exceptionHandler.removeChildToBack(new  Node(Token.TRY,  n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.removeChildToBack(new  Node(Token.TRY,  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.removeChildToBack(new  Node(Token.TRY,  n));	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
241	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent,  n));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent,  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent,  n));	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
242	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  parent);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  parent);	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
243	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  astPositionCounter,  exceptionHandler,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler,  parent);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  exceptionHandler,  parent);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
247	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n,  parent));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  n,  parent));	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
248	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  nodePriorities);	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
249	[BUG]  [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  parent));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.peek(new  Node(Token.TRY,  parent));	  exceptionHandler.peek(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
250	[BUG]  [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n),  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n),  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.peek(new  Node(Token.TRY,  n),  parent);	  exceptionHandler.peek(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
251	[BUG]  [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.peek(new  Node(Token.TRY,  n),  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.peek(new  Node(Token.TRY,  n),  nodePriorities);	  exceptionHandler.peek(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parents,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parents,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  root);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.pop()  ==  parent);	  Preconditions.checkState(exceptionHandler.peek()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  n,  parent);	  Preconditions.checkState(exceptionHandler.peek()    ==    n);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
256	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  root));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  root));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  root));	  exceptionHandler.push(new    Node(Token.TRY,    this));    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  value);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
258	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  preconditions));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  preconditions));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  preconditions));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nodePriorities));    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  root,  astPositionCounter);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
260	[BUG]  [BUGGY]  Node  entry  =  nodePriorities.getFirstChild();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  nodePriorities.getFirstChild();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  nodePriorities.getFirstChild();	  Node    entry    =    exceptionHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
261	[BUG]  [BUGGY]  Node  entry  =  exceptionHandler.next();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  exceptionHandler.next();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  exceptionHandler.next();	  Node    entry    =    exceptionHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
262	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    exceptionHandler));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this.astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this.astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  this.astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  root);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  n,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  root,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  exceptionHandler);	  Preconditions.checkState(parent.peek()    ==    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
268	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n  +  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY),  n  +  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY),  n  +  1);	  exceptionHandler.push(new    Node(Token.TRY),    n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
269	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
270	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent),  n);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  parent),  n);	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    parent));    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  node);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  astPositionCounter,  node);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  astPositionCounter,  node);	  NodeTraversal.traverse(compiler,    node,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  parent,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  parent,  priorityComparator);	  NodeTraversal.traverse(compiler,    node,    parent,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
275	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  root);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  root);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  root);	  exceptionHandler.push(new    Node(Token.TRY,    n),    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
276	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  nodePriorities);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  nodePriorities);	  exceptionHandler.push(new    Node(Token.TRY,    n),    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getLastChild().getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent.getLastChild().getNext());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent.getLastChild().getNext());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild().getNext());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  root,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
279	[BUG]  [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext(),  n));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Integer(parent.getFirstChild().getNext(),  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Integer(parent.getFirstChild().getNext(),  n));	  exceptionHandler.push(new    Integer(parent.getFirstChild().getNext()));    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
280	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  0));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  0));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  0));	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
281	[BUG]  [BUGGY]  exceptionHandler.removeChildToBack(parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.removeChildToBack(parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.removeChildToBack(parent);	  exceptionHandler.addChildToBack(n);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
282	[BUG]  [BUGGY]  Node  entry  =  exceptionHandler.removeFirstChild();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  exceptionHandler.removeFirstChild();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  exceptionHandler.removeFirstChild();	  Node    entry    =    n.removeFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  priorityCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
285	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  root));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  root));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  root));	  exceptionHandler.addChildToBack(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
286	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
287	[BUG]  [BUGGY]  exceptionHandler.push(parent,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(parent,  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(parent,  n);	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
288	[BUG]  [BUGGY]  exceptionHandler.push(n,  parent  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  parent  -  1);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  parent  -  1);	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
289	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
290	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  valueNode));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  valueNode));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  valueNode));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameNode));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
291	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  nameNode,  parent));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  nameNode,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  nameNode,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameNode));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
292	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  this);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
294	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  value);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
295	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    root);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter,  parent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  astPositionCounter,  parent);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
297	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  null);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  null);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  null);	  exceptionHandler.push(new    Node(Token.TRY,    n),    this);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
298	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  this,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  this,  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  this,  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n),    this);    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  nodePriorities,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
301	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd  +  1));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd  +  1));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameEnd  +  1));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameEnd));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
302	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    parent,    n);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
303	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  edge,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  edge,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  edge,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
304	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  value);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  edge,  value);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
305	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n,  value));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n,  value));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n,  value));	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
306	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  root,  n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  root,  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  root,  n));	  exceptionHandler.push(new    Node(Token.TRY,    n,    root));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
307	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root,  nodePriorities));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root,  nodePriorities));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  root,  nodePriorities));	  exceptionHandler.push(new    Node(Token.TRY,    n,    root));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
308	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  1,  astPositionCounter));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  1,  astPositionCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  1,  astPositionCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    astPositionCounter));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
309	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  priorityCounter,  parent));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  priorityCounter,  parent));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  priorityCounter,  parent));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    astPositionCounter));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
310	[BUG]  [BUGGY]  Node  entry  =  exceptionHandler.getNext();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  exceptionHandler.getNext();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  exceptionHandler.getNext();	  Node    entry    =    n.getNext();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
311	[BUG]  [BUGGY]  exceptionHandler.push(null,  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(null,  true);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(null,  true);	  exceptionHandler.push(n,    true);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
312	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
313	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
314	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  this);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  exceptionHandler,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
315	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  value);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  value);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    priorityComparator);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
318	[BUG]  [BUGGY]  exceptionHandler.close();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.close();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.close();	  exceptionHandler.clear();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
319	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  priorityComparator,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
320	[BUG]  [BUGGY]  exceptionHandler.appendChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.appendChildToFront(parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.appendChildToFront(parent);	  exceptionHandler.addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
321	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name),  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  name),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  name),  n);	  exceptionHandler.push(new    Node(Token.TRY,    name));    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  priorityComparator,  parent);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  priorityComparator,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  priorityComparator,  parent);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    parent);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek()  -  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek()  -  1);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek()  -  1);	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent,  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  parent,  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
325	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler,  parent);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  priorityComparator,  exceptionHandler,  parent);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  priorityCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  value,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  value,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityComparator);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  priorityComparator,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  priorityComparator,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  root,  priorityComparator,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityCounter);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  priorityCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  priorityCounter);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  this);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  edge);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  edge);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph(),  astPositionCounter,  edge);	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph(),    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  this);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  indent);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  indent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  indent);	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  new  AstControlFlowGraph());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  new  AstControlFlowGraph());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  exceptionHandler,  new  AstControlFlowGraph());	  NodeTraversal.traverse(compiler,    n,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
338	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  value),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  value),  exceptionHandler);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  value),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n,    value));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
339	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  name));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  name));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  name));	  exceptionHandler.push(new    Node(Token.TRY,    n,    value));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorities);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  priorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  key);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  key);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  key);	  NodeTraversal.traverse(compiler,    n,    root,    parent);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
342	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  edge);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  edge);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  nodePriorities,  edge);	  NodeTraversal.traverse(compiler,    n,    parent,    nodePriorities);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  entry);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  entry);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  entry);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  root,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  root,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    root);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  entry);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  entry);	  NodeTraversal.traverse(compiler,    n,    parent,    value);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
346	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorities);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  astPositionCounter,  exceptionHandler,  priorities);	  NodeTraversal.traverse(compiler,    n,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
347	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  n);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  n);	  exceptionHandler.push(new    Node(Token.TRY),    n);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
348	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph(),  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
349	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph  <  Node>());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph  <  Node>());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  new  AstControlFlowGraph  <  Node>());	  NodeTraversal.traverse(compiler,    n,    this,    new    AstControlFlowGraph());    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  this,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
352	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  null);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  null);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  null);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    this);    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
353	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  n,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    parent,    astPositionCounter,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
354	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true),  n);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true),  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  true),  n);	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
355	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true,  n));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  true,  n));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  true,  n));	  exceptionHandler.push(new    Node(Token.TRY,    true));    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
356	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  root,  parent,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  root,  parent,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    parent,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
357	[BUG]  [BUGGY]  exceptionHandler.peek()  ==  parent);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.peek()  ==  parent);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.peek()  ==  parent);	  exceptionHandler.push(parent);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityComparator,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  priorityComparator,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  priorityComparator,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    priorityComparator,    parent);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.getFirstChild().getNext());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.getFirstChild().getNext());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  parent.getFirstChild().getNext());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getFirstChild().getNext());    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
360	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  exceptionHandler,  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent),  exceptionHandler,  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
361	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  value);	  NodeTraversal.traverse(compiler,    n,    root,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
362	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  astPositionCounter));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  astPositionCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  nameNode,  astPositionCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameNode));    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.getFirstChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  parent.getFirstChild());	  Preconditions.checkState(exceptionHandler.peek()!=    parent);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
364	[BUG]  [BUGGY]  exceptionHandler.flush();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.flush();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.flush();	  exceptionHandler.clear();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
365	[BUG]  [BUGGY]  exceptionHandler.remove();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.remove();  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.remove();	  exceptionHandler.clear();    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
366	[BUG]  [BUGGY]  Node  entry  =  exceptionHandler.peek();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Node  entry  =  exceptionHandler.peek();  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Node  entry  =  exceptionHandler.peek();	  Node    entry    =    exceptionHandler.getFirstChild();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  edge,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  edge,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    edge);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  nodePriorities,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  parent,  nodePriorities,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    nodePriorities,    parent);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
370	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.value);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.value);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.value);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
371	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorities);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this.astPositionCounter,  this.priorities);	  NodeTraversal.traverse(compiler,    n,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  root);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  root);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  root);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
373	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  astPositionCounter,  exceptionHandler,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    astPositionCounter,    exceptionHandler,    parent);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent,  exceptionHandler.peek());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.pop()  ==  parent,  exceptionHandler.peek());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.pop()  ==  parent,  exceptionHandler.peek());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
375	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek()  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek()  +  1);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()  ==  parent,  exceptionHandler.peek()  +  1);	  Preconditions.checkState(exceptionHandler.peek()    ==    parent,    exceptionHandler.peek());    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
376	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  exceptionHandler,  astPositionCounter);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  exceptionHandler,  astPositionCounter);	  exceptionHandler.push(new    Node(Token.TRY,    n),    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
377	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  this);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  this);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(new  Node(Token.TRY,  n),  this);	  exceptionHandler.addChildToFront(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
378	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  node);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n),  node);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n),  node);	  exceptionHandler.push(new    Node(Token.TRY,    n),    parent);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
379	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  n,  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  node,  n,  parent);	  NodeTraversal.traverse(compiler,    node,    parent);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
380	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  int  priorityCounter));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  int  priorityCounter));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  int  priorityCounter));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    astPositionCounter));    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
381	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  this);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  this);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  n),  this);	  exceptionHandler.addChildToBack(new    Node(Token.TRY,    n));    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
382	[BUG]  [BUGGY]  exceptionHandler.addChildToFront(parent,  n);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToFront(parent,  n);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToFront(parent,  n);	  exceptionHandler.addChildToFront(n);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.getLastChild());  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkState(exceptionHandler.peek()!=  parent.getLastChild());  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkState(exceptionHandler.peek()!=  parent.getLastChild());	  Preconditions.checkState(exceptionHandler.peek()    ==    parent.getLastChild());    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
384	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  edge);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  edge);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  edge);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkArgument(exceptionHandler.peek()  ==  parent);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  Preconditions.checkArgument(exceptionHandler.peek()  ==  parent);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	Preconditions.checkArgument(exceptionHandler.peek()  ==  parent);	  Preconditions.checkState(parent.peek()    ==    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
387	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  this));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  this));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  this));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    exceptionHandler));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
388	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  true));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  true));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  exceptionHandler,  true));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    exceptionHandler));    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
389	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  exceptionHandler);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
390	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  true);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  true);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.EXPR_RESULT,  n),  true);	  exceptionHandler.push(new    Node(Token.EXPR_RESULT,    n));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
391	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  this.priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  this.priorities);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  this.priorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.astPositionCounter,  this.priorities);	  NodeTraversal.traverse(compiler,    n,    parent,    this.astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
394	[BUG]  [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  this));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.addChildToBack(new  Node(Token.TRY,  this));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.addChildToBack(new  Node(Token.TRY,  this));	  exceptionHandler.addChildToBack(new    Node(Token.TRY));    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
395	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler,  astPositionCounter);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler,  astPositionCounter);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  exceptionHandler,  astPositionCounter);	  NodeTraversal.traverse(compiler,    n,    this,    exceptionHandler);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
396	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  exceptionHandler);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  exceptionHandler);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
397	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  edge);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  edge);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  edge);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
398	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  nodePriorities);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  nodePriorities);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  this,  astPositionCounter,  nodePriorities);	  NodeTraversal.traverse(compiler,    n,    this,    astPositionCounter);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
399	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.priorityComparator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this.priorityComparator);  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  parent,  this.priorityComparator);	  NodeTraversal.traverse(compiler,    n,    parent,    priorityCounter);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
400	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value),  exceptionHandler);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  value),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    value));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
401	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  root));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  root));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  root));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    value));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
402	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  key));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  key));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  key));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    value));    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
403	[BUG]  [BUGGY]  exceptionHandler.push(n,  new  Node(Token.TRY));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  new  Node(Token.TRY));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  new  Node(Token.TRY));	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
404	[BUG]  [BUGGY]  exceptionHandler.push(n,  cfg);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(n,  cfg);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(n,  cfg);	  exceptionHandler.push(n,    parent);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
405	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(1));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(1));  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(1));	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(2));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(2));  [BUGGY]      exceptionHandler.pop();  }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	NodeTraversal.traverse(compiler,  n,  new  AstControlFlowGraph  <  Node>(2));	  NodeTraversal.traverse(compiler,    n,    new    AstControlFlowGraph    <    Node>());    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
407	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root),  exceptionHandler);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  root),  exceptionHandler);  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  root),  exceptionHandler);	  exceptionHandler.push(new    Node(Token.TRY,    n,    root));    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
408	[BUG]  [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  valueEnd));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      return  false;  case  Token.TRY:        if  (n  ==  parent.getFirstChild().getNext())  {  Preconditions.checkState(exceptionHandler.peek()  ==  parent);      [BUGGY]  exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  valueEnd));  [BUGGY]      }  }  }  return  true;  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  shouldTraverse  [RETURN_TYPE]  boolean  NodeTraversal  nodeTraversal  Node  n  Node  parent  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  NodeTraversal  nodeTraversal  ControlFlowGraph  cfg  Node  entry  externs  n  parent  root  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.28005601680560194	283	283	3	replace	exceptionHandler.push(new  Node(Token.TRY,  n,  parent,  valueEnd));	  exceptionHandler.push(new    Node(Token.TRY,    n,    parent,    nameEnd));    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
