bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getLastChild();	      Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	31	5	replace
2	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getLastChild();	      Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	31	5	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	31	5	replace
4	[BUG]  [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	31	5	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  fromNode.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	31	5	replace
6	[BUG]  [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  fromNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  fromNode.getFirstChild();	      Node    nextSibling    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	31	5	replace
7	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	26	None	add
8	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	26	None	add
9	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  return  computeFallThrough(node.getFirstChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  return  computeFallThrough(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    return  computeFallThrough(node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	26	None	add
10	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	26	None	add
11	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  return  computeFallThrough(node.getLastChild());  [CE]  unreachable  statement  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  return  computeFallThrough(node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    return  computeFallThrough(node.getLastChild());	  	non-compiled	[CE]  unreachable  statement	26	None	add
12	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  node  =  parent.getFirstChild();  return  computeFollowNode(node.getFirstChild());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	26	None	add
13	[BUG]  [BUGGY]      Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  body  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    parent.getFirstChild();    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	13	None	add
14	[BUG]  [BUGGY]      Node  body  =  parent.getFirstChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    parent.getFirstChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	13	None	add
15	[BUG]  [BUGGY]      Node  body  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	13	None	add
16	[BUG]  [BUGGY]      Node  body  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  body  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    parent.getFirstChild();    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	13	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	13	3	add
18	[BUG]  [BUGGY]      Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  head  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    parent.getFirstChild();    Node  head  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	13	3	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFallThrough(fromNode.getLastChild());	      	compilable	  [FE]  AssertionFailedError  	10	6	replace
20	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getLastChild());	      	compilable	  [FE]  AssertionFailedError  	10	6	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFallThrough(fromNode.getFirstChild());	      	compilable	  [FE]  AssertionFailedError  	10	6	replace
22	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild());	      	compilable	  [FE]  AssertionFailedError  	10	6	replace
23	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getString());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode.getFirstChild().getString());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild().getString());	      	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	10	None	replace
24	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	add
25	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	add
26	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	add
27	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  parent  =  nextSibling.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  parent  =  nextSibling.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Node  parent  =  nextSibling.getNext();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	add
28	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getParent();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Node  nextSibling  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Node  nextSibling  =  parent.getParent();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	add
29	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities);  [CE]  cannot  find  symbol  priorities  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorities);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  priorities	19	None	replace
30	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  astPositionCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)	19	None	replace
31	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorityCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorityCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  priorityCounter);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,int)	19	None	replace
32	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  values);  [CE]  cannot  find  symbol  values  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  values);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  values);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  values	19	None	replace
33	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstSibling);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	19	None	replace
34	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getLastChild());	  return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	29	6	replace
35	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getLastChild());	  return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	29	6	replace
36	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode.getFirstChild());	  return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	29	6	replace
37	[BUG]  [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode.getFirstChild());	  return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  RuntimeException  	29	6	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFallThrough(parent.getLastChild());	  return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  AssertionFailedError  	29	5	replace
39	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild());  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getLastChild());	  return    computeFallThrough(node.getLastChild());    	compilable	  [FE]  AssertionFailedError  	29	5	replace
40	[BUG]  [BUGGY]  Node  parent  =  fromNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  fromNode.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  fromNode.getParent();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	11	None	replace
41	[BUG]  [BUGGY]  Node  parent  =  fromNode.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  fromNode.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  fromNode.getNext();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	11	None	replace
42	[BUG]  [BUGGY]  Node  parent  =  toNode.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  toNode.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  toNode.getParent();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	11	None	replace
43	[BUG]  [BUGGY]  Node  parent  =  node.getNext();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  node.getNext();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	11	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFallThrough(parent.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	27	6	replace
45	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild());  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  AssertionFailedError  	27	6	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  node.getNext();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	16	5	replace
47	[BUG]  [BUGGY]  Node  nextSibling  =  node.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  node.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  node.getNext();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	16	5	replace
48	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  nextSibling  =  parent.getParent();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	16	5	replace
49	[BUG]  [BUGGY]  Node  nextSibling  =  parent.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  nextSibling  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  nextSibling  =  parent.getParent();	      Node    nextSibling    =    parent.getNext();    	compilable	  [FE]  AssertionFailedError  	16	5	replace
50	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
51	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getFirstChild());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
52	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
53	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
54	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
55	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
56	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	24	6	add
57	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [FE]  RuntimeException  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);	  	compilable	  [FE]  RuntimeException  	24	6	add
58	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	24	7	add
59	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(fromNode,  parent);	  	compilable	  [FE]  RuntimeException  	24	7	add
60	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	24	6	add
61	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	24	6	add
62	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	24	7	add
63	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(fromNode,  node);	  	compilable	  [FE]  RuntimeException  	24	7	add
64	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]            RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	24	None	add
65	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	24	7	add
66	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [FE]  RuntimeException  [FE]              RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.replaceChild(node,  node);	  	compilable	  [FE]  RuntimeException  	24	7	add
67	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	21	7	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  parent,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	21	7	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPosition);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPosition);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Map<Node,Integer>)	21	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  astPositionCounter);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,int)	21	None	replace
71	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeTraversal.traverse(compiler,  fromNode,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	21	7	replace
72	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  fromNode,  this);	      NodeTraversal.traverse(compiler,    node,    this);    	compilable	  [FE]  StackOverflowError  	21	7	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>)  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  cfg);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  cfg);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,ControlFlowGraph<Node>)	21	None	replace
74	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
75	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFollowNode(fromNode,  parent.getLastChild());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
76	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  return  computeFallThrough(fromNode,  parent.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  return  computeFallThrough(fromNode,  parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    return  computeFallThrough(fromNode,  parent.getLastChild());	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	7	None	add
77	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getLastChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
78	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();  if(parent!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
79	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild(),  parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild(),  parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild(),  parent.getLastChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
80	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	3	None	replace
81	[BUG]  [BUGGY]  return  computeFallThrough(node,  fromNode);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node,  fromNode);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(node,  fromNode);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	3	None	replace
82	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	8	None	replace
83	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode,  node.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    	compilable	  [FE]  StackOverflowError  	8	7	replace
84	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  [FE]  StackOverflowError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node.getLastChild());	  return    computeFollowNode(fromNode,    parent.getLastChild());    	compilable	  [FE]  StackOverflowError  	8	7	replace
85	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getLastChild(),  node);	  return    computeFollowNode(fromNode,    parent.getLastChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	8	None	replace
86	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild());	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	5	None	replace
87	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	5	None	replace
88	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int)  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent.getFirstChild(),  astPositionCounter);	  return    computeFollowNode(fromNode,    parent.getFirstChild());    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,int)	5	None	replace
89	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(parent,  parent);	      NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	33	7	replace
90	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  parent);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  parent);	      NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	33	7	replace
91	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  FINALLY);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  FINALLY);	      NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	33	None	replace
92	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  node,  FINALLY);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  node,  FINALLY);	      NodeUtil.removeChild(parent,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	33	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getLastChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
94	[BUG]  [BUGGY]  Node  body  =  parent.getLastChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getLastChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  node.getLastChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
96	[BUG]  [BUGGY]  Node  body  =  node.getLastChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  node.getLastChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  fromNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  fromNode.getFirstChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
98	[BUG]  [BUGGY]  Node  body  =  fromNode.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  fromNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getFirstChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
99	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  fromNode.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  fromNode.getLastChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
100	[BUG]  [BUGGY]  Node  body  =  fromNode.getLastChild();  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  fromNode.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  fromNode.getLastChild();	      Node    body    =    node.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	23	5	replace
101	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
102	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  node.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
103	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  parent.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
104	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  parent.getLastChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  parent.getLastChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
105	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  child.getFirstChild();  [CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  body  =  child.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  body  =  child.getFirstChild();	  	non-compiled	[CE]  variable  body  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
106	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
107	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
108	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	2	None	add
109	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  this);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  unreachable  statement	2	None	add
110	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  fromNode  =  parent.getFirstChild();  [CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  fromNode  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  fromNode  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  fromNode  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
111	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getParent();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  node  =  parent.getParent();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
112	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n);  [CE]  cannot  find  symbol  n  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  n);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  n);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  n	12	None	replace
113	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  cfg);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  cfg);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  cfg);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	12	None	replace
114	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFallThrough(node.getLastChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFallThrough(node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    return  computeFallThrough(node.getLastChild());	  	non-compiled	[CE]  unreachable  statement	28	None	add
115	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  parent  =  node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  parent  =  node.getParent();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  parent  =  node.getParent();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	28	None	add
116	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  node  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	28	None	add
117	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  node  =  parent.getFirstChild();  return  computeFallThrough(node.getLastChild());	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	28	None	add
118	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  if(node!=  null)  {  return  computeFallThrough(node.getLastChild());  }  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  if(node!=  null)  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  node  =  parent.getFirstChild();  if(node!=  null)  {  return  computeFallThrough(node.getLastChild());  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	28	None	add
119	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  if(node  ==  null)  {  return  computeFallThrough(node.getLastChild());  }  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  if(node  ==  null)  {  return  computeFallThrough(node.getLastChild());  }  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  node  =  parent.getFirstChild();  if(node  ==  null)  {  return  computeFallThrough(node.getLastChild());  }	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	28	None	add
120	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	30	None	add
121	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  parent.getLastChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	30	None	add
122	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  nextSibling.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  parent  =  nextSibling.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	30	None	add
123	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  parent  =  parent.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	30	None	add
124	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  nextSibling  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  nextSibling  =  node.getFirstChild();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	30	None	add
125	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  parent  =  parent.getLastChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  parent  =  parent.getLastChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	30	None	add
126	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  parent,  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent,  node);	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
127	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  node,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  node,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  node,  parent);	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
128	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.cloneTree());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  parent.cloneTree());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.cloneTree());	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
129	[BUG]  [BUGGY]  Node  parent  =  getNextSibling();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getNextSibling();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getNextSibling();	      Node    parent    =    getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	replace
130	[BUG]  [BUGGY]  Node  parent  =  getParent(),  node);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParent(),  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(),  node);	      Node    parent    =    getParent();    	non-compiled	[CE]  ';'  expected	17	None	replace
131	[BUG]  [BUGGY]  Node  parent  =  getParent().getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParent().getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent().getParent();	      Node    parent    =    getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	32	5	add
133	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);	  	compilable	  [FE]  AssertionFailedError  	32	5	add
134	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  }  else  {  NodeUtil.removeChild(parent,  node);  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  }  else  {  NodeUtil.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  }  else  {  NodeUtil.removeChild(parent,  node);	  	non-compiled	[CE]  'else'  without  'if'	32	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  AssertionFailedError  	32	6	add
136	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(node);	  	compilable	  [FE]  AssertionFailedError  	32	6	add
137	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(parent,  node);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	32	None	add
138	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);  [CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.replaceChild(node,  this);	  	non-compiled	[CE]  method  replaceChild  in  class  Node  cannot  be  applied  to  given  types;	32	None	add
139	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	32	6	add
140	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(parent,  node);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	32	6	add
141	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	20	7	add
142	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);	  	compilable	  [FE]  StackOverflowError  	20	7	add
143	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  }  else  {  NodeTraversal.traverse(compiler,  node,  this);  [CE]  'else'  without  'if'  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  }  else  {  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  }  else  {  NodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
144	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	20	7	add
145	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [FE]  StackOverflowError  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  parent,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  parent,  this);	  	compilable	  [FE]  StackOverflowError  	20	7	add
146	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	20	None	add
147	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent);  }  [CE]  'else'  without  'if'  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  }  else  if(parent.getType()  ==  Token.FUNCTION)  {  return  computeFollowNode(fromNode,  parent);  }	  	non-compiled	[CE]  'else'  without  'if'	20	None	add
148	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]              StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  node,  this);  return  computeFallThrough(fromNode,  parent);	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	20	None	add
149	[BUG]  [BUGGY]  Node  parent  =  getParentNode(node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParentNode(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(node);	      Node    parent    =    getParentNode(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	18	None	replace
150	[BUG]  [BUGGY]  Node  parent  =  getParentNode(fromNode);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParentNode(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(fromNode);	      Node    parent    =    getParentNode(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	18	None	replace
151	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent,  node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParentNode(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent,  node);	      Node    parent    =    getParentNode(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	18	None	replace
152	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParentNode(parent.getFirstChild());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent.getFirstChild());	      Node    parent    =    getParentNode(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	18	None	replace
153	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  child);  [CE]  cannot  find  symbol  child  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  child);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  child);	      NodeUtil.removeChild(parent,    fromNode);    	non-compiled	[CE]  cannot  find  symbol  child	25	None	replace
154	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  astPositionCounter);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,int)	6	None	replace
155	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstChild);  [CE]  cannot  find  symbol  firstChild  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstChild);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstChild);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstChild	6	None	replace
156	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  FINALLY);  [CE]  cannot  find  symbol  FINALLY  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  FINALLY);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  FINALLY);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  FINALLY	6	None	replace
157	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  value);  [CE]  cannot  find  symbol  value  [FE]                    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  value);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  value);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  value	6	None	replace
158	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node,  parent);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)  [FE]                      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node,  parent);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node)	6	None	replace
159	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    return  computeFollowNode(fromNode,  parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	7	None	add
160	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();  return  computeFollowNode(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
161	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getLastChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	7	None	add
162	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  clone);  [CE]  cannot  find  symbol  clone  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  clone);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  clone);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  clone	12	None	replace
163	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  return  computeFollowNode(node.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  return  computeFollowNode(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    return  computeFollowNode(node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	26	None	add
164	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  node  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	26	None	add
165	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    AssertionFailedError  <  Node>  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
166	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  [CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);  Node  nextSibling  =  parent.getNext();	  	non-compiled	[CE]  variable  nextSibling  is  already  defined  in  method  computeFollowNode(Node,Node)	15	None	add
167	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  RuntimeException  	15	7	add
168	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling!=  null);	  	compilable	  [FE]  RuntimeException  	15	7	add
169	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    AssertionFailedError  <  Node>  parent  =  nextSibling.getParent();	  	non-compiled	[CE]  cannot  find  symbol	15	None	add
170	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.removeChild(node,  parent);	      NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	33	7	replace
171	[BUG]  [BUGGY]  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node,  parent);	      NodeUtil.removeChild(parent,    node);    	compilable	  [FE]  RuntimeException  	33	7	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  toNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  toNode);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  cannot  find  symbol  toNode	21	None	replace
173	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  thenBlock);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	19	None	replace
174	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Map<DiGraphNode<Node,Branch>,Integer>,Multimap<Node,Node>)	19	None	replace
175	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  node  =  node.getFirstChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  node  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  node  =  node.getFirstChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
176	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  parent  =  node.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  parent  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  parent  =  node.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	22	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	22	3	add
178	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Node  head  =  node.getFirstChild();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Node  head  =  node.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Node  head  =  node.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	22	3	add
179	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	20	7	add
180	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [FE]  StackOverflowError  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  fromNode,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  fromNode,  this);	  	compilable	  [FE]  StackOverflowError  	20	7	add
181	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  [CE]  cannot  find  symbol  nodeTraversal  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  nodeTraversal.traverse(compiler,  node,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    nodeTraversal.traverse(compiler,  node,  this);	  	non-compiled	[CE]  cannot  find  symbol  nodeTraversal	20	None	add
182	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);  [CE]  cannot  find  symbol  child  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  NodeTraversal.traverse(compiler,  child,  this);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    NodeTraversal.traverse(compiler,  child,  this);	  	non-compiled	[CE]  cannot  find  symbol  child	20	None	add
183	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	20	7	add
184	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  StackOverflowError  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  StackOverflowError  	20	7	add
185	[BUG]  [BUGGY]      Node  body  =  parent.getFirstChild();  Node  parent  =  body.getFirstChild();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  parent.getFirstChild();  Node  parent  =  body.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    parent.getFirstChild();    Node  parent  =  body.getFirstChild();	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	13	None	add
186	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    return  computeFollowNode(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	4	None	add
187	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  return  computeFallThrough(fromNode,  parent.getFirstChild());  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  return  computeFallThrough(fromNode,  parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    return  computeFallThrough(fromNode,  parent.getFirstChild());	  	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	4	None	add
188	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  return  computeFollowNode(fromNode,  parent.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    return  computeFollowNode(fromNode,  parent.getLastChild());	  	non-compiled	[CE]  unreachable  statement	4	None	add
189	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.addChildToFront(parent,  fromNode);  [CE]  cannot  find  symbol  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.addChildToFront(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.addChildToFront(parent,  fromNode);	  	non-compiled	[CE]  cannot  find  symbol	24	None	add
190	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	24	7	add
191	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [FE]  RuntimeException  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  parent.removeChild(fromNode);	  	compilable	  [FE]  RuntimeException  	24	7	add
192	[BUG]  [BUGGY]  Node  parent  =  getParent(parent);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParent(parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(parent);	      Node    parent    =    getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	replace
193	[BUG]  [BUGGY]  Node  parent  =  getParentNode();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParentNode();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode();	      Node    parent    =    getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	replace
194	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	32	7	add
195	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  parent);	  	compilable	  [FE]  RuntimeException  	32	7	add
196	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  node);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.addChildToFront(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.addChildToFront(parent,  node);	  	non-compiled	[CE]  cannot  find  symbol	32	None	add
197	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node);	  	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	32	None	add
198	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);	  	compilable	  [FE]  RuntimeException  	32	7	add
199	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  NodeUtil.removeChild(node,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    NodeUtil.removeChild(node,  node);	  	compilable	  [FE]  RuntimeException  	32	7	add
200	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFollowNode(node.getLastChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFollowNode(node.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    return  computeFollowNode(node.getLastChild());	  	non-compiled	[CE]  unreachable  statement	28	None	add
201	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFollowNode(fromNode.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    return  computeFollowNode(fromNode.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	28	None	add
202	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFollowNode(node.getFirstChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFollowNode(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    return  computeFollowNode(node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	28	None	add
203	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  node  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	28	None	add
204	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getLastChild();  [CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  node  =  parent.getLastChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  node  =  parent.getLastChild();	  	non-compiled	[CE]  variable  node  is  already  defined  in  method  computeFollowNode(Node,Node)	2	None	add
205	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  NodeTraversal.traverse(compiler,  node,  thenBlock);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    NodeTraversal.traverse(compiler,  node,  thenBlock);	  	non-compiled	[CE]  cannot  find  symbol  thenBlock	2	None	add
206	[BUG]  [BUGGY]  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	return  computeFollowNode(fromNode,  node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	27	7	replace
207	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  [FE]  StackOverflowError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  node.getFirstChild());	  return    computeFallThrough(node.getFirstChild());    	compilable	  [FE]  StackOverflowError  	27	7	replace
208	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  thenBlock);  [CE]  cannot  find  symbol  thenBlock  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  thenBlock);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  thenBlock);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  thenBlock	6	None	replace
209	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap);  [CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  finallyMap);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  finallyMap);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  no  suitable  method  found  for  computeFollowNode(Node,Node,Node,Multimap<Node,Node>)	6	None	replace
210	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstSibling);  [CE]  cannot  find  symbol  firstSibling  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  firstSibling);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  firstSibling);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  firstSibling	6	None	replace
211	[BUG]  [BUGGY]  return  computeFallThrough(parent.getLastChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(parent.getLastChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getLastChild(),  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	3	None	replace
212	[BUG]  [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(parent.getFirstChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(parent.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	3	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getNext();	      Node    body    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	14	5	replace
214	[BUG]  [BUGGY]  Node  body  =  parent.getNext();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.getNext();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getNext();	      Node    body    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	14	5	replace
215	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getLastChild();  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getLastChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getLastChild();	  	non-compiled	[CE]  unreachable  statement	2	None	add
216	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());	  	non-compiled	[CE]  unreachable  statement	2	None	add
217	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getLastChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	2	None	add
218	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	2	None	add
219	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]            StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  node);  Node  body  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    node);    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	2	None	add
220	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
221	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
222	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
223	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFallThrough(parent.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
224	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
225	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  [FE]  RuntimeException  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(nextSibling.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
226	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
227	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [FE]  RuntimeException  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling  ==  null)  {  return  computeFallThrough(parent.getLastChild());  }	  	compilable	  [FE]  RuntimeException  	15	7	add
228	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	compilable	  [FE]  RuntimeException  	15	7	add
229	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [FE]  RuntimeException  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getNext();  Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getNext();    Preconditions.checkState(nextSibling  ==  parent.getFirstChild());  if(nextSibling!=  null)  {  return  computeFollowNode(fromNode,  parent);  }	  	compilable	  [FE]  RuntimeException  	15	7	add
230	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  toNode);  [CE]  cannot  find  symbol  toNode  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(parent,  toNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(parent,  toNode);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  toNode	12	None	replace
231	[BUG]  [BUGGY]  NodeUtil.removeChild(node);  [CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.removeChild(node);	      NodeUtil.removeChild(parent);    	non-compiled	[CE]  method  removeChild  in  class  NodeUtil  cannot  be  applied  to  given  types;	12	None	replace
232	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  }  else  {  NodeUtil.removeChild(parent,  fromNode);  [CE]  'else'  without  'if'  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  }  else  {  NodeUtil.removeChild(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  }  else  {  NodeUtil.removeChild(parent,  fromNode);	  	non-compiled	[CE]  'else'  without  'if'	24	None	add
233	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(parent,  fromNode);	  	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	24	None	add
234	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  }  else  {  NodeUtil.removeChild(parent,  fromNode);  }  [CE]  'else'  without  'if'  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  }  else  {  NodeUtil.removeChild(parent,  fromNode);  }  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  }  else  {  NodeUtil.removeChild(parent,  fromNode);  }	  	non-compiled	[CE]  'else'  without  'if'	24	None	add
235	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	24	6	add
236	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [FE]  RuntimeException  [FE]          RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  fromNode);  NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    fromNode);    NodeUtil.removeChild(parent,  fromNode);  parent.removeChild(node);	  	compilable	  [FE]  RuntimeException  	24	6	add
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  finallyMap);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeTraversal.traverse(compiler,  node,  this,  finallyMap);	      NodeTraversal.traverse(compiler,    node,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,ControlFlowAnalysis,Multimap<Node,Node>)	21	None	replace
238	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]    RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(parent,  node);	      NodeUtil.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	replace
239	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent);  [CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;  [FE]      RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode,  parent);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode,  parent);	      NodeUtil.removeChild(parent,    fromNode);    	non-compiled	[CE]  method  redeclareVarsInsideBranch  in  class  NodeUtil  cannot  be  applied  to  given  types;	25	None	replace
240	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	NodeUtil.redeclareVarsInsideBranch(fromNode);	      NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	25	5	replace
241	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  [FE]  RuntimeException  [FE]        RuntimeException    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  NodeUtil.redeclareVarsInsideBranch(fromNode);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	NodeUtil.redeclareVarsInsideBranch(fromNode);	      NodeUtil.removeChild(parent,    fromNode);    	compilable	  [FE]  RuntimeException  	25	5	replace
242	[BUG]  [BUGGY]  Node  parent  =  this.node.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  this.node.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  this.node.getParent();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	11	None	replace
243	[BUG]  [BUGGY]  Node  parent  =  n.getParent();  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  n.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  n.getParent();	      Node    parent    =    node.getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	11	None	replace
244	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	4	None	add
245	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [CE]  unreachable  statement  [FE]      StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());	  	non-compiled	[CE]  unreachable  statement	4	None	add
246	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]        StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	4	None	add
247	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]          StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getFirstChild());  Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getFirstChild());    Node  parent  =  node.getParent();  return  computeFallThrough(parent.getFirstChild());	  	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	4	None	add
248	[BUG]  [BUGGY]  Node  parent  =  getParent(node);  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParent(node);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParent(node);	      Node    parent    =    getParent();    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	17	None	replace
249	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.removeFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.removeFirstChild();	      Node    body    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	14	6	replace
250	[BUG]  [BUGGY]  Node  body  =  parent.removeFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.removeFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.removeFirstChild();	      Node    body    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	14	6	replace
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	Node  body  =  parent.getParent();	      Node    body    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	14	5	replace
252	[BUG]  [BUGGY]  Node  body  =  parent.getParent();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  parent.getParent();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  parent.getParent();	      Node    body    =    parent.getFirstChild();    	compilable	  [FE]  AssertionFailedError  	14	5	replace
253	[BUG]  [BUGGY]  Node  body  =  toNode.getFirstChild();  [CE]  cannot  find  symbol  toNode  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  body  =  toNode.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  body  =  toNode.getFirstChild();	      Node    body    =    node.getFirstChild();    	non-compiled	[CE]  cannot  find  symbol  toNode	23	None	replace
254	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFallThrough(node.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  return  computeFallThrough(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    return  computeFallThrough(node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	28	None	add
255	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  body  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	28	None	add
256	[BUG]  [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getLastChild());  Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getLastChild());    Node  nextSibling  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	28	None	add
257	[BUG]  [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [CE]  type  AstControlFlowGraph  does  not  take  parameters  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeTraversal.traverse(compiler,  node,  this);  AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeTraversal.traverse(compiler,    node,    this);    AstControlFlowGraph  <  Node>  cfg  =  compiler.getCfg();	  	non-compiled	[CE]  type  AstControlFlowGraph  does  not  take  parameters	20	None	add
258	[BUG]  [BUGGY]  Node  parent  =  getParentNode(parent.getParent());  [CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  Node  parent  =  getParentNode(parent.getParent());  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	Node  parent  =  getParentNode(parent.getParent());	      Node    parent    =    getParentNode(parent);    	non-compiled	[CE]  variable  parent  is  already  defined  in  method  computeFollowNode(Node,Node)	18	None	replace
259	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  AssertionFailedError  	22	4	add
260	[BUG]  [BUGGY]      Node  body  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  body  =  node.getFirstChild();  Preconditions.checkState(body!=  null);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    body    =    node.getFirstChild();    Preconditions.checkState(body!=  null);	  	compilable	  [FE]  AssertionFailedError  	22	4	add
261	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  body  =  parent.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	7	None	add
262	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  body  =  parent.getFirstChild();  return  computeFallThrough(body.getLastChild());	  	non-compiled	[CE]  unreachable  statement	7	None	add
263	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(nextSibling.getLastChild());	  	non-compiled	[CE]  unreachable  statement	7	None	add
264	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent.getLastChild());  Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFollowNode(fromNode,    parent.getLastChild());    Node  body  =  parent.getFirstChild();  return  computeFollowNode(fromNode,  body);	  	non-compiled	[CE]  unreachable  statement	7	None	add
265	[BUG]  [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode,  parent.getFirstChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode,  parent.getFirstChild(),  node);	  return    computeFallThrough(fromNode,    parent);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	1	None	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	30	3	add
267	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  lastJump  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  lastJump  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	30	3	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	30	3	add
269	[BUG]  [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      Node  nextSibling  =  parent.getFirstChild();  Node  firstSibling  =  parent.getFirstChild();  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        Node    nextSibling    =    parent.getFirstChild();    Node  firstSibling  =  parent.getFirstChild();	  	compilable	  [FE]  AssertionFailedError  	30	3	add
270	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	32	7	add
271	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.BLOCK);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.BLOCK);	  	compilable	  [FE]  RuntimeException  	32	7	add
272	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	add	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	32	7	add
273	[BUG]  [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [FE]  RuntimeException  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]      NodeUtil.removeChild(parent,  node);  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]    return  computeFollowNode(fromNode,  parent);  }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	        NodeUtil.removeChild(parent,    node);    Preconditions.checkState(parent.getType()  ==  Token.NAME);	  	compilable	  [FE]  RuntimeException  	32	7	add
274	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  nextSibling  =  parent.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	26	None	add
275	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getFirstChild());  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  nextSibling  =  node.getFirstChild();  return  computeFallThrough(node.getFirstChild());	  	non-compiled	[CE]  unreachable  statement	26	None	add
276	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  nextSibling  =  node.getFirstChild();  return  computeFollowNode(fromNode,  parent);	  	non-compiled	[CE]  unreachable  statement	26	None	add
277	[BUG]  [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  body  =  node.getFirstChild();  [CE]  unreachable  statement  [FE]          AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(node.getFirstChild());  Node  body  =  node.getFirstChild();  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return    computeFallThrough(node.getFirstChild());    Node  body  =  node.getFirstChild();	  	non-compiled	[CE]  unreachable  statement	26	None	add
278	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  body);  [CE]  cannot  find  symbol  body  [FE]              AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  node,  body);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  node,  body);	  return    computeFollowNode(fromNode,    parent,    node);    	non-compiled	[CE]  cannot  find  symbol  body	6	None	replace
279	[BUG]  [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  predicate);  [CE]  cannot  find  symbol  predicate  [FE]        AssertionFailedError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFollowNode(fromNode,  parent,  nodePriorities,  predicate);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFollowNode(fromNode,  parent,  nodePriorities,  predicate);	  return    computeFollowNode(fromNode,    parent,    nodePriorities);    	non-compiled	[CE]  cannot  find  symbol  predicate	19	None	replace
280	[BUG]  [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node);  [CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;  [FE]    StackOverflowError    [CONTEXT]    if  (NodeUtil.hasFinally(parent))  {  //  and  have  FINALLY  block.  return  computeFallThrough(parent.getLastChild());  }  else  {  //  and  have  no  FINALLY.    [BUGGY]  return  computeFallThrough(fromNode.getFirstChild(),  node);  [BUGGY]    }  [CLASS]  ControlFlowAnalysis  1  AstControlFlowGraph  1  2  [METHOD]  computeFollowNode  [RETURN_TYPE]  Node  Node  fromNode  Node  node  [VARIABLES]  Multimap  finallyMap  AbstractCompiler  compiler  boolean  shouldTraverseFunctions  ControlFlowGraph  cfg  Node  body  child  collection  cond  cur  curHandler  deflt  elseBlock  entry  externs  finallyNode  forNode  fromNode  init  item  iter  lastJump  n  next  nextSibling  node  parent  root  thenBlock  value  Map  astPosition  nodePriorities  priorities  Deque  exceptionHandler  int  astPositionCounter  priorityCounter  Comparator  priorityComparator  	projects/Closure103/src/com/google/javascript/jscomp/ControlFlowAnalysis.java	0.47140452079103173	730	730	3	replace	return  computeFallThrough(fromNode.getFirstChild(),  node);	  return    computeFollowNode(fromNode,    node);    	non-compiled	[CE]  method  computeFallThrough  in  class  ControlFlowAnalysis  cannot  be  applied  to  given  types;	3	None	replace
